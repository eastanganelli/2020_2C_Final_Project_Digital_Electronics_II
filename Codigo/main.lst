CCS PCM C Compiler, Version 5.076, 56587               30-oct.-20 18:13

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Proyecto Final\tp_final_edi2\Codigo\main.lst

               ROM used:   3675 words (45%)
                           Largest free fragment is 2048
               RAM used:   56 (15%) at main() level
                           135 (37%) worst case
               Stack used: 8 locations (4 in main + 4 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0C
0001:  MOVWF  0A
0002:  GOTO   4AF
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   450
.................... #include <main.h> 
.................... #include <16F877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
002F:  BCF    0A.0
0030:  BCF    0A.1
0031:  BCF    0A.2
0032:  ADDLW  36
0033:  BTFSC  03.0
0034:  INCF   0A,F
0035:  MOVWF  02
0036:  RETLW  00
0037:  RETLW  00
0038:  RETLW  00
0039:  RETLW  00
003A:  RETLW  00
003B:  RETLW  00
003C:  RETLW  00
003D:  RETLW  5F
003E:  RETLW  00
003F:  RETLW  00
0040:  RETLW  00
0041:  RETLW  03
0042:  RETLW  00
0043:  RETLW  03
0044:  RETLW  00
0045:  RETLW  14
0046:  RETLW  3E
0047:  RETLW  14
0048:  RETLW  3E
0049:  RETLW  14
004A:  RETLW  24
004B:  RETLW  2A
004C:  RETLW  7F
004D:  RETLW  2A
004E:  RETLW  12
004F:  RETLW  43
0050:  RETLW  33
0051:  RETLW  08
0052:  RETLW  66
0053:  RETLW  61
0054:  RETLW  36
0055:  RETLW  49
0056:  RETLW  55
0057:  RETLW  22
0058:  RETLW  50
0059:  RETLW  00
005A:  RETLW  05
005B:  RETLW  03
005C:  RETLW  00
005D:  RETLW  00
005E:  RETLW  00
005F:  RETLW  1C
0060:  RETLW  22
0061:  RETLW  41
0062:  RETLW  00
0063:  RETLW  00
0064:  RETLW  41
0065:  RETLW  22
0066:  RETLW  1C
0067:  RETLW  00
0068:  RETLW  14
0069:  RETLW  08
006A:  RETLW  3E
006B:  RETLW  08
006C:  RETLW  14
006D:  RETLW  08
006E:  RETLW  08
006F:  RETLW  3E
0070:  RETLW  08
0071:  RETLW  08
0072:  RETLW  00
0073:  RETLW  50
0074:  RETLW  30
0075:  RETLW  00
0076:  RETLW  00
0077:  RETLW  08
0078:  RETLW  08
0079:  RETLW  08
007A:  RETLW  08
007B:  RETLW  08
007C:  RETLW  00
007D:  RETLW  60
007E:  RETLW  60
007F:  RETLW  00
0080:  RETLW  00
0081:  RETLW  20
0082:  RETLW  10
0083:  RETLW  08
0084:  RETLW  04
0085:  RETLW  02
0086:  RETLW  3E
0087:  RETLW  51
0088:  RETLW  49
0089:  RETLW  45
008A:  RETLW  3E
008B:  RETLW  00
008C:  RETLW  04
008D:  RETLW  02
008E:  RETLW  7F
008F:  RETLW  00
0090:  RETLW  42
0091:  RETLW  61
0092:  RETLW  51
0093:  RETLW  49
0094:  RETLW  46
0095:  RETLW  22
0096:  RETLW  41
0097:  RETLW  49
0098:  RETLW  49
0099:  RETLW  36
009A:  RETLW  18
009B:  RETLW  14
009C:  RETLW  12
009D:  RETLW  7F
009E:  RETLW  10
009F:  RETLW  27
00A0:  RETLW  45
00A1:  RETLW  45
00A2:  RETLW  45
00A3:  RETLW  39
00A4:  RETLW  3E
00A5:  RETLW  49
00A6:  RETLW  49
00A7:  RETLW  49
00A8:  RETLW  32
00A9:  RETLW  01
00AA:  RETLW  01
00AB:  RETLW  71
00AC:  RETLW  09
00AD:  RETLW  07
00AE:  RETLW  36
00AF:  RETLW  49
00B0:  RETLW  49
00B1:  RETLW  49
00B2:  RETLW  36
00B3:  RETLW  26
00B4:  RETLW  49
00B5:  RETLW  49
00B6:  RETLW  49
00B7:  RETLW  3E
00B8:  RETLW  00
00B9:  RETLW  36
00BA:  RETLW  36
00BB:  RETLW  00
00BC:  RETLW  00
00BD:  RETLW  00
00BE:  RETLW  56
00BF:  RETLW  36
00C0:  RETLW  00
00C1:  RETLW  00
00C2:  RETLW  08
00C3:  RETLW  14
00C4:  RETLW  22
00C5:  RETLW  41
00C6:  RETLW  00
00C7:  RETLW  14
00C8:  RETLW  14
00C9:  RETLW  14
00CA:  RETLW  14
00CB:  RETLW  14
00CC:  RETLW  00
00CD:  RETLW  41
00CE:  RETLW  22
00CF:  RETLW  14
00D0:  RETLW  08
00D1:  RETLW  02
00D2:  RETLW  01
00D3:  RETLW  51
00D4:  RETLW  09
00D5:  RETLW  06
00D6:  RETLW  3E
00D7:  RETLW  41
00D8:  RETLW  59
00D9:  RETLW  55
00DA:  RETLW  5E
00DB:  RETLW  7E
00DC:  RETLW  09
00DD:  RETLW  09
00DE:  RETLW  09
00DF:  RETLW  7E
00E0:  RETLW  7F
00E1:  RETLW  49
00E2:  RETLW  49
00E3:  RETLW  49
00E4:  RETLW  36
00E5:  RETLW  3E
00E6:  RETLW  41
00E7:  RETLW  41
00E8:  RETLW  41
00E9:  RETLW  22
00EA:  RETLW  7F
00EB:  RETLW  41
00EC:  RETLW  41
00ED:  RETLW  41
00EE:  RETLW  3E
00EF:  RETLW  7F
00F0:  RETLW  49
00F1:  RETLW  49
00F2:  RETLW  49
00F3:  RETLW  41
00F4:  RETLW  7F
00F5:  RETLW  09
00F6:  RETLW  09
00F7:  RETLW  09
00F8:  RETLW  01
00F9:  RETLW  3E
00FA:  RETLW  41
00FB:  RETLW  41
00FC:  RETLW  49
00FD:  RETLW  3A
00FE:  RETLW  7F
00FF:  RETLW  08
0100:  RETLW  08
0101:  RETLW  08
0102:  RETLW  7F
0103:  RETLW  00
0104:  RETLW  41
0105:  RETLW  7F
0106:  RETLW  41
0107:  RETLW  00
0108:  RETLW  30
0109:  RETLW  40
010A:  RETLW  40
010B:  RETLW  40
010C:  RETLW  3F
010D:  RETLW  7F
010E:  RETLW  08
010F:  RETLW  14
0110:  RETLW  22
0111:  RETLW  41
0112:  RETLW  7F
0113:  RETLW  40
0114:  RETLW  40
0115:  RETLW  40
0116:  RETLW  40
0117:  RETLW  7F
0118:  RETLW  02
0119:  RETLW  0C
011A:  RETLW  02
011B:  RETLW  7F
011C:  RETLW  7F
011D:  RETLW  02
011E:  RETLW  04
011F:  RETLW  08
0120:  RETLW  7F
0121:  RETLW  3E
0122:  RETLW  41
0123:  RETLW  41
0124:  RETLW  41
0125:  RETLW  3E
0126:  RETLW  7F
0127:  RETLW  09
0128:  RETLW  09
0129:  RETLW  09
012A:  RETLW  06
012B:  RETLW  1E
012C:  RETLW  21
012D:  RETLW  21
012E:  RETLW  21
012F:  RETLW  5E
0130:  RETLW  7F
0131:  RETLW  09
0132:  RETLW  09
0133:  RETLW  09
0134:  RETLW  76
0135:  BSF    0A.0
0136:  BCF    0A.1
0137:  BCF    0A.2
0138:  ADDLW  3C
0139:  BTFSC  03.0
013A:  INCF   0A,F
013B:  MOVWF  02
013C:  RETLW  26
013D:  RETLW  49
013E:  RETLW  49
013F:  RETLW  49
0140:  RETLW  32
0141:  RETLW  01
0142:  RETLW  01
0143:  RETLW  7F
0144:  RETLW  01
0145:  RETLW  01
0146:  RETLW  3F
0147:  RETLW  40
0148:  RETLW  40
0149:  RETLW  40
014A:  RETLW  3F
014B:  RETLW  1F
014C:  RETLW  20
014D:  RETLW  40
014E:  RETLW  20
014F:  RETLW  1F
0150:  RETLW  7F
0151:  RETLW  20
0152:  RETLW  10
0153:  RETLW  20
0154:  RETLW  7F
0155:  RETLW  41
0156:  RETLW  22
0157:  RETLW  1C
0158:  RETLW  22
0159:  RETLW  41
015A:  RETLW  07
015B:  RETLW  08
015C:  RETLW  70
015D:  RETLW  08
015E:  RETLW  07
015F:  RETLW  61
0160:  RETLW  51
0161:  RETLW  49
0162:  RETLW  45
0163:  RETLW  43
0164:  RETLW  00
0165:  RETLW  7F
0166:  RETLW  41
0167:  RETLW  00
0168:  RETLW  00
0169:  RETLW  02
016A:  RETLW  04
016B:  RETLW  08
016C:  RETLW  10
016D:  RETLW  20
016E:  RETLW  00
016F:  RETLW  00
0170:  RETLW  41
0171:  RETLW  7F
0172:  RETLW  00
0173:  RETLW  04
0174:  RETLW  02
0175:  RETLW  01
0176:  RETLW  02
0177:  RETLW  04
0178:  RETLW  40
0179:  RETLW  40
017A:  RETLW  40
017B:  RETLW  40
017C:  RETLW  40
017D:  RETLW  00
017E:  RETLW  01
017F:  RETLW  02
0180:  RETLW  04
0181:  RETLW  00
0182:  RETLW  20
0183:  RETLW  54
0184:  RETLW  54
0185:  RETLW  54
0186:  RETLW  78
0187:  RETLW  7F
0188:  RETLW  44
0189:  RETLW  44
018A:  RETLW  44
018B:  RETLW  38
018C:  RETLW  38
018D:  RETLW  44
018E:  RETLW  44
018F:  RETLW  44
0190:  RETLW  44
0191:  RETLW  38
0192:  RETLW  44
0193:  RETLW  44
0194:  RETLW  44
0195:  RETLW  7F
0196:  RETLW  38
0197:  RETLW  54
0198:  RETLW  54
0199:  RETLW  54
019A:  RETLW  18
019B:  RETLW  04
019C:  RETLW  04
019D:  RETLW  7E
019E:  RETLW  05
019F:  RETLW  05
01A0:  RETLW  08
01A1:  RETLW  54
01A2:  RETLW  54
01A3:  RETLW  54
01A4:  RETLW  3C
01A5:  RETLW  7F
01A6:  RETLW  08
01A7:  RETLW  04
01A8:  RETLW  04
01A9:  RETLW  78
01AA:  RETLW  00
01AB:  RETLW  44
01AC:  RETLW  7D
01AD:  RETLW  40
01AE:  RETLW  00
01AF:  RETLW  20
01B0:  RETLW  40
01B1:  RETLW  44
01B2:  RETLW  3D
01B3:  RETLW  00
01B4:  RETLW  7F
01B5:  RETLW  10
01B6:  RETLW  28
01B7:  RETLW  44
01B8:  RETLW  00
01B9:  RETLW  00
01BA:  RETLW  41
01BB:  RETLW  7F
01BC:  RETLW  40
01BD:  RETLW  00
01BE:  RETLW  7C
01BF:  RETLW  04
01C0:  RETLW  78
01C1:  RETLW  04
01C2:  RETLW  78
01C3:  RETLW  7C
01C4:  RETLW  08
01C5:  RETLW  04
01C6:  RETLW  04
01C7:  RETLW  78
01C8:  RETLW  38
01C9:  RETLW  44
01CA:  RETLW  44
01CB:  RETLW  44
01CC:  RETLW  38
01CD:  RETLW  7C
01CE:  RETLW  14
01CF:  RETLW  14
01D0:  RETLW  14
01D1:  RETLW  08
01D2:  RETLW  08
01D3:  RETLW  14
01D4:  RETLW  14
01D5:  RETLW  14
01D6:  RETLW  7C
01D7:  RETLW  00
01D8:  RETLW  7C
01D9:  RETLW  08
01DA:  RETLW  04
01DB:  RETLW  04
01DC:  RETLW  48
01DD:  RETLW  54
01DE:  RETLW  54
01DF:  RETLW  54
01E0:  RETLW  20
01E1:  RETLW  04
01E2:  RETLW  04
01E3:  RETLW  3F
01E4:  RETLW  44
01E5:  RETLW  44
01E6:  RETLW  3C
01E7:  RETLW  40
01E8:  RETLW  40
01E9:  RETLW  20
01EA:  RETLW  7C
01EB:  RETLW  1C
01EC:  RETLW  20
01ED:  RETLW  40
01EE:  RETLW  20
01EF:  RETLW  1C
01F0:  RETLW  3C
01F1:  RETLW  40
01F2:  RETLW  30
01F3:  RETLW  40
01F4:  RETLW  3C
01F5:  RETLW  44
01F6:  RETLW  28
01F7:  RETLW  10
01F8:  RETLW  28
01F9:  RETLW  44
01FA:  RETLW  0C
01FB:  RETLW  50
01FC:  RETLW  50
01FD:  RETLW  50
01FE:  RETLW  3C
01FF:  RETLW  44
0200:  RETLW  64
0201:  RETLW  54
0202:  RETLW  4C
0203:  RETLW  44
0204:  RETLW  00
0205:  RETLW  08
0206:  RETLW  36
0207:  RETLW  41
0208:  RETLW  41
0209:  RETLW  00
020A:  RETLW  00
020B:  RETLW  7F
020C:  RETLW  00
020D:  RETLW  00
020E:  RETLW  41
020F:  RETLW  41
0210:  RETLW  36
0211:  RETLW  08
0212:  RETLW  00
0213:  RETLW  02
0214:  RETLW  01
0215:  RETLW  02
0216:  RETLW  04
0217:  RETLW  02
0218:  BCF    0A.0
0219:  BSF    0A.1
021A:  BCF    0A.2
021B:  ADDWF  02,F
021C:  RETLW  43
021D:  RETLW  61
021E:  RETLW  70
021F:  RETLW  74
0220:  RETLW  75
0221:  RETLW  72
0222:  RETLW  61
0223:  RETLW  6E
0224:  RETLW  64
0225:  RETLW  6F
0226:  RETLW  00
0227:  BCF    0A.0
0228:  BSF    0A.1
0229:  BCF    0A.2
022A:  ADDWF  02,F
022B:  RETLW  54
022C:  RETLW  65
022D:  RETLW  6D
022E:  RETLW  70
022F:  RETLW  65
0230:  RETLW  72
0231:  RETLW  61
0232:  RETLW  74
0233:  RETLW  75
0234:  RETLW  72
0235:  RETLW  61
0236:  RETLW  3A
0237:  RETLW  00
0238:  CLRF   77
0239:  CLRF   78
023A:  BSF    03.5
023B:  MOVF   3E,W
023C:  BCF    03.0
023D:  BTFSC  3F.0
023E:  ADDWF  77,F
023F:  RRF    77,F
0240:  RRF    78,F
0241:  BTFSC  3F.1
0242:  ADDWF  77,F
0243:  RRF    77,F
0244:  RRF    78,F
0245:  BTFSC  3F.2
0246:  ADDWF  77,F
0247:  RRF    77,F
0248:  RRF    78,F
0249:  BTFSC  3F.3
024A:  ADDWF  77,F
024B:  RRF    77,F
024C:  RRF    78,F
024D:  BTFSC  3F.4
024E:  ADDWF  77,F
024F:  RRF    77,F
0250:  RRF    78,F
0251:  BTFSC  3F.5
0252:  ADDWF  77,F
0253:  RRF    77,F
0254:  RRF    78,F
0255:  BTFSC  3F.6
0256:  ADDWF  77,F
0257:  RRF    77,F
0258:  RRF    78,F
0259:  BTFSC  3F.7
025A:  ADDWF  77,F
025B:  RRF    77,F
025C:  RRF    78,F
025D:  BCF    03.5
025E:  RETURN
*
06C3:  MOVLW  8E
06C4:  MOVWF  77
06C5:  MOVF   5A,W
06C6:  MOVWF  78
06C7:  MOVF   59,W
06C8:  MOVWF  79
06C9:  CLRF   7A
06CA:  MOVF   78,F
06CB:  BTFSS  03.2
06CC:  GOTO   6D7
06CD:  MOVF   79,W
06CE:  MOVWF  78
06CF:  CLRF   79
06D0:  MOVLW  08
06D1:  SUBWF  77,F
06D2:  MOVF   78,F
06D3:  BTFSS  03.2
06D4:  GOTO   6D7
06D5:  CLRF   77
06D6:  GOTO   6DF
06D7:  BCF    03.0
06D8:  BTFSC  78.7
06D9:  GOTO   6DE
06DA:  RLF    79,F
06DB:  RLF    78,F
06DC:  DECF   77,F
06DD:  GOTO   6D7
06DE:  BCF    78.7
06DF:  RETURN
06E0:  MOVF   5C,W
06E1:  BTFSC  03.2
06E2:  GOTO   750
06E3:  MOVWF  64
06E4:  MOVF   60,W
06E5:  BTFSC  03.2
06E6:  GOTO   750
06E7:  ADDWF  64,F
06E8:  BTFSC  03.0
06E9:  GOTO   6F1
06EA:  MOVLW  7F
06EB:  SUBWF  64,F
06EC:  BTFSS  03.0
06ED:  GOTO   750
06EE:  BTFSC  03.2
06EF:  GOTO   750
06F0:  GOTO   6F5
06F1:  MOVLW  81
06F2:  ADDWF  64,F
06F3:  BTFSC  03.0
06F4:  GOTO   750
06F5:  MOVF   64,W
06F6:  MOVWF  77
06F7:  CLRF   78
06F8:  CLRF   79
06F9:  CLRF   7A
06FA:  MOVF   5D,W
06FB:  MOVWF  68
06FC:  BSF    68.7
06FD:  MOVF   5E,W
06FE:  MOVWF  67
06FF:  MOVF   5F,W
0700:  MOVWF  66
0701:  MOVLW  18
0702:  MOVWF  64
0703:  CLRF   65
0704:  BTFSS  66.0
0705:  GOTO   71E
0706:  MOVF   63,W
0707:  ADDWF  7A,F
0708:  BTFSS  03.0
0709:  GOTO   710
070A:  INCF   79,F
070B:  BTFSS  03.2
070C:  GOTO   710
070D:  INCF   78,F
070E:  BTFSC  03.2
070F:  BSF    65.7
0710:  MOVF   62,W
0711:  ADDWF  79,F
0712:  BTFSS  03.0
0713:  GOTO   717
0714:  INCF   78,F
0715:  BTFSC  03.2
0716:  BSF    65.7
0717:  MOVF   61,W
0718:  MOVWF  5E
0719:  BSF    5E.7
071A:  MOVF   5E,W
071B:  ADDWF  78,F
071C:  BTFSC  03.0
071D:  BSF    65.7
071E:  RLF    65,F
071F:  RRF    78,F
0720:  RRF    79,F
0721:  RRF    7A,F
0722:  RRF    68,F
0723:  RRF    67,F
0724:  RRF    66,F
0725:  BCF    03.0
0726:  DECFSZ 64,F
0727:  GOTO   703
0728:  MOVLW  01
0729:  ADDWF  77,F
072A:  BTFSC  03.0
072B:  GOTO   750
072C:  BTFSC  78.7
072D:  GOTO   735
072E:  RLF    68,F
072F:  RLF    7A,F
0730:  RLF    79,F
0731:  RLF    78,F
0732:  DECF   77,F
0733:  BTFSC  03.2
0734:  GOTO   750
0735:  BTFSS  68.7
0736:  GOTO   746
0737:  INCF   7A,F
0738:  BTFSS  03.2
0739:  GOTO   746
073A:  INCF   79,F
073B:  BTFSS  03.2
073C:  GOTO   746
073D:  INCF   78,F
073E:  BTFSS  03.2
073F:  GOTO   746
0740:  RRF    78,F
0741:  RRF    79,F
0742:  RRF    7A,F
0743:  INCF   77,F
0744:  BTFSC  03.2
0745:  GOTO   750
0746:  MOVF   5D,W
0747:  MOVWF  65
0748:  MOVF   61,W
0749:  XORWF  65,F
074A:  BTFSS  65.7
074B:  GOTO   74E
074C:  BSF    78.7
074D:  GOTO   754
074E:  BCF    78.7
074F:  GOTO   754
0750:  CLRF   77
0751:  CLRF   78
0752:  CLRF   79
0753:  CLRF   7A
0754:  RETURN
0755:  MOVF   50,W
0756:  MOVWF  57
0757:  MOVF   54,W
0758:  XORWF  57,F
0759:  BTFSS  57.7
075A:  GOTO   760
075B:  BCF    03.2
075C:  BCF    03.0
075D:  BTFSC  50.7
075E:  BSF    03.0
075F:  GOTO   793
0760:  MOVF   50,W
0761:  MOVWF  57
0762:  MOVF   53,W
0763:  MOVWF  58
0764:  MOVF   4F,W
0765:  SUBWF  58,F
0766:  BTFSC  03.2
0767:  GOTO   76E
0768:  BTFSS  57.7
0769:  GOTO   793
076A:  MOVF   03,W
076B:  XORLW  01
076C:  MOVWF  03
076D:  GOTO   793
076E:  MOVF   54,W
076F:  MOVWF  58
0770:  MOVF   50,W
0771:  SUBWF  58,F
0772:  BTFSC  03.2
0773:  GOTO   77A
0774:  BTFSS  57.7
0775:  GOTO   793
0776:  MOVF   03,W
0777:  XORLW  01
0778:  MOVWF  03
0779:  GOTO   793
077A:  MOVF   55,W
077B:  MOVWF  58
077C:  MOVF   51,W
077D:  SUBWF  58,F
077E:  BTFSC  03.2
077F:  GOTO   786
0780:  BTFSS  57.7
0781:  GOTO   793
0782:  MOVF   03,W
0783:  XORLW  01
0784:  MOVWF  03
0785:  GOTO   793
0786:  MOVF   56,W
0787:  MOVWF  58
0788:  MOVF   52,W
0789:  SUBWF  58,F
078A:  BTFSC  03.2
078B:  GOTO   792
078C:  BTFSS  57.7
078D:  GOTO   793
078E:  MOVF   03,W
078F:  XORLW  01
0790:  MOVWF  03
0791:  GOTO   793
0792:  BCF    03.0
0793:  RETURN
0794:  MOVF   5C,W
0795:  SUBLW  B6
0796:  MOVWF  5C
0797:  CLRF   7A
0798:  MOVF   5D,W
0799:  MOVWF  60
079A:  BSF    5D.7
079B:  BCF    03.0
079C:  RRF    5D,F
079D:  RRF    5E,F
079E:  RRF    5F,F
079F:  RRF    7A,F
07A0:  RRF    79,F
07A1:  RRF    78,F
07A2:  RRF    77,F
07A3:  DECFSZ 5C,F
07A4:  GOTO   79B
07A5:  BTFSS  60.7
07A6:  GOTO   7B2
07A7:  COMF   77,F
07A8:  COMF   78,F
07A9:  COMF   79,F
07AA:  COMF   7A,F
07AB:  INCF   77,F
07AC:  BTFSC  03.2
07AD:  INCF   78,F
07AE:  BTFSC  03.2
07AF:  INCF   79,F
07B0:  BTFSC  03.2
07B1:  INCF   7A,F
07B2:  RETURN
07B3:  MOVF   30,W
07B4:  MOVWF  04
07B5:  BCF    03.7
07B6:  BTFSC  31.0
07B7:  BSF    03.7
07B8:  MOVF   5C,W
07B9:  MOVWF  00
07BA:  INCF   04,F
07BB:  CLRF   00
07BC:  INCF   30,F
07BD:  BTFSC  03.2
07BE:  INCF   31,F
07BF:  RETURN
07C0:  MOVLW  8E
07C1:  MOVWF  77
07C2:  MOVF   55,W
07C3:  SUBWF  77,F
07C4:  MOVF   56,W
07C5:  MOVWF  79
07C6:  MOVF   57,W
07C7:  MOVWF  78
07C8:  BSF    79.7
07C9:  MOVF   77,F
07CA:  BTFSC  03.2
07CB:  GOTO   7D7
07CC:  BCF    03.0
07CD:  MOVF   79,F
07CE:  BTFSS  03.2
07CF:  GOTO   7D3
07D0:  MOVF   78,F
07D1:  BTFSC  03.2
07D2:  GOTO   7D7
07D3:  RRF    79,F
07D4:  RRF    78,F
07D5:  DECFSZ 77,F
07D6:  GOTO   7CC
07D7:  BTFSS  56.7
07D8:  GOTO   7DE
07D9:  COMF   78,F
07DA:  COMF   79,F
07DB:  INCF   78,F
07DC:  BTFSC  03.2
07DD:  INCF   79,F
07DE:  RETURN
*
0800:  MOVF   53,W
0801:  BTFSC  03.2
0802:  GOTO   0C6
0803:  MOVWF  5F
0804:  MOVF   57,W
0805:  BTFSC  03.2
0806:  GOTO   0C6
0807:  SUBWF  5F,F
0808:  BTFSC  03.0
0809:  GOTO   00B
080A:  GOTO   010
080B:  MOVLW  7F
080C:  ADDWF  5F,F
080D:  BTFSC  03.0
080E:  GOTO   0C6
080F:  GOTO   016
0810:  MOVLW  81
0811:  SUBWF  5F,F
0812:  BTFSS  03.0
0813:  GOTO   0C6
0814:  BTFSC  03.2
0815:  GOTO   0C6
0816:  MOVF   5F,W
0817:  MOVWF  77
0818:  CLRF   78
0819:  CLRF   79
081A:  CLRF   7A
081B:  CLRF   5E
081C:  MOVF   54,W
081D:  MOVWF  5D
081E:  BSF    5D.7
081F:  MOVF   55,W
0820:  MOVWF  5C
0821:  MOVF   56,W
0822:  MOVWF  5B
0823:  MOVLW  19
0824:  MOVWF  5F
0825:  MOVF   5A,W
0826:  SUBWF  5B,F
0827:  BTFSC  03.0
0828:  GOTO   039
0829:  MOVLW  01
082A:  SUBWF  5C,F
082B:  BTFSC  03.0
082C:  GOTO   039
082D:  SUBWF  5D,F
082E:  BTFSC  03.0
082F:  GOTO   039
0830:  SUBWF  5E,F
0831:  BTFSC  03.0
0832:  GOTO   039
0833:  INCF   5E,F
0834:  INCF   5D,F
0835:  INCF   5C,F
0836:  MOVF   5A,W
0837:  ADDWF  5B,F
0838:  GOTO   06B
0839:  MOVF   59,W
083A:  SUBWF  5C,F
083B:  BTFSC  03.0
083C:  GOTO   054
083D:  MOVLW  01
083E:  SUBWF  5D,F
083F:  BTFSC  03.0
0840:  GOTO   054
0841:  SUBWF  5E,F
0842:  BTFSC  03.0
0843:  GOTO   054
0844:  INCF   5E,F
0845:  INCF   5D,F
0846:  MOVF   59,W
0847:  ADDWF  5C,F
0848:  MOVF   5A,W
0849:  ADDWF  5B,F
084A:  BTFSS  03.0
084B:  GOTO   06B
084C:  INCF   5C,F
084D:  BTFSS  03.2
084E:  GOTO   06B
084F:  INCF   5D,F
0850:  BTFSS  03.2
0851:  GOTO   06B
0852:  INCF   5E,F
0853:  GOTO   06B
0854:  MOVF   58,W
0855:  IORLW  80
0856:  SUBWF  5D,F
0857:  BTFSC  03.0
0858:  GOTO   06A
0859:  MOVLW  01
085A:  SUBWF  5E,F
085B:  BTFSC  03.0
085C:  GOTO   06A
085D:  INCF   5E,F
085E:  MOVF   58,W
085F:  IORLW  80
0860:  ADDWF  5D,F
0861:  MOVF   59,W
0862:  ADDWF  5C,F
0863:  BTFSS  03.0
0864:  GOTO   048
0865:  INCF   5D,F
0866:  BTFSS  03.2
0867:  GOTO   048
0868:  INCF   5E,F
0869:  GOTO   048
086A:  BSF    7A.0
086B:  DECFSZ 5F,F
086C:  GOTO   06E
086D:  GOTO   079
086E:  BCF    03.0
086F:  RLF    5B,F
0870:  RLF    5C,F
0871:  RLF    5D,F
0872:  RLF    5E,F
0873:  BCF    03.0
0874:  RLF    7A,F
0875:  RLF    79,F
0876:  RLF    78,F
0877:  RLF    60,F
0878:  GOTO   025
0879:  BTFSS  60.0
087A:  GOTO   081
087B:  BCF    03.0
087C:  RRF    78,F
087D:  RRF    79,F
087E:  RRF    7A,F
087F:  RRF    60,F
0880:  GOTO   084
0881:  DECF   77,F
0882:  BTFSC  03.2
0883:  GOTO   0C6
0884:  BTFSC  60.7
0885:  GOTO   0AD
0886:  BCF    03.0
0887:  RLF    5B,F
0888:  RLF    5C,F
0889:  RLF    5D,F
088A:  RLF    5E,F
088B:  MOVF   5A,W
088C:  SUBWF  5B,F
088D:  BTFSC  03.0
088E:  GOTO   099
088F:  MOVLW  01
0890:  SUBWF  5C,F
0891:  BTFSC  03.0
0892:  GOTO   099
0893:  SUBWF  5D,F
0894:  BTFSC  03.0
0895:  GOTO   099
0896:  SUBWF  5E,F
0897:  BTFSS  03.0
0898:  GOTO   0BC
0899:  MOVF   59,W
089A:  SUBWF  5C,F
089B:  BTFSC  03.0
089C:  GOTO   0A4
089D:  MOVLW  01
089E:  SUBWF  5D,F
089F:  BTFSC  03.0
08A0:  GOTO   0A4
08A1:  SUBWF  5E,F
08A2:  BTFSS  03.0
08A3:  GOTO   0BC
08A4:  MOVF   58,W
08A5:  IORLW  80
08A6:  SUBWF  5D,F
08A7:  BTFSC  03.0
08A8:  GOTO   0AD
08A9:  MOVLW  01
08AA:  SUBWF  5E,F
08AB:  BTFSS  03.0
08AC:  GOTO   0BC
08AD:  INCF   7A,F
08AE:  BTFSS  03.2
08AF:  GOTO   0BC
08B0:  INCF   79,F
08B1:  BTFSS  03.2
08B2:  GOTO   0BC
08B3:  INCF   78,F
08B4:  BTFSS  03.2
08B5:  GOTO   0BC
08B6:  INCF   77,F
08B7:  BTFSC  03.2
08B8:  GOTO   0C6
08B9:  RRF    78,F
08BA:  RRF    79,F
08BB:  RRF    7A,F
08BC:  MOVF   54,W
08BD:  MOVWF  5F
08BE:  MOVF   58,W
08BF:  XORWF  5F,F
08C0:  BTFSS  5F.7
08C1:  GOTO   0C4
08C2:  BSF    78.7
08C3:  GOTO   0CA
08C4:  BCF    78.7
08C5:  GOTO   0CA
08C6:  CLRF   77
08C7:  CLRF   78
08C8:  CLRF   79
08C9:  CLRF   7A
08CA:  BSF    0A.3
08CB:  BCF    0A.4
08CC:  GOTO   5A4 (RETURN)
08CD:  BTFSC  03.1
08CE:  GOTO   0D2
08CF:  MOVLW  64
08D0:  MOVWF  04
08D1:  BCF    03.7
08D2:  CLRF   77
08D3:  CLRF   78
08D4:  CLRF   79
08D5:  CLRF   7A
08D6:  CLRF   64
08D7:  CLRF   65
08D8:  CLRF   66
08D9:  CLRF   67
08DA:  MOVF   63,W
08DB:  IORWF  62,W
08DC:  IORWF  61,W
08DD:  IORWF  60,W
08DE:  BTFSC  03.2
08DF:  GOTO   110
08E0:  MOVLW  20
08E1:  MOVWF  68
08E2:  BCF    03.0
08E3:  RLF    5C,F
08E4:  RLF    5D,F
08E5:  RLF    5E,F
08E6:  RLF    5F,F
08E7:  RLF    64,F
08E8:  RLF    65,F
08E9:  RLF    66,F
08EA:  RLF    67,F
08EB:  MOVF   63,W
08EC:  SUBWF  67,W
08ED:  BTFSS  03.2
08EE:  GOTO   0F9
08EF:  MOVF   62,W
08F0:  SUBWF  66,W
08F1:  BTFSS  03.2
08F2:  GOTO   0F9
08F3:  MOVF   61,W
08F4:  SUBWF  65,W
08F5:  BTFSS  03.2
08F6:  GOTO   0F9
08F7:  MOVF   60,W
08F8:  SUBWF  64,W
08F9:  BTFSS  03.0
08FA:  GOTO   10A
08FB:  MOVF   60,W
08FC:  SUBWF  64,F
08FD:  MOVF   61,W
08FE:  BTFSS  03.0
08FF:  INCFSZ 61,W
0900:  SUBWF  65,F
0901:  MOVF   62,W
0902:  BTFSS  03.0
0903:  INCFSZ 62,W
0904:  SUBWF  66,F
0905:  MOVF   63,W
0906:  BTFSS  03.0
0907:  INCFSZ 63,W
0908:  SUBWF  67,F
0909:  BSF    03.0
090A:  RLF    77,F
090B:  RLF    78,F
090C:  RLF    79,F
090D:  RLF    7A,F
090E:  DECFSZ 68,F
090F:  GOTO   0E2
0910:  MOVF   64,W
0911:  MOVWF  00
0912:  INCF   04,F
0913:  MOVF   65,W
0914:  MOVWF  00
0915:  INCF   04,F
0916:  MOVF   66,W
0917:  MOVWF  00
0918:  INCF   04,F
0919:  MOVF   67,W
091A:  MOVWF  00
091B:  RETURN
091C:  MOVF   04,W
091D:  MOVWF  54
091E:  MOVF   53,W
091F:  MOVWF  56
0920:  BTFSC  03.2
0921:  GOTO   13D
0922:  MOVF   52,W
0923:  MOVWF  5F
0924:  MOVF   51,W
0925:  MOVWF  5E
0926:  MOVF   50,W
0927:  MOVWF  5D
0928:  MOVF   4F,W
0929:  MOVWF  5C
092A:  CLRF   63
092B:  CLRF   62
092C:  MOVLW  20
092D:  MOVWF  61
092E:  MOVLW  82
092F:  MOVWF  60
0930:  BCF    0A.3
0931:  CALL   6E0
0932:  BSF    0A.3
0933:  MOVF   7A,W
0934:  MOVWF  52
0935:  MOVF   79,W
0936:  MOVWF  51
0937:  MOVF   78,W
0938:  MOVWF  50
0939:  MOVF   77,W
093A:  MOVWF  4F
093B:  DECFSZ 56,F
093C:  GOTO   122
093D:  MOVF   52,W
093E:  MOVWF  5F
093F:  MOVF   51,W
0940:  MOVWF  5E
0941:  MOVF   50,W
0942:  MOVWF  5D
0943:  MOVF   4F,W
0944:  MOVWF  5C
0945:  BCF    0A.3
0946:  CALL   794
0947:  BSF    0A.3
0948:  MOVF   7A,W
0949:  MOVWF  52
094A:  MOVF   79,W
094B:  MOVWF  51
094C:  MOVF   78,W
094D:  MOVWF  50
094E:  MOVF   77,W
094F:  MOVWF  4F
0950:  BTFSS  52.7
0951:  GOTO   15F
0952:  DECF   54,F
0953:  BSF    54.5
0954:  COMF   4F,F
0955:  COMF   50,F
0956:  COMF   51,F
0957:  COMF   52,F
0958:  INCF   4F,F
0959:  BTFSC  03.2
095A:  INCF   50,F
095B:  BTFSC  03.2
095C:  INCF   51,F
095D:  BTFSC  03.2
095E:  INCF   52,F
095F:  MOVLW  3B
0960:  MOVWF  5B
0961:  MOVLW  9A
0962:  MOVWF  5A
0963:  MOVLW  CA
0964:  MOVWF  59
0965:  CLRF   58
0966:  MOVLW  0A
0967:  MOVWF  56
0968:  MOVF   53,W
0969:  BTFSC  03.2
096A:  INCF   54,F
096B:  BSF    03.1
096C:  MOVLW  4F
096D:  MOVWF  04
096E:  BCF    03.7
096F:  MOVF   52,W
0970:  MOVWF  5F
0971:  MOVF   51,W
0972:  MOVWF  5E
0973:  MOVF   50,W
0974:  MOVWF  5D
0975:  MOVF   4F,W
0976:  MOVWF  5C
0977:  MOVF   5B,W
0978:  MOVWF  63
0979:  MOVF   5A,W
097A:  MOVWF  62
097B:  MOVF   59,W
097C:  MOVWF  61
097D:  MOVF   58,W
097E:  MOVWF  60
097F:  CALL   0CD
0980:  MOVF   78,W
0981:  MOVF   77,F
0982:  BTFSS  03.2
0983:  GOTO   197
0984:  INCF   53,W
0985:  SUBWF  56,W
0986:  BTFSC  03.2
0987:  GOTO   197
0988:  MOVF   54,W
0989:  BTFSC  03.2
098A:  GOTO   199
098B:  ANDLW  0F
098C:  SUBWF  56,W
098D:  BTFSC  03.2
098E:  GOTO   191
098F:  BTFSC  03.0
0990:  GOTO   1D1
0991:  BTFSC  54.7
0992:  GOTO   1D1
0993:  BTFSC  54.6
0994:  GOTO   199
0995:  MOVLW  20
0996:  GOTO   1CB
0997:  MOVLW  20
0998:  ANDWF  54,F
0999:  BTFSS  54.5
099A:  GOTO   1A9
099B:  BCF    54.5
099C:  MOVF   53,W
099D:  BTFSS  03.2
099E:  DECF   54,F
099F:  MOVF   77,W
09A0:  MOVWF  54
09A1:  MOVLW  2D
09A2:  MOVWF  5C
09A3:  BCF    0A.3
09A4:  CALL   7B3
09A5:  BSF    0A.3
09A6:  MOVF   54,W
09A7:  MOVWF  77
09A8:  CLRF   54
09A9:  MOVF   53,W
09AA:  SUBWF  56,W
09AB:  BTFSS  03.2
09AC:  GOTO   1B9
09AD:  MOVF   77,W
09AE:  MOVWF  54
09AF:  MOVLW  2E
09B0:  MOVWF  5C
09B1:  BCF    0A.3
09B2:  CALL   7B3
09B3:  BSF    0A.3
09B4:  MOVF   54,W
09B5:  MOVWF  77
09B6:  MOVLW  20
09B7:  ANDWF  54,F
09B8:  MOVLW  00
09B9:  MOVLW  30
09BA:  BTFSS  54.5
09BB:  GOTO   1CB
09BC:  BCF    54.5
09BD:  MOVF   53,W
09BE:  BTFSS  03.2
09BF:  DECF   54,F
09C0:  MOVF   77,W
09C1:  MOVWF  54
09C2:  MOVLW  2D
09C3:  MOVWF  5C
09C4:  BCF    0A.3
09C5:  CALL   7B3
09C6:  BSF    0A.3
09C7:  MOVF   54,W
09C8:  MOVWF  77
09C9:  CLRF   54
09CA:  MOVLW  30
09CB:  ADDWF  77,F
09CC:  MOVF   77,W
09CD:  MOVWF  5C
09CE:  BCF    0A.3
09CF:  CALL   7B3
09D0:  BSF    0A.3
09D1:  BCF    03.1
09D2:  MOVF   5B,W
09D3:  MOVWF  5F
09D4:  MOVF   5A,W
09D5:  MOVWF  5E
09D6:  MOVF   59,W
09D7:  MOVWF  5D
09D8:  MOVF   58,W
09D9:  MOVWF  5C
09DA:  CLRF   63
09DB:  CLRF   62
09DC:  CLRF   61
09DD:  MOVLW  0A
09DE:  MOVWF  60
09DF:  CALL   0CD
09E0:  MOVF   7A,W
09E1:  MOVWF  5B
09E2:  MOVF   79,W
09E3:  MOVWF  5A
09E4:  MOVF   78,W
09E5:  MOVWF  59
09E6:  MOVF   77,W
09E7:  MOVWF  58
09E8:  DECFSZ 56,F
09E9:  GOTO   16B
09EA:  BSF    0A.3
09EB:  BCF    0A.4
09EC:  GOTO   5D1 (RETURN)
09ED:  MOVF   04,W
09EE:  MOVWF  54
09EF:  MOVF   53,W
09F0:  MOVWF  56
09F1:  BTFSC  03.2
09F2:  GOTO   20E
09F3:  MOVF   52,W
09F4:  MOVWF  5F
09F5:  MOVF   51,W
09F6:  MOVWF  5E
09F7:  MOVF   50,W
09F8:  MOVWF  5D
09F9:  MOVF   4F,W
09FA:  MOVWF  5C
09FB:  CLRF   63
09FC:  CLRF   62
09FD:  MOVLW  20
09FE:  MOVWF  61
09FF:  MOVLW  82
0A00:  MOVWF  60
0A01:  BCF    0A.3
0A02:  CALL   6E0
0A03:  BSF    0A.3
0A04:  MOVF   7A,W
0A05:  MOVWF  52
0A06:  MOVF   79,W
0A07:  MOVWF  51
0A08:  MOVF   78,W
0A09:  MOVWF  50
0A0A:  MOVF   77,W
0A0B:  MOVWF  4F
0A0C:  DECFSZ 56,F
0A0D:  GOTO   1F3
0A0E:  MOVF   52,W
0A0F:  MOVWF  5F
0A10:  MOVF   51,W
0A11:  MOVWF  5E
0A12:  MOVF   50,W
0A13:  MOVWF  5D
0A14:  MOVF   4F,W
0A15:  MOVWF  5C
0A16:  BCF    0A.3
0A17:  CALL   794
0A18:  BSF    0A.3
0A19:  MOVF   7A,W
0A1A:  MOVWF  52
0A1B:  MOVF   79,W
0A1C:  MOVWF  51
0A1D:  MOVF   78,W
0A1E:  MOVWF  50
0A1F:  MOVF   77,W
0A20:  MOVWF  4F
0A21:  BTFSS  52.7
0A22:  GOTO   230
0A23:  DECF   54,F
0A24:  BSF    54.5
0A25:  COMF   4F,F
0A26:  COMF   50,F
0A27:  COMF   51,F
0A28:  COMF   52,F
0A29:  INCF   4F,F
0A2A:  BTFSC  03.2
0A2B:  INCF   50,F
0A2C:  BTFSC  03.2
0A2D:  INCF   51,F
0A2E:  BTFSC  03.2
0A2F:  INCF   52,F
0A30:  MOVLW  3B
0A31:  MOVWF  5B
0A32:  MOVLW  9A
0A33:  MOVWF  5A
0A34:  MOVLW  CA
0A35:  MOVWF  59
0A36:  CLRF   58
0A37:  MOVLW  0A
0A38:  MOVWF  56
0A39:  MOVF   53,W
0A3A:  BTFSC  03.2
0A3B:  INCF   54,F
0A3C:  BSF    03.1
0A3D:  MOVLW  4F
0A3E:  MOVWF  04
0A3F:  BCF    03.7
0A40:  MOVF   52,W
0A41:  MOVWF  5F
0A42:  MOVF   51,W
0A43:  MOVWF  5E
0A44:  MOVF   50,W
0A45:  MOVWF  5D
0A46:  MOVF   4F,W
0A47:  MOVWF  5C
0A48:  MOVF   5B,W
0A49:  MOVWF  63
0A4A:  MOVF   5A,W
0A4B:  MOVWF  62
0A4C:  MOVF   59,W
0A4D:  MOVWF  61
0A4E:  MOVF   58,W
0A4F:  MOVWF  60
0A50:  CALL   0CD
0A51:  MOVF   78,W
0A52:  MOVF   77,F
0A53:  BTFSS  03.2
0A54:  GOTO   268
0A55:  INCF   53,W
0A56:  SUBWF  56,W
0A57:  BTFSC  03.2
0A58:  GOTO   268
0A59:  MOVF   54,W
0A5A:  BTFSC  03.2
0A5B:  GOTO   26A
0A5C:  ANDLW  0F
0A5D:  SUBWF  56,W
0A5E:  BTFSC  03.2
0A5F:  GOTO   262
0A60:  BTFSC  03.0
0A61:  GOTO   29E
0A62:  BTFSC  54.7
0A63:  GOTO   29E
0A64:  BTFSC  54.6
0A65:  GOTO   26A
0A66:  MOVLW  20
0A67:  GOTO   299
0A68:  MOVLW  20
0A69:  ANDWF  54,F
0A6A:  BTFSS  54.5
0A6B:  GOTO   279
0A6C:  BCF    54.5
0A6D:  MOVF   53,W
0A6E:  BTFSS  03.2
0A6F:  DECF   54,F
0A70:  MOVF   77,W
0A71:  MOVWF  54
0A72:  MOVLW  2D
0A73:  BTFSS  0C.4
0A74:  GOTO   273
0A75:  MOVWF  19
0A76:  MOVF   54,W
0A77:  MOVWF  77
0A78:  CLRF   54
0A79:  MOVF   53,W
0A7A:  SUBWF  56,W
0A7B:  BTFSS  03.2
0A7C:  GOTO   288
0A7D:  MOVF   77,W
0A7E:  MOVWF  54
0A7F:  MOVLW  2E
0A80:  BTFSS  0C.4
0A81:  GOTO   280
0A82:  MOVWF  19
0A83:  MOVF   54,W
0A84:  MOVWF  77
0A85:  MOVLW  20
0A86:  ANDWF  54,F
0A87:  MOVLW  00
0A88:  MOVLW  30
0A89:  BTFSS  54.5
0A8A:  GOTO   299
0A8B:  BCF    54.5
0A8C:  MOVF   53,W
0A8D:  BTFSS  03.2
0A8E:  DECF   54,F
0A8F:  MOVF   77,W
0A90:  MOVWF  54
0A91:  MOVLW  2D
0A92:  BTFSS  0C.4
0A93:  GOTO   292
0A94:  MOVWF  19
0A95:  MOVF   54,W
0A96:  MOVWF  77
0A97:  CLRF   54
0A98:  MOVLW  30
0A99:  ADDWF  77,F
0A9A:  MOVF   77,W
0A9B:  BTFSS  0C.4
0A9C:  GOTO   29B
0A9D:  MOVWF  19
0A9E:  BCF    03.1
0A9F:  MOVF   5B,W
0AA0:  MOVWF  5F
0AA1:  MOVF   5A,W
0AA2:  MOVWF  5E
0AA3:  MOVF   59,W
0AA4:  MOVWF  5D
0AA5:  MOVF   58,W
0AA6:  MOVWF  5C
0AA7:  CLRF   63
0AA8:  CLRF   62
0AA9:  CLRF   61
0AAA:  MOVLW  0A
0AAB:  MOVWF  60
0AAC:  CALL   0CD
0AAD:  MOVF   7A,W
0AAE:  MOVWF  5B
0AAF:  MOVF   79,W
0AB0:  MOVWF  5A
0AB1:  MOVF   78,W
0AB2:  MOVWF  59
0AB3:  MOVF   77,W
0AB4:  MOVWF  58
0AB5:  DECFSZ 56,F
0AB6:  GOTO   23C
0AB7:  BSF    0A.3
0AB8:  BCF    0A.4
0AB9:  GOTO   610 (RETURN)
0ABA:  MOVLW  80
0ABB:  BTFSC  03.1
0ABC:  XORWF  5E,F
0ABD:  CLRF   63
0ABE:  CLRF   64
0ABF:  MOVF   5A,W
0AC0:  MOVWF  62
0AC1:  MOVF   5E,W
0AC2:  XORWF  62,F
0AC3:  MOVF   59,W
0AC4:  BTFSC  03.2
0AC5:  GOTO   3AA
0AC6:  MOVWF  61
0AC7:  MOVWF  77
0AC8:  MOVF   5D,W
0AC9:  BTFSC  03.2
0ACA:  GOTO   3B3
0ACB:  SUBWF  61,F
0ACC:  BTFSC  03.2
0ACD:  GOTO   34F
0ACE:  BTFSS  03.0
0ACF:  GOTO   30D
0AD0:  MOVF   5E,W
0AD1:  MOVWF  67
0AD2:  BSF    67.7
0AD3:  MOVF   5F,W
0AD4:  MOVWF  66
0AD5:  MOVF   60,W
0AD6:  MOVWF  65
0AD7:  CLRF   64
0AD8:  BCF    03.0
0AD9:  RRF    67,F
0ADA:  RRF    66,F
0ADB:  RRF    65,F
0ADC:  RRF    64,F
0ADD:  DECFSZ 61,F
0ADE:  GOTO   2D7
0ADF:  BTFSS  62.7
0AE0:  GOTO   2E4
0AE1:  BSF    63.0
0AE2:  GOTO   3C7
0AE3:  BCF    63.0
0AE4:  BCF    61.0
0AE5:  BSF    63.4
0AE6:  MOVLW  5C
0AE7:  MOVWF  04
0AE8:  BCF    03.7
0AE9:  GOTO   3DC
0AEA:  BCF    63.4
0AEB:  BTFSC  62.7
0AEC:  GOTO   2F7
0AED:  BTFSS  61.0
0AEE:  GOTO   302
0AEF:  RRF    67,F
0AF0:  RRF    66,F
0AF1:  RRF    65,F
0AF2:  RRF    64,F
0AF3:  INCF   77,F
0AF4:  BTFSC  03.2
0AF5:  GOTO   3C2
0AF6:  GOTO   302
0AF7:  BTFSC  67.7
0AF8:  GOTO   305
0AF9:  BCF    03.0
0AFA:  RLF    64,F
0AFB:  RLF    65,F
0AFC:  RLF    66,F
0AFD:  RLF    67,F
0AFE:  DECF   77,F
0AFF:  BTFSC  03.2
0B00:  GOTO   3C2
0B01:  GOTO   2F7
0B02:  BSF    63.6
0B03:  GOTO   36F
0B04:  BCF    63.6
0B05:  MOVF   5A,W
0B06:  MOVWF  62
0B07:  BTFSS  62.7
0B08:  GOTO   30B
0B09:  BSF    67.7
0B0A:  GOTO   3BB
0B0B:  BCF    67.7
0B0C:  GOTO   3BB
0B0D:  MOVF   5D,W
0B0E:  MOVWF  61
0B0F:  MOVWF  77
0B10:  MOVF   59,W
0B11:  SUBWF  61,F
0B12:  MOVF   5A,W
0B13:  MOVWF  67
0B14:  BSF    67.7
0B15:  MOVF   5B,W
0B16:  MOVWF  66
0B17:  MOVF   5C,W
0B18:  MOVWF  65
0B19:  CLRF   64
0B1A:  BCF    03.0
0B1B:  RRF    67,F
0B1C:  RRF    66,F
0B1D:  RRF    65,F
0B1E:  RRF    64,F
0B1F:  DECFSZ 61,F
0B20:  GOTO   319
0B21:  BTFSS  62.7
0B22:  GOTO   326
0B23:  BSF    63.1
0B24:  GOTO   3C7
0B25:  BCF    63.1
0B26:  BCF    61.0
0B27:  BSF    63.5
0B28:  MOVLW  60
0B29:  MOVWF  04
0B2A:  BCF    03.7
0B2B:  GOTO   3DC
0B2C:  BCF    63.5
0B2D:  BTFSC  62.7
0B2E:  GOTO   339
0B2F:  BTFSS  61.0
0B30:  GOTO   344
0B31:  RRF    67,F
0B32:  RRF    66,F
0B33:  RRF    65,F
0B34:  RRF    64,F
0B35:  INCF   77,F
0B36:  BTFSC  03.2
0B37:  GOTO   3C2
0B38:  GOTO   344
0B39:  BTFSC  67.7
0B3A:  GOTO   347
0B3B:  BCF    03.0
0B3C:  RLF    64,F
0B3D:  RLF    65,F
0B3E:  RLF    66,F
0B3F:  RLF    67,F
0B40:  DECF   77,F
0B41:  BTFSC  03.2
0B42:  GOTO   3C2
0B43:  GOTO   339
0B44:  BSF    63.7
0B45:  GOTO   36F
0B46:  BCF    63.7
0B47:  MOVF   5E,W
0B48:  MOVWF  62
0B49:  BTFSS  62.7
0B4A:  GOTO   34D
0B4B:  BSF    67.7
0B4C:  GOTO   3BB
0B4D:  BCF    67.7
0B4E:  GOTO   3BB
0B4F:  MOVF   5E,W
0B50:  MOVWF  67
0B51:  BSF    67.7
0B52:  MOVF   5F,W
0B53:  MOVWF  66
0B54:  MOVF   60,W
0B55:  MOVWF  65
0B56:  BTFSS  62.7
0B57:  GOTO   35C
0B58:  BCF    67.7
0B59:  BSF    63.2
0B5A:  GOTO   3C7
0B5B:  BCF    63.2
0B5C:  CLRF   64
0B5D:  BCF    61.0
0B5E:  MOVLW  5C
0B5F:  MOVWF  04
0B60:  BCF    03.7
0B61:  GOTO   3DC
0B62:  BTFSC  62.7
0B63:  GOTO   385
0B64:  MOVF   5A,W
0B65:  MOVWF  62
0B66:  BTFSS  61.0
0B67:  GOTO   36F
0B68:  RRF    67,F
0B69:  RRF    66,F
0B6A:  RRF    65,F
0B6B:  RRF    64,F
0B6C:  INCF   77,F
0B6D:  BTFSC  03.2
0B6E:  GOTO   3C2
0B6F:  BTFSS  64.7
0B70:  GOTO   380
0B71:  INCF   65,F
0B72:  BTFSS  03.2
0B73:  GOTO   380
0B74:  INCF   66,F
0B75:  BTFSS  03.2
0B76:  GOTO   380
0B77:  INCF   67,F
0B78:  BTFSS  03.2
0B79:  GOTO   380
0B7A:  RRF    67,F
0B7B:  RRF    66,F
0B7C:  RRF    65,F
0B7D:  INCF   77,F
0B7E:  BTFSC  03.2
0B7F:  GOTO   3C2
0B80:  BTFSC  63.6
0B81:  GOTO   304
0B82:  BTFSC  63.7
0B83:  GOTO   346
0B84:  GOTO   3A4
0B85:  MOVLW  80
0B86:  XORWF  67,F
0B87:  BTFSS  67.7
0B88:  GOTO   38D
0B89:  GOTO   3C7
0B8A:  MOVF   5E,W
0B8B:  MOVWF  62
0B8C:  GOTO   39A
0B8D:  MOVF   5A,W
0B8E:  MOVWF  62
0B8F:  MOVF   67,F
0B90:  BTFSS  03.2
0B91:  GOTO   39A
0B92:  MOVF   66,F
0B93:  BTFSS  03.2
0B94:  GOTO   39A
0B95:  MOVF   65,F
0B96:  BTFSS  03.2
0B97:  GOTO   39A
0B98:  CLRF   77
0B99:  GOTO   3BB
0B9A:  BTFSC  67.7
0B9B:  GOTO   3A4
0B9C:  BCF    03.0
0B9D:  RLF    64,F
0B9E:  RLF    65,F
0B9F:  RLF    66,F
0BA0:  RLF    67,F
0BA1:  DECFSZ 77,F
0BA2:  GOTO   39A
0BA3:  GOTO   3C2
0BA4:  BTFSS  62.7
0BA5:  GOTO   3A8
0BA6:  BSF    67.7
0BA7:  GOTO   3BB
0BA8:  BCF    67.7
0BA9:  GOTO   3BB
0BAA:  MOVF   5D,W
0BAB:  MOVWF  77
0BAC:  MOVF   5E,W
0BAD:  MOVWF  67
0BAE:  MOVF   5F,W
0BAF:  MOVWF  66
0BB0:  MOVF   60,W
0BB1:  MOVWF  65
0BB2:  GOTO   3BB
0BB3:  MOVF   59,W
0BB4:  MOVWF  77
0BB5:  MOVF   5A,W
0BB6:  MOVWF  67
0BB7:  MOVF   5B,W
0BB8:  MOVWF  66
0BB9:  MOVF   5C,W
0BBA:  MOVWF  65
0BBB:  MOVF   67,W
0BBC:  MOVWF  78
0BBD:  MOVF   66,W
0BBE:  MOVWF  79
0BBF:  MOVF   65,W
0BC0:  MOVWF  7A
0BC1:  GOTO   3FA
0BC2:  CLRF   77
0BC3:  CLRF   78
0BC4:  CLRF   79
0BC5:  CLRF   7A
0BC6:  GOTO   3FA
0BC7:  CLRF   64
0BC8:  COMF   65,F
0BC9:  COMF   66,F
0BCA:  COMF   67,F
0BCB:  COMF   64,F
0BCC:  INCF   64,F
0BCD:  BTFSS  03.2
0BCE:  GOTO   3D5
0BCF:  INCF   65,F
0BD0:  BTFSS  03.2
0BD1:  GOTO   3D5
0BD2:  INCF   66,F
0BD3:  BTFSC  03.2
0BD4:  INCF   67,F
0BD5:  BTFSC  63.0
0BD6:  GOTO   2E3
0BD7:  BTFSC  63.1
0BD8:  GOTO   325
0BD9:  BTFSC  63.2
0BDA:  GOTO   35B
0BDB:  GOTO   38A
0BDC:  MOVF   00,W
0BDD:  ADDWF  65,F
0BDE:  BTFSS  03.0
0BDF:  GOTO   3E6
0BE0:  INCF   66,F
0BE1:  BTFSS  03.2
0BE2:  GOTO   3E6
0BE3:  INCF   67,F
0BE4:  BTFSC  03.2
0BE5:  BSF    61.0
0BE6:  DECF   04,F
0BE7:  MOVF   00,W
0BE8:  ADDWF  66,F
0BE9:  BTFSS  03.0
0BEA:  GOTO   3EE
0BEB:  INCF   67,F
0BEC:  BTFSC  03.2
0BED:  BSF    61.0
0BEE:  DECF   04,F
0BEF:  MOVF   00,W
0BF0:  BTFSS  00.7
0BF1:  XORLW  80
0BF2:  ADDWF  67,F
0BF3:  BTFSC  03.0
0BF4:  BSF    61.0
0BF5:  BTFSC  63.4
0BF6:  GOTO   2EA
0BF7:  BTFSC  63.5
0BF8:  GOTO   32C
0BF9:  GOTO   362
0BFA:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=8000000) 
*
06AF:  MOVLW  51
06B0:  MOVWF  04
06B1:  BCF    03.7
06B2:  MOVF   00,W
06B3:  BTFSC  03.2
06B4:  GOTO   6C2
06B5:  MOVLW  02
06B6:  MOVWF  78
06B7:  CLRF   77
06B8:  DECFSZ 77,F
06B9:  GOTO   6B8
06BA:  DECFSZ 78,F
06BB:  GOTO   6B7
06BC:  MOVLW  97
06BD:  MOVWF  77
06BE:  DECFSZ 77,F
06BF:  GOTO   6BE
06C0:  DECFSZ 00,F
06C1:  GOTO   6B5
06C2:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7, bits=8, parity=N) 
....................  
.................... #fuses XT, NOWDT,NOPROTECT,NOLVP 
.................... #include <HDM64GS12.c> //Manejo del display gráfico 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B0   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B1   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B2   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B4   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B5   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C0   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    unsigned int8 left[512]; 
....................    unsigned int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
049B:  BCF    28.0
049C:  MOVF   28,W
049D:  BSF    03.5
049E:  MOVWF  07
049F:  BCF    03.5
04A0:  BSF    07.0
....................    output_low(GLCD_E); 
04A1:  BSF    03.5
04A2:  BCF    06.5
04A3:  BCF    03.5
04A4:  BCF    06.5
....................    output_low(GLCD_CS1); 
04A5:  BSF    03.5
04A6:  BCF    06.0
04A7:  BCF    03.5
04A8:  BCF    06.0
....................    output_low(GLCD_CS2); 
04A9:  BSF    03.5
04AA:  BCF    06.1
04AB:  BCF    03.5
04AC:  BCF    06.1
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
04AD:  BSF    03.5
04AE:  BCF    06.2
04AF:  BCF    03.5
04B0:  BCF    06.2
04B1:  CLRF   27
04B2:  BTFSC  0B.7
04B3:  BSF    27.7
04B4:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
04B5:  BSF    03.5
04B6:  CLRF   45
04B7:  MOVLW  C0
04B8:  MOVWF  46
04B9:  BCF    03.5
04BA:  CALL   25F
04BB:  BTFSC  27.7
04BC:  BSF    0B.7
04BD:  CLRF   27
04BE:  BTFSC  0B.7
04BF:  BSF    27.7
04C0:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
04C1:  MOVLW  01
04C2:  BSF    03.5
04C3:  MOVWF  45
04C4:  MOVLW  C0
04C5:  MOVWF  46
04C6:  BCF    03.5
04C7:  CALL   25F
04C8:  BTFSC  27.7
04C9:  BSF    0B.7
04CA:  CLRF   27
04CB:  BTFSC  0B.7
04CC:  BSF    27.7
04CD:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
04CE:  BSF    03.5
04CF:  CLRF   45
04D0:  MOVLW  40
04D1:  MOVWF  46
04D2:  BCF    03.5
04D3:  CALL   25F
04D4:  BTFSC  27.7
04D5:  BSF    0B.7
04D6:  CLRF   27
04D7:  BTFSC  0B.7
04D8:  BSF    27.7
04D9:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
04DA:  MOVLW  01
04DB:  BSF    03.5
04DC:  MOVWF  45
04DD:  MOVLW  40
04DE:  MOVWF  46
04DF:  BCF    03.5
04E0:  CALL   25F
04E1:  BTFSC  27.7
04E2:  BSF    0B.7
04E3:  CLRF   27
04E4:  BTFSC  0B.7
04E5:  BSF    27.7
04E6:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
04E7:  BSF    03.5
04E8:  CLRF   45
04E9:  MOVLW  B8
04EA:  MOVWF  46
04EB:  BCF    03.5
04EC:  CALL   25F
04ED:  BTFSC  27.7
04EE:  BSF    0B.7
04EF:  CLRF   27
04F0:  BTFSC  0B.7
04F1:  BSF    27.7
04F2:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
04F3:  MOVLW  01
04F4:  BSF    03.5
04F5:  MOVWF  45
04F6:  MOVLW  B8
04F7:  MOVWF  46
04F8:  BCF    03.5
04F9:  CALL   25F
04FA:  BTFSC  27.7
04FB:  BSF    0B.7
....................  
....................    if(mode == ON) 
04FC:  DECFSZ 4F,W
04FD:  GOTO   518
04FE:  CLRF   27
04FF:  BTFSC  0B.7
0500:  BSF    27.7
0501:  BCF    0B.7
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
0502:  BSF    03.5
0503:  CLRF   45
0504:  MOVLW  3F
0505:  MOVWF  46
0506:  BCF    03.5
0507:  CALL   25F
0508:  BTFSC  27.7
0509:  BSF    0B.7
050A:  CLRF   27
050B:  BTFSC  0B.7
050C:  BSF    27.7
050D:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
050E:  MOVLW  01
050F:  BSF    03.5
0510:  MOVWF  45
0511:  MOVLW  3F
0512:  MOVWF  46
0513:  BCF    03.5
0514:  CALL   25F
0515:  BTFSC  27.7
0516:  BSF    0B.7
....................    } 
0517:  GOTO   531
0518:  CLRF   27
0519:  BTFSC  0B.7
051A:  BSF    27.7
051B:  BCF    0B.7
....................    else 
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
051C:  BSF    03.5
051D:  CLRF   45
051E:  MOVLW  3E
051F:  MOVWF  46
0520:  BCF    03.5
0521:  CALL   25F
0522:  BTFSC  27.7
0523:  BSF    0B.7
0524:  CLRF   27
0525:  BTFSC  0B.7
0526:  BSF    27.7
0527:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
0528:  MOVLW  01
0529:  BSF    03.5
052A:  MOVWF  45
052B:  MOVLW  3E
052C:  MOVWF  46
052D:  BCF    03.5
052E:  CALL   25F
052F:  BTFSC  27.7
0530:  BSF    0B.7
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
0531:  CLRF   50
....................  
....................    #ifdef FAST_GLCD 
*
05C3:  BSF    0A.3
05C4:  BCF    0A.4
05C5:  GOTO   4DB (RETURN)
....................    glcd_update(); 
....................    #endif 
.................... } 
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    unsigned int8 i, j; 
....................    unsigned int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
*
02B9:  BSF    03.5
02BA:  BCF    42.0
.................... { 
....................    unsigned int8* p; 
....................    unsigned int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
02BB:  MOVF   3E,W
02BC:  SUBLW  3F
02BD:  BTFSC  03.0
02BE:  GOTO   2C2
....................    { 
....................       x -= 64; 
02BF:  MOVLW  40
02C0:  SUBWF  3E,F
....................       side = GLCD_RIGHT; 
02C1:  BSF    42.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
02C2:  BCF    06.2
02C3:  BCF    03.5
02C4:  BCF    06.2
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
02C5:  BSF    03.5
02C6:  BCF    3E.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
02C7:  BSF    3E.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
02C8:  MOVLW  00
02C9:  BTFSC  42.0
02CA:  MOVLW  01
02CB:  MOVWF  43
02CC:  MOVWF  45
02CD:  MOVF   3E,W
02CE:  MOVWF  46
02CF:  BCF    03.5
02D0:  CALL   25F
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
02D1:  MOVLW  00
02D2:  BSF    03.5
02D3:  BTFSC  42.0
02D4:  MOVLW  01
02D5:  MOVWF  43
02D6:  RRF    3F,W
02D7:  MOVWF  77
02D8:  RRF    77,F
02D9:  RRF    77,F
02DA:  MOVLW  1F
02DB:  ANDWF  77,F
02DC:  MOVF   77,W
02DD:  ANDLW  BF
02DE:  IORLW  B8
02DF:  MOVWF  44
02E0:  MOVF   43,W
02E1:  MOVWF  45
02E2:  MOVF   44,W
02E3:  MOVWF  46
02E4:  BCF    03.5
02E5:  CALL   25F
....................    output_high(GLCD_DI);                        // Set for data 
02E6:  BSF    03.5
02E7:  BCF    06.2
02E8:  BCF    03.5
02E9:  BSF    06.2
....................    glcd_readByte(side);                         // Need two reads to get data 
02EA:  MOVLW  00
02EB:  BSF    03.5
02EC:  BTFSC  42.0
02ED:  MOVLW  01
02EE:  MOVWF  43
02EF:  MOVWF  44
02F0:  BCF    03.5
02F1:  CALL   28A
....................    data = glcd_readByte(side);                  //  at new address 
02F2:  MOVLW  00
02F3:  BSF    03.5
02F4:  BTFSC  42.0
02F5:  MOVLW  01
02F6:  MOVWF  43
02F7:  MOVWF  44
02F8:  BCF    03.5
02F9:  CALL   28A
02FA:  MOVF   78,W
02FB:  BSF    03.5
02FC:  MOVWF  41
....................  
....................    if(color == ON) 
02FD:  DECFSZ 40,W
02FE:  GOTO   30F
....................       bit_set(data, y%8);        // Turn the pixel on 
02FF:  MOVF   3F,W
0300:  ANDLW  07
0301:  MOVWF  43
0302:  MOVLW  01
0303:  MOVWF  77
0304:  MOVF   43,W
0305:  MOVWF  78
0306:  BTFSC  03.2
0307:  GOTO   30C
0308:  BCF    03.0
0309:  RLF    77,F
030A:  DECFSZ 78,F
030B:  GOTO   308
030C:  MOVF   77,W
030D:  IORWF  41,F
030E:  GOTO   31F
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
030F:  MOVF   3F,W
0310:  ANDLW  07
0311:  MOVWF  43
0312:  MOVLW  01
0313:  MOVWF  77
0314:  MOVF   43,W
0315:  MOVWF  78
0316:  BTFSC  03.2
0317:  GOTO   31C
0318:  BCF    03.0
0319:  RLF    77,F
031A:  DECFSZ 78,F
031B:  GOTO   318
031C:  MOVF   77,W
031D:  XORLW  FF
031E:  ANDWF  41,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
031F:  BCF    06.2
0320:  BCF    03.5
0321:  BCF    06.2
....................    glcd_writeByte(side, x);      // Set the horizontal address 
0322:  MOVLW  00
0323:  BSF    03.5
0324:  BTFSC  42.0
0325:  MOVLW  01
0326:  MOVWF  43
0327:  MOVWF  45
0328:  MOVF   3E,W
0329:  MOVWF  46
032A:  BCF    03.5
032B:  CALL   25F
....................    output_high(GLCD_DI);         // Set for data 
032C:  BSF    03.5
032D:  BCF    06.2
032E:  BCF    03.5
032F:  BSF    06.2
....................    glcd_writeByte(side, data);   // Write the pixel data 
0330:  MOVLW  00
0331:  BSF    03.5
0332:  BTFSC  42.0
0333:  MOVLW  01
0334:  MOVWF  43
0335:  MOVWF  45
0336:  MOVF   41,W
0337:  MOVWF  46
0338:  BCF    03.5
0339:  CALL   25F
033A:  RETURN
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    unsigned int8  data; 
....................    unsigned int8  *p1, *p2; 
....................    unsigned int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................    	*p1++ = data; 
....................    	*p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    unsigned int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
0532:  CLRF   51
0533:  MOVF   51,W
0534:  SUBLW  07
0535:  BTFSS  03.0
0536:  GOTO   5C3
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
0537:  BSF    03.5
0538:  BCF    06.2
0539:  BCF    03.5
053A:  BCF    06.2
053B:  CLRF   27
053C:  BTFSC  0B.7
053D:  BSF    27.7
053E:  BCF    0B.7
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
053F:  BSF    03.5
0540:  CLRF   45
0541:  MOVLW  40
0542:  MOVWF  46
0543:  BCF    03.5
0544:  CALL   25F
0545:  BTFSC  27.7
0546:  BSF    0B.7
0547:  CLRF   27
0548:  BTFSC  0B.7
0549:  BSF    27.7
054A:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
054B:  MOVLW  01
054C:  BSF    03.5
054D:  MOVWF  45
054E:  MOVLW  40
054F:  MOVWF  46
0550:  BCF    03.5
0551:  CALL   25F
0552:  BTFSC  27.7
0553:  BSF    0B.7
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
0554:  MOVF   51,W
0555:  IORLW  B8
0556:  MOVWF  53
0557:  CLRF   27
0558:  BTFSC  0B.7
0559:  BSF    27.7
055A:  BCF    0B.7
055B:  BSF    03.5
055C:  CLRF   45
055D:  BCF    03.5
055E:  MOVF   53,W
055F:  BSF    03.5
0560:  MOVWF  46
0561:  BCF    03.5
0562:  CALL   25F
0563:  BTFSC  27.7
0564:  BSF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
0565:  MOVF   51,W
0566:  IORLW  B8
0567:  MOVWF  53
0568:  CLRF   27
0569:  BTFSC  0B.7
056A:  BSF    27.7
056B:  BCF    0B.7
056C:  MOVLW  01
056D:  BSF    03.5
056E:  MOVWF  45
056F:  BCF    03.5
0570:  MOVF   53,W
0571:  BSF    03.5
0572:  MOVWF  46
0573:  BCF    03.5
0574:  CALL   25F
0575:  BTFSC  27.7
0576:  BSF    0B.7
....................       output_high(GLCD_DI);                     // Set for data 
0577:  BSF    03.5
0578:  BCF    06.2
0579:  BCF    03.5
057A:  BSF    06.2
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
057B:  CLRF   52
057C:  MOVF   52,W
057D:  SUBLW  3F
057E:  BTFSS  03.0
057F:  GOTO   5C1
0580:  CLRF   27
0581:  BTFSC  0B.7
0582:  BSF    27.7
0583:  BCF    0B.7
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
0584:  MOVLW  FF
0585:  BSF    03.5
0586:  MOVWF  3E
0587:  BCF    03.5
0588:  MOVF   50,W
0589:  BSF    03.5
058A:  MOVWF  3F
058B:  BCF    03.5
058C:  CALL   238
058D:  BTFSC  27.7
058E:  BSF    0B.7
058F:  MOVF   78,W
0590:  MOVWF  53
0591:  CLRF   27
0592:  BTFSC  0B.7
0593:  BSF    27.7
0594:  BCF    0B.7
0595:  BSF    03.5
0596:  CLRF   45
0597:  BCF    03.5
0598:  MOVF   78,W
0599:  BSF    03.5
059A:  MOVWF  46
059B:  BCF    03.5
059C:  CALL   25F
059D:  BTFSC  27.7
059E:  BSF    0B.7
059F:  CLRF   27
05A0:  BTFSC  0B.7
05A1:  BSF    27.7
05A2:  BCF    0B.7
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
05A3:  MOVLW  FF
05A4:  BSF    03.5
05A5:  MOVWF  3E
05A6:  BCF    03.5
05A7:  MOVF   50,W
05A8:  BSF    03.5
05A9:  MOVWF  3F
05AA:  BCF    03.5
05AB:  CALL   238
05AC:  BTFSC  27.7
05AD:  BSF    0B.7
05AE:  MOVF   78,W
05AF:  MOVWF  53
05B0:  CLRF   27
05B1:  BTFSC  0B.7
05B2:  BSF    27.7
05B3:  BCF    0B.7
05B4:  MOVLW  01
05B5:  BSF    03.5
05B6:  MOVWF  45
05B7:  BCF    03.5
05B8:  MOVF   78,W
05B9:  BSF    03.5
05BA:  MOVWF  46
05BB:  BCF    03.5
05BC:  CALL   25F
05BD:  BTFSC  27.7
05BE:  BSF    0B.7
05BF:  INCF   52,F
05C0:  GOTO   57C
....................       } 
05C1:  INCF   51,F
05C2:  GOTO   533
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    set_tris_d(0x00); 
*
025F:  MOVLW  00
0260:  BSF    03.5
0261:  MOVWF  08
....................     
....................    output_low(GLCD_RW);       // Set for writing 
0262:  BCF    06.4
0263:  BCF    03.5
0264:  BCF    06.4
....................  
.................... 	 if(side)                   // Choose which side to write to 
0265:  BSF    03.5
0266:  MOVF   45,F
0267:  BTFSC  03.2
0268:  GOTO   26E
....................       output_high(GLCD_CS2); 
0269:  BCF    06.1
026A:  BCF    03.5
026B:  BSF    06.1
026C:  GOTO   271
026D:  BSF    03.5
....................    else 
....................       output_high(GLCD_CS1); 
026E:  BCF    06.0
026F:  BCF    03.5
0270:  BSF    06.0
....................  
.................... 	 delay_us(1); 
0271:  GOTO   272
....................  
....................    output_d(data);            // Put the data on the port 
0272:  BSF    03.5
0273:  CLRF   08
0274:  MOVF   46,W
0275:  BCF    03.5
0276:  MOVWF  08
....................    delay_us(1); 
0277:  GOTO   278
....................    output_high(GLCD_E);       // Pulse the enable pin 
0278:  BSF    03.5
0279:  BCF    06.5
027A:  BCF    03.5
027B:  BSF    06.5
....................    delay_us(1); 
027C:  GOTO   27D
....................    output_low(GLCD_E); 
027D:  BSF    03.5
027E:  BCF    06.5
027F:  BCF    03.5
0280:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
0281:  BSF    03.5
0282:  BCF    06.0
0283:  BCF    03.5
0284:  BCF    06.0
....................    output_low(GLCD_CS2); 
0285:  BSF    03.5
0286:  BCF    06.1
0287:  BCF    03.5
0288:  BCF    06.1
0289:  RETURN
.................... } 
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
028A:  MOVLW  FF
028B:  BSF    03.5
028C:  MOVWF  08
....................    output_high(GLCD_RW);      // Set for reading 
028D:  BCF    06.4
028E:  BCF    03.5
028F:  BSF    06.4
....................  
....................    if(side)                   // Choose which side to write to 
0290:  BSF    03.5
0291:  MOVF   44,F
0292:  BTFSC  03.2
0293:  GOTO   299
....................       output_high(GLCD_CS2); 
0294:  BCF    06.1
0295:  BCF    03.5
0296:  BSF    06.1
0297:  GOTO   29C
0298:  BSF    03.5
....................    else 
....................       output_high(GLCD_CS1); 
0299:  BCF    06.0
029A:  BCF    03.5
029B:  BSF    06.0
....................  
....................    delay_us(1); 
029C:  GOTO   29D
....................    output_high(GLCD_E);       // Pulse the enable pin 
029D:  BSF    03.5
029E:  BCF    06.5
029F:  BCF    03.5
02A0:  BSF    06.5
....................    delay_us(1); 
02A1:  GOTO   2A2
....................    data = input_d();          // Get the data from the display's output register 
02A2:  MOVLW  FF
02A3:  BSF    03.5
02A4:  MOVWF  08
02A5:  BCF    03.5
02A6:  MOVF   08,W
02A7:  BSF    03.5
02A8:  MOVWF  45
....................    output_low(GLCD_E); 
02A9:  BCF    06.5
02AA:  BCF    03.5
02AB:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
02AC:  BSF    03.5
02AD:  BCF    06.0
02AE:  BCF    03.5
02AF:  BCF    06.0
....................    output_low(GLCD_CS2); 
02B0:  BSF    03.5
02B1:  BCF    06.1
02B2:  BCF    03.5
02B3:  BCF    06.1
....................    return data;               // Return the read data 
02B4:  BSF    03.5
02B5:  MOVF   45,W
02B6:  MOVWF  78
02B7:  BCF    03.5
02B8:  RETURN
.................... } 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> //Funciones para dibujar y escribir en el display 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
05C6:  MOVLW  01
05C7:  MOVWF  5F
05C8:  MOVWF  60
05C9:  CLRF   65
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
05CA:  MOVF   56,W
05CB:  SUBWF  58,W
05CC:  MOVWF  66
05CD:  MOVF   66,W
05CE:  BTFSS  66.7
05CF:  GOTO   5D2
05D0:  MOVF   66,W
05D1:  SUBLW  00
05D2:  CLRF   7A
05D3:  MOVWF  5D
05D4:  MOVF   7A,W
05D5:  MOVWF  5E
....................    dy = abs((signed int8)(y2 - y1)); 
05D6:  MOVF   57,W
05D7:  SUBWF  59,W
05D8:  MOVWF  66
05D9:  MOVF   66,W
05DA:  BTFSS  66.7
05DB:  GOTO   5DE
05DC:  MOVF   66,W
05DD:  SUBLW  00
05DE:  CLRF   7A
05DF:  MOVWF  5B
05E0:  MOVF   7A,W
05E1:  MOVWF  5C
....................    #endif 
....................  
....................    if(x1 > x2) 
05E2:  MOVF   56,W
05E3:  SUBWF  58,W
05E4:  BTFSC  03.0
05E5:  GOTO   5E8
....................       addx = -1; 
05E6:  MOVLW  FF
05E7:  MOVWF  5F
....................    if(y1 > y2) 
05E8:  MOVF   57,W
05E9:  SUBWF  59,W
05EA:  BTFSC  03.0
05EB:  GOTO   5EE
....................       addy = -1; 
05EC:  MOVLW  FF
05ED:  MOVWF  60
....................  
....................    if(dx >= dy) 
05EE:  MOVF   5C,W
05EF:  SUBWF  5E,W
05F0:  BTFSS  03.0
05F1:  GOTO   646
05F2:  BTFSS  03.2
05F3:  GOTO   5F8
05F4:  MOVF   5B,W
05F5:  SUBWF  5D,W
05F6:  BTFSS  03.0
05F7:  GOTO   646
....................    { 
....................       dy *= 2; 
05F8:  BCF    03.0
05F9:  RLF    5B,F
05FA:  RLF    5C,F
....................       P = dy - dx; 
05FB:  MOVF   5D,W
05FC:  SUBWF  5B,W
05FD:  MOVWF  77
05FE:  MOVF   5C,W
05FF:  MOVWF  7A
0600:  MOVF   5E,W
0601:  BTFSS  03.0
0602:  INCFSZ 5E,W
0603:  SUBWF  7A,F
0604:  MOVF   77,W
0605:  MOVWF  61
0606:  MOVF   7A,W
0607:  MOVWF  62
....................       diff = P - dx; 
0608:  MOVF   5D,W
0609:  SUBWF  61,W
060A:  MOVWF  63
060B:  MOVF   62,W
060C:  MOVWF  64
060D:  MOVF   5E,W
060E:  BTFSS  03.0
060F:  INCFSZ 5E,W
0610:  SUBWF  64,F
....................  
....................       for(; i<=dx; ++i) 
0611:  MOVF   5E,F
0612:  BTFSS  03.2
0613:  GOTO   618
0614:  MOVF   65,W
0615:  SUBWF  5D,W
0616:  BTFSS  03.0
0617:  GOTO   645
0618:  CLRF   27
0619:  BTFSC  0B.7
061A:  BSF    27.7
061B:  BCF    0B.7
....................       { 
....................          glcd_pixel(x1, y1, color); 
061C:  MOVF   56,W
061D:  BSF    03.5
061E:  MOVWF  3E
061F:  BCF    03.5
0620:  MOVF   57,W
0621:  BSF    03.5
0622:  MOVWF  3F
0623:  BCF    03.5
0624:  MOVF   5A,W
0625:  BSF    03.5
0626:  MOVWF  40
0627:  BCF    03.5
0628:  CALL   2B9
0629:  BTFSC  27.7
062A:  BSF    0B.7
....................  
....................          if(P < 0) 
062B:  BTFSS  62.7
062C:  GOTO   637
....................          { 
....................             P  += dy; 
062D:  MOVF   5B,W
062E:  ADDWF  61,F
062F:  MOVF   5C,W
0630:  BTFSC  03.0
0631:  INCFSZ 5C,W
0632:  ADDWF  62,F
....................             x1 += addx; 
0633:  MOVF   5F,W
0634:  ADDWF  56,W
0635:  MOVWF  56
....................          } 
0636:  GOTO   643
....................          else 
....................          { 
....................             P  += diff; 
0637:  MOVF   63,W
0638:  ADDWF  61,F
0639:  MOVF   64,W
063A:  BTFSC  03.0
063B:  INCFSZ 64,W
063C:  ADDWF  62,F
....................             x1 += addx; 
063D:  MOVF   5F,W
063E:  ADDWF  56,W
063F:  MOVWF  56
....................             y1 += addy; 
0640:  MOVF   60,W
0641:  ADDWF  57,W
0642:  MOVWF  57
....................          } 
0643:  INCF   65,F
0644:  GOTO   611
....................       } 
....................    } 
0645:  GOTO   693
....................    else 
....................    { 
....................       dx *= 2; 
0646:  BCF    03.0
0647:  RLF    5D,F
0648:  RLF    5E,F
....................       P = dx - dy; 
0649:  MOVF   5B,W
064A:  SUBWF  5D,W
064B:  MOVWF  77
064C:  MOVF   5E,W
064D:  MOVWF  7A
064E:  MOVF   5C,W
064F:  BTFSS  03.0
0650:  INCFSZ 5C,W
0651:  SUBWF  7A,F
0652:  MOVF   77,W
0653:  MOVWF  61
0654:  MOVF   7A,W
0655:  MOVWF  62
....................       diff = P - dy; 
0656:  MOVF   5B,W
0657:  SUBWF  61,W
0658:  MOVWF  63
0659:  MOVF   62,W
065A:  MOVWF  64
065B:  MOVF   5C,W
065C:  BTFSS  03.0
065D:  INCFSZ 5C,W
065E:  SUBWF  64,F
....................  
....................       for(; i<=dy; ++i) 
065F:  MOVF   5C,F
0660:  BTFSS  03.2
0661:  GOTO   666
0662:  MOVF   65,W
0663:  SUBWF  5B,W
0664:  BTFSS  03.0
0665:  GOTO   693
0666:  CLRF   27
0667:  BTFSC  0B.7
0668:  BSF    27.7
0669:  BCF    0B.7
....................       { 
....................          glcd_pixel(x1, y1, color); 
066A:  MOVF   56,W
066B:  BSF    03.5
066C:  MOVWF  3E
066D:  BCF    03.5
066E:  MOVF   57,W
066F:  BSF    03.5
0670:  MOVWF  3F
0671:  BCF    03.5
0672:  MOVF   5A,W
0673:  BSF    03.5
0674:  MOVWF  40
0675:  BCF    03.5
0676:  CALL   2B9
0677:  BTFSC  27.7
0678:  BSF    0B.7
....................  
....................          if(P < 0) 
0679:  BTFSS  62.7
067A:  GOTO   685
....................          { 
....................             P  += dx; 
067B:  MOVF   5D,W
067C:  ADDWF  61,F
067D:  MOVF   5E,W
067E:  BTFSC  03.0
067F:  INCFSZ 5E,W
0680:  ADDWF  62,F
....................             y1 += addy; 
0681:  MOVF   60,W
0682:  ADDWF  57,W
0683:  MOVWF  57
....................          } 
0684:  GOTO   691
....................          else 
....................          { 
....................             P  += diff; 
0685:  MOVF   63,W
0686:  ADDWF  61,F
0687:  MOVF   64,W
0688:  BTFSC  03.0
0689:  INCFSZ 64,W
068A:  ADDWF  62,F
....................             x1 += addx; 
068B:  MOVF   5F,W
068C:  ADDWF  56,W
068D:  MOVWF  56
....................             y1 += addy; 
068E:  MOVF   60,W
068F:  ADDWF  57,W
0690:  MOVWF  57
....................          } 
0691:  INCF   65,F
0692:  GOTO   65F
....................       } 
....................    } 
0693:  RETURN
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
033B:  BSF    03.5
033C:  MOVF   30,W
033D:  MOVWF  7A
033E:  MOVF   2F,W
033F:  MOVWF  04
0340:  BCF    03.7
0341:  BTFSC  7A.0
0342:  BSF    03.7
0343:  MOVF   00,F
0344:  BTFSC  03.2
0345:  GOTO   431
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0346:  MOVF   30,W
0347:  MOVWF  7A
0348:  MOVF   2F,W
0349:  MOVWF  04
034A:  BCF    03.7
034B:  BTFSC  7A.0
034C:  BSF    03.7
034D:  MOVF   00,W
034E:  SUBLW  52
034F:  BTFSS  03.0
0350:  GOTO   376
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
0351:  MOVF   30,W
0352:  MOVWF  7A
0353:  MOVF   2F,W
0354:  MOVWF  04
0355:  BCF    03.7
0356:  BTFSC  7A.0
0357:  BSF    03.7
0358:  MOVLW  20
0359:  SUBWF  00,W
035A:  MOVWF  3D
035B:  MOVWF  3E
035C:  MOVLW  05
035D:  MOVWF  3F
035E:  BCF    03.5
035F:  CALL   238
0360:  MOVF   78,W
0361:  BSF    03.5
0362:  MOVWF  3C
0363:  MOVWF  78
0364:  MOVLW  05
0365:  MOVWF  77
0366:  MOVLW  B7
0367:  MOVWF  04
0368:  BCF    03.7
0369:  MOVF   78,W
036A:  BCF    03.5
036B:  CALL   02F
036C:  MOVWF  00
036D:  INCF   78,F
036E:  INCF   04,F
036F:  DECFSZ 77,F
0370:  GOTO   372
0371:  GOTO   374
0372:  BSF    03.5
0373:  GOTO   369
0374:  GOTO   3AC
0375:  BSF    03.5
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
0376:  MOVF   30,W
0377:  MOVWF  7A
0378:  MOVF   2F,W
0379:  MOVWF  04
037A:  BCF    03.7
037B:  BTFSC  7A.0
037C:  BSF    03.7
037D:  MOVF   00,W
037E:  SUBLW  7E
037F:  BTFSS  03.0
0380:  GOTO   3A6
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
0381:  MOVF   30,W
0382:  MOVWF  7A
0383:  MOVF   2F,W
0384:  MOVWF  04
0385:  BCF    03.7
0386:  BTFSC  7A.0
0387:  BSF    03.7
0388:  MOVLW  53
0389:  SUBWF  00,W
038A:  MOVWF  3D
038B:  MOVWF  3E
038C:  MOVLW  05
038D:  MOVWF  3F
038E:  BCF    03.5
038F:  CALL   238
0390:  MOVF   78,W
0391:  BSF    03.5
0392:  MOVWF  3C
0393:  MOVWF  78
0394:  MOVLW  05
0395:  MOVWF  77
0396:  MOVLW  B7
0397:  MOVWF  04
0398:  BCF    03.7
0399:  MOVF   78,W
039A:  BCF    03.5
039B:  CALL   135
039C:  MOVWF  00
039D:  INCF   78,F
039E:  INCF   04,F
039F:  DECFSZ 77,F
03A0:  GOTO   3A2
03A1:  GOTO   3A4
03A2:  BSF    03.5
03A3:  GOTO   399
03A4:  GOTO   3AC
03A5:  BSF    03.5
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
03A6:  CLRF   37
03A7:  CLRF   38
03A8:  CLRF   39
03A9:  CLRF   3A
03AA:  CLRF   3B
03AB:  BCF    03.5
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
03AC:  BSF    03.5
03AD:  MOVF   30,W
03AE:  MOVWF  7A
03AF:  MOVF   2F,W
03B0:  MOVWF  04
03B1:  BCF    03.7
03B2:  BTFSC  7A.0
03B3:  BSF    03.7
03B4:  MOVF   00,W
03B5:  XORLW  0A
03B6:  BCF    03.5
03B7:  BTFSC  03.2
03B8:  GOTO   3BD
03B9:  XORLW  07
03BA:  BTFSC  03.2
03BB:  GOTO   3CA
03BC:  GOTO   3CE
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
03BD:  MOVLW  07
03BE:  BSF    03.5
03BF:  MOVWF  3E
03C0:  MOVF   31,W
03C1:  MOVWF  3F
03C2:  BCF    03.5
03C3:  CALL   238
03C4:  MOVLW  01
03C5:  ADDWF  78,W
03C6:  BSF    03.5
03C7:  ADDWF  2E,F
....................             continue; 
03C8:  GOTO   42C
03C9:  BCF    03.5
....................          case '\r': 
....................             x = 0; 
03CA:  BSF    03.5
03CB:  CLRF   2D
....................             continue; 
03CC:  GOTO   42C
03CD:  BCF    03.5
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
03CE:  MOVLW  05
03CF:  BSF    03.5
03D0:  MOVWF  3E
03D1:  MOVF   31,W
03D2:  MOVWF  3F
03D3:  BCF    03.5
03D4:  CALL   238
03D5:  MOVF   78,W
03D6:  BSF    03.5
03D7:  ADDWF  2D,W
03D8:  SUBLW  7F
03D9:  BTFSC  03.0
03DA:  GOTO   3E6
....................       { 
....................          x = 0;                           // Set x at far left position 
03DB:  CLRF   2D
....................          y += 7*size + 1;                 // Set y at next position down 
03DC:  MOVLW  07
03DD:  MOVWF  3E
03DE:  MOVF   31,W
03DF:  MOVWF  3F
03E0:  BCF    03.5
03E1:  CALL   238
03E2:  MOVLW  01
03E3:  ADDWF  78,W
03E4:  BSF    03.5
03E5:  ADDWF  2E,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
03E6:  CLRF   33
03E7:  MOVF   33,W
03E8:  SUBLW  04
03E9:  BTFSS  03.0
03EA:  GOTO   42C
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
03EB:  CLRF   34
03EC:  MOVF   34,W
03ED:  SUBLW  06
03EE:  BTFSS  03.0
03EF:  GOTO   428
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
03F0:  MOVLW  B7
03F1:  ADDWF  33,W
03F2:  MOVWF  04
03F3:  BCF    03.7
03F4:  MOVF   00,W
03F5:  MOVWF  3C
03F6:  MOVWF  77
03F7:  MOVF   34,W
03F8:  MOVWF  78
03F9:  BTFSC  03.2
03FA:  GOTO   3FF
03FB:  BCF    03.0
03FC:  RRF    77,F
03FD:  DECFSZ 78,F
03FE:  GOTO   3FB
03FF:  BTFSS  77.0
0400:  GOTO   426
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
0401:  CLRF   35
0402:  MOVF   31,W
0403:  SUBWF  35,W
0404:  BTFSC  03.0
0405:  GOTO   426
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
0406:  CLRF   36
0407:  MOVF   31,W
0408:  SUBWF  36,W
0409:  BTFSC  03.0
040A:  GOTO   424
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
040B:  MOVF   36,W
040C:  ADDWF  2D,W
040D:  MOVWF  3C
040E:  MOVF   34,W
040F:  MOVWF  3E
0410:  MOVF   31,W
0411:  MOVWF  3F
0412:  BCF    03.5
0413:  CALL   238
0414:  MOVF   78,W
0415:  BSF    03.5
0416:  ADDWF  2E,W
0417:  ADDWF  35,W
0418:  MOVWF  3D
0419:  MOVF   3C,W
041A:  MOVWF  3E
041B:  MOVF   3D,W
041C:  MOVWF  3F
041D:  MOVF   32,W
041E:  MOVWF  40
041F:  BCF    03.5
0420:  CALL   2B9
0421:  BSF    03.5
0422:  INCF   36,F
0423:  GOTO   407
....................                   } 
0424:  INCF   35,F
0425:  GOTO   402
....................                } 
....................             } 
0426:  INCF   34,F
0427:  GOTO   3EC
....................          } 
0428:  INCF   33,F
0429:  MOVF   31,W
042A:  ADDWF  2D,F
042B:  GOTO   3E7
....................       } 
042C:  INCF   2F,F
042D:  BTFSC  03.2
042E:  INCF   30,F
042F:  INCF   2D,F
0430:  GOTO   33C
....................    } 
0431:  BCF    03.5
0432:  RETURN
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #byte trisb=0x86 
....................  
.................... ///Defines 
....................  
.................... #define escala -0.6 //Escala negativa para que crezca hacia arriba. 
.................... #define limpiarGrafico limpiarPorcion(0,20,128,44) //Limpia el area del grafico 
....................  
.................... ///Fin Defines 
....................  
.................... ///Variables Globales 
....................  
.................... int x=0; //Posicion inicial de x para graficar la temperatura 
.................... float y=0; //Posicion inicial de y (Vamos a tener que cambiarla a la primer temperatura leida) para graficar la temperatura 
.................... int offset=52; //es el offset para la altura de la grafica 
.................... int1 habilitarLectura=0; //Variable para habilitar o deshabilitar la captura de datos del sensor 
....................  
.................... ///Fin Variables Globales 
....................  
.................... ///Funciones 
....................  
.................... void mostrarBT(int1 estado){ //Mostramos BT si el bluetooth esta prendido 
....................    glcd_text57(110,0,(char*)"BT",1,estado); 
*
0694:  MOVLW  42
0695:  MOVWF  51
0696:  MOVLW  54
0697:  MOVWF  52
0698:  CLRF   53
0699:  CLRF   27
069A:  BTFSC  0B.7
069B:  BSF    27.7
069C:  BCF    0B.7
069D:  MOVLW  6E
069E:  BSF    03.5
069F:  MOVWF  2D
06A0:  CLRF   2E
06A1:  CLRF   30
06A2:  MOVLW  51
06A3:  MOVWF  2F
06A4:  MOVLW  01
06A5:  MOVWF  31
06A6:  BCF    03.5
06A7:  MOVF   50,W
06A8:  BSF    03.5
06A9:  MOVWF  32
06AA:  BCF    03.5
06AB:  CALL   33B
06AC:  BTFSC  27.7
06AD:  BSF    0B.7
06AE:  RETURN
.................... } 
....................  
.................... void limpiarPorcion(int x1, int y1, int x2, int y2){ //(x1, y1) = posición del primer pixel. (x2, y2) = cantididad de pixeles hacia la derecha y hacia abajo 
....................    for(int i=x1;i<x1+x2;i++){ 
*
0433:  BSF    03.5
0434:  MOVF   2B,W
0435:  MOVWF  2F
0436:  MOVF   2D,W
0437:  ADDWF  2B,W
0438:  SUBWF  2F,W
0439:  BTFSC  03.0
043A:  GOTO   44E
....................       for(int j=y1;j<y1+y2;j++){ 
043B:  MOVF   2C,W
043C:  MOVWF  30
043D:  MOVF   2E,W
043E:  ADDWF  2C,W
043F:  SUBWF  30,W
0440:  BTFSC  03.0
0441:  GOTO   44C
....................          glcd_pixel(i, j, OFF); //Apagamos el pixel. 
0442:  MOVF   2F,W
0443:  MOVWF  3E
0444:  MOVF   30,W
0445:  MOVWF  3F
0446:  CLRF   40
0447:  BCF    03.5
0448:  CALL   2B9
0449:  BSF    03.5
044A:  INCF   30,F
044B:  GOTO   43D
....................       } 
044C:  INCF   2F,F
044D:  GOTO   436
....................    } 
044E:  BCF    03.5
044F:  RETURN
.................... } 
....................  
.................... void nuevaLinea(float temp){ //Funcion para graficar las nuevas lineas de temperatura 
*
0BFB:  MOVLW  01
0BFC:  ADDWF  29,W
0BFD:  MOVWF  53
....................    int x1=x+1; 
....................    if(x1>128){ //Revisamos si sobrepasamos el tamaño de la pantalla 
0BFE:  MOVF   53,W
0BFF:  SUBLW  80
0C00:  BTFSC  03.0
0C01:  GOTO   417
0C02:  CLRF   27
0C03:  BTFSC  0B.7
0C04:  BSF    27.7
0C05:  BCF    0B.7
.................... 		limpiarGrafico; //Limpiamos el area del grafico 
0C06:  BSF    03.5
0C07:  CLRF   2B
0C08:  MOVLW  14
0C09:  MOVWF  2C
0C0A:  MOVLW  80
0C0B:  MOVWF  2D
0C0C:  MOVLW  2C
0C0D:  MOVWF  2E
0C0E:  BCF    0A.3
0C0F:  BCF    03.5
0C10:  CALL   433
0C11:  BSF    0A.3
0C12:  BTFSC  27.7
0C13:  BSF    0B.7
....................       x=0; 
0C14:  CLRF   29
....................       x1=1; 
0C15:  MOVLW  01
0C16:  MOVWF  53
....................    } 
....................    glcd_line(x, (y*escala)+offset, x1, (temp*escala)+offset, ON); //multiplicamos por la escala para que la grafica entre en el area del grafico. El offset esta explicado arriba 
0C17:  MOVF   2D,W
0C18:  MOVWF  5F
0C19:  MOVF   2C,W
0C1A:  MOVWF  5E
0C1B:  MOVF   2B,W
0C1C:  MOVWF  5D
0C1D:  MOVF   2A,W
0C1E:  MOVWF  5C
0C1F:  MOVLW  9A
0C20:  MOVWF  63
0C21:  MOVLW  99
0C22:  MOVWF  62
0C23:  MOVWF  61
0C24:  MOVLW  7E
0C25:  MOVWF  60
0C26:  BCF    0A.3
0C27:  CALL   6E0
0C28:  BSF    0A.3
0C29:  MOVF   7A,W
0C2A:  MOVWF  57
0C2B:  MOVF   79,W
0C2C:  MOVWF  56
0C2D:  MOVF   78,W
0C2E:  MOVWF  55
0C2F:  MOVF   77,W
0C30:  MOVWF  54
0C31:  CLRF   5A
0C32:  MOVF   2E,W
0C33:  MOVWF  59
0C34:  BCF    0A.3
0C35:  CALL   6C3
0C36:  BSF    0A.3
0C37:  BCF    03.1
0C38:  MOVF   57,W
0C39:  MOVWF  5C
0C3A:  MOVF   56,W
0C3B:  MOVWF  5B
0C3C:  MOVF   55,W
0C3D:  MOVWF  5A
0C3E:  MOVF   54,W
0C3F:  MOVWF  59
0C40:  MOVF   7A,W
0C41:  MOVWF  60
0C42:  MOVF   79,W
0C43:  MOVWF  5F
0C44:  MOVF   78,W
0C45:  MOVWF  5E
0C46:  MOVF   77,W
0C47:  MOVWF  5D
0C48:  CALL   2BA
0C49:  MOVF   7A,W
0C4A:  MOVWF  58
0C4B:  MOVF   79,W
0C4C:  MOVWF  57
0C4D:  MOVF   78,W
0C4E:  MOVWF  56
0C4F:  MOVF   77,W
0C50:  MOVWF  55
0C51:  BCF    0A.3
0C52:  CALL   7C0
0C53:  BSF    0A.3
0C54:  MOVF   78,W
0C55:  MOVWF  54
0C56:  MOVF   52,W
0C57:  MOVWF  5F
0C58:  MOVF   51,W
0C59:  MOVWF  5E
0C5A:  MOVF   50,W
0C5B:  MOVWF  5D
0C5C:  MOVF   4F,W
0C5D:  MOVWF  5C
0C5E:  MOVLW  9A
0C5F:  MOVWF  63
0C60:  MOVLW  99
0C61:  MOVWF  62
0C62:  MOVWF  61
0C63:  MOVLW  7E
0C64:  MOVWF  60
0C65:  BCF    0A.3
0C66:  CALL   6E0
0C67:  BSF    0A.3
0C68:  MOVF   7A,W
0C69:  MOVWF  58
0C6A:  MOVF   79,W
0C6B:  MOVWF  57
0C6C:  MOVF   78,W
0C6D:  MOVWF  56
0C6E:  MOVF   77,W
0C6F:  MOVWF  55
0C70:  CLRF   5A
0C71:  MOVF   2E,W
0C72:  MOVWF  59
0C73:  BCF    0A.3
0C74:  CALL   6C3
0C75:  BSF    0A.3
0C76:  BCF    03.1
0C77:  MOVF   58,W
0C78:  MOVWF  5C
0C79:  MOVF   57,W
0C7A:  MOVWF  5B
0C7B:  MOVF   56,W
0C7C:  MOVWF  5A
0C7D:  MOVF   55,W
0C7E:  MOVWF  59
0C7F:  MOVF   7A,W
0C80:  MOVWF  60
0C81:  MOVF   79,W
0C82:  MOVWF  5F
0C83:  MOVF   78,W
0C84:  MOVWF  5E
0C85:  MOVF   77,W
0C86:  MOVWF  5D
0C87:  CALL   2BA
0C88:  MOVF   7A,W
0C89:  MOVWF  58
0C8A:  MOVF   79,W
0C8B:  MOVWF  57
0C8C:  MOVF   78,W
0C8D:  MOVWF  56
0C8E:  MOVF   77,W
0C8F:  MOVWF  55
0C90:  BCF    0A.3
0C91:  CALL   7C0
0C92:  BSF    0A.3
0C93:  MOVF   78,W
0C94:  MOVWF  55
0C95:  MOVF   29,W
0C96:  MOVWF  56
0C97:  MOVF   54,W
0C98:  MOVWF  57
0C99:  MOVF   53,W
0C9A:  MOVWF  58
0C9B:  MOVF   55,W
0C9C:  MOVWF  59
0C9D:  MOVLW  01
0C9E:  MOVWF  5A
0C9F:  BCF    0A.3
0CA0:  CALL   5C6
0CA1:  BSF    0A.3
....................    y=temp; 
0CA2:  MOVF   52,W
0CA3:  MOVWF  2D
0CA4:  MOVF   51,W
0CA5:  MOVWF  2C
0CA6:  MOVF   50,W
0CA7:  MOVWF  2B
0CA8:  MOVF   4F,W
0CA9:  MOVWF  2A
....................    x=x1; 
0CAA:  MOVF   53,W
0CAB:  MOVWF  29
0CAC:  BSF    0A.3
0CAD:  BCF    0A.4
0CAE:  GOTO   632 (RETURN)
.................... } 
....................  
.................... void turn_on_bt() { 
....................    char value; 
....................    value = getc(); //Obtenemos el dato 
*
0D1F:  BTFSS  0C.5
0D20:  GOTO   51F
0D21:  MOVF   1A,W
0D22:  MOVWF  4F
....................    if(value == 'a') { //Si el valor es a 
0D23:  MOVF   4F,W
0D24:  SUBLW  61
0D25:  BTFSS  03.2
0D26:  GOTO   536
....................       //output_high(LED1);   // LED ON 
....................       mostrarBT(ON); //Mostramos BT 
0D27:  MOVLW  01
0D28:  MOVWF  50
0D29:  BCF    0A.3
0D2A:  CALL   694
0D2B:  BSF    0A.3
....................       delay_ms(500); //Delay 500 ms 
0D2C:  MOVLW  02
0D2D:  MOVWF  50
0D2E:  MOVLW  FA
0D2F:  MOVWF  51
0D30:  BCF    0A.3
0D31:  CALL   6AF
0D32:  BSF    0A.3
0D33:  DECFSZ 50,F
0D34:  GOTO   52E
....................    } else if(value == 'b') { //Si el valor es b 
0D35:  GOTO   547
0D36:  MOVF   4F,W
0D37:  SUBLW  62
0D38:  BTFSS  03.2
0D39:  GOTO   547
....................       //output_low(LED1);    // LED OFF 
....................       mostrarBT(OFF); //No mostramos BT 
0D3A:  CLRF   50
0D3B:  BCF    0A.3
0D3C:  CALL   694
0D3D:  BSF    0A.3
....................       delay_ms(500); //Delay 500 ms 
0D3E:  MOVLW  02
0D3F:  MOVWF  50
0D40:  MOVLW  FA
0D41:  MOVWF  51
0D42:  BCF    0A.3
0D43:  CALL   6AF
0D44:  BSF    0A.3
0D45:  DECFSZ 50,F
0D46:  GOTO   540
....................    } 
.................... } 
....................  
.................... ///Fin Funciones 
....................  
.................... ///Interrupciones 
....................  
.................... #INT_RB 
.................... void RB_isr(){ //Prueba de interrupciones 
.................... 	if(input(pin_b6)){ //Habilita o deshabilita la captura de datos 
*
0450:  BSF    03.5
0451:  BSF    06.6
0452:  BCF    03.5
0453:  BTFSS  06.6
0454:  GOTO   497
.................... 		habilitarLectura=~habilitarLectura; 
0455:  MOVLW  01
0456:  XORWF  2F,F
.................... 		if(habilitarLectura) 
0457:  BTFSS  2F.0
0458:  GOTO   473
.................... 			glcd_text57(128/2-30, 0, (char*)"Capturando", 1, ON); 
0459:  CLRF   78
045A:  MOVLW  0B
045B:  MOVWF  77
045C:  MOVLW  A0
045D:  MOVWF  04
045E:  BCF    03.7
045F:  MOVF   78,W
0460:  CALL   218
0461:  MOVWF  00
0462:  INCF   78,F
0463:  INCF   04,F
0464:  DECFSZ 77,F
0465:  GOTO   45F
0466:  MOVLW  22
0467:  BSF    03.5
0468:  MOVWF  2D
0469:  CLRF   2E
046A:  CLRF   30
046B:  MOVLW  A0
046C:  MOVWF  2F
046D:  MOVLW  01
046E:  MOVWF  31
046F:  MOVWF  32
0470:  BCF    03.5
0471:  CALL   33B
0472:  GOTO   497
.................... 		else{ 
.................... 			glcd_text57(128/2-30, 0, (char*)"Capturando", 1, OFF); 
0473:  CLRF   78
0474:  MOVLW  0B
0475:  MOVWF  77
0476:  MOVLW  A0
0477:  MOVWF  04
0478:  BCF    03.7
0479:  MOVF   78,W
047A:  CALL   218
047B:  MOVWF  00
047C:  INCF   78,F
047D:  INCF   04,F
047E:  DECFSZ 77,F
047F:  GOTO   479
0480:  MOVLW  22
0481:  BSF    03.5
0482:  MOVWF  2D
0483:  CLRF   2E
0484:  CLRF   30
0485:  MOVLW  A0
0486:  MOVWF  2F
0487:  MOVLW  01
0488:  MOVWF  31
0489:  CLRF   32
048A:  BCF    03.5
048B:  CALL   33B
.................... 			limpiarGrafico; 
048C:  BSF    03.5
048D:  CLRF   2B
048E:  MOVLW  14
048F:  MOVWF  2C
0490:  MOVLW  80
0491:  MOVWF  2D
0492:  MOVLW  2C
0493:  MOVWF  2E
0494:  BCF    03.5
0495:  CALL   433
.................... 			x=0; 
0496:  CLRF   29
.................... 		} 
.................... 	} 
0497:  BCF    0B.0
0498:  BCF    0A.3
0499:  BCF    0A.4
049A:  GOTO   01B
.................... } 
....................  
.................... ///Fin Interrupciones 
....................  
.................... void main() 
*
0CAF:  MOVF   03,W
0CB0:  ANDLW  1F
0CB1:  MOVWF  03
0CB2:  MOVLW  0C
0CB3:  BSF    03.5
0CB4:  MOVWF  19
0CB5:  MOVLW  A2
0CB6:  MOVWF  18
0CB7:  MOVLW  90
0CB8:  BCF    03.5
0CB9:  MOVWF  18
0CBA:  MOVLW  FF
0CBB:  MOVWF  28
0CBC:  CLRF   29
0CBD:  CLRF   2D
0CBE:  CLRF   2C
0CBF:  CLRF   2B
0CC0:  CLRF   2A
0CC1:  MOVLW  34
0CC2:  MOVWF  2E
0CC3:  BCF    2F.0
0CC4:  CLRF   31
0CC5:  CLRF   30
0CC6:  BSF    03.5
0CC7:  BSF    1F.0
0CC8:  BSF    1F.1
0CC9:  BSF    1F.2
0CCA:  BCF    1F.3
0CCB:  BCF    03.7
.................... { 
.................... 	int16 iAn; 
.................... 	float t; 
....................    char str[10]; 
....................     
....................    setup_adc_ports(AN0); //seteamos el pin A0 como analogico 
0CCC:  BCF    1F.0
0CCD:  BSF    1F.1
0CCE:  BSF    1F.2
0CCF:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); //Establecemos el reloj interno 
0CD0:  BCF    03.5
0CD1:  BSF    1F.6
0CD2:  BSF    1F.7
0CD3:  BSF    03.5
0CD4:  BSF    1F.7
0CD5:  BCF    03.5
0CD6:  BSF    1F.0
....................    glcd_init(on); //Inicializamos el lcd 
0CD7:  MOVLW  01
0CD8:  MOVWF  4F
0CD9:  BCF    0A.3
0CDA:  GOTO   49B
0CDB:  BSF    0A.3
.................... 	enable_interrupts(INT_RB); //Habilitamos las interrupciones del RB4-7 
0CDC:  BSF    0B.3
.................... 	enable_interrupts(GLOBAL); //Habilitamos las interrupciones globales 
0CDD:  MOVLW  C0
0CDE:  IORWF  0B,F
....................  
....................    glcd_text57(0,10,(char*)"Temperatura:",1,ON); //Escribimos el texto "Tempreatura:" en la posicion 0,10 
0CDF:  CLRF   78
0CE0:  MOVLW  0D
0CE1:  MOVWF  77
0CE2:  MOVLW  42
0CE3:  MOVWF  04
0CE4:  BCF    03.7
0CE5:  MOVF   78,W
0CE6:  BCF    0A.3
0CE7:  CALL   227
0CE8:  BSF    0A.3
0CE9:  MOVWF  00
0CEA:  INCF   78,F
0CEB:  INCF   04,F
0CEC:  DECFSZ 77,F
0CED:  GOTO   4E5
0CEE:  CLRF   27
0CEF:  BTFSC  0B.7
0CF0:  BSF    27.7
0CF1:  BCF    0B.7
0CF2:  BSF    03.5
0CF3:  CLRF   2D
0CF4:  MOVLW  0A
0CF5:  MOVWF  2E
0CF6:  CLRF   30
0CF7:  MOVLW  42
0CF8:  MOVWF  2F
0CF9:  MOVLW  01
0CFA:  MOVWF  31
0CFB:  MOVWF  32
0CFC:  BCF    0A.3
0CFD:  BCF    03.5
0CFE:  CALL   33B
0CFF:  BSF    0A.3
0D00:  BTFSC  27.7
0D01:  BSF    0B.7
....................    glcd_line(0, 8, 128, 8, ON); //Pintamos una linea por debajo del barra de notificaciones 
0D02:  CLRF   56
0D03:  MOVLW  08
0D04:  MOVWF  57
0D05:  MOVLW  80
0D06:  MOVWF  58
0D07:  MOVLW  08
0D08:  MOVWF  59
0D09:  MOVLW  01
0D0A:  MOVWF  5A
0D0B:  BCF    0A.3
0D0C:  CALL   5C6
0D0D:  BSF    0A.3
....................    glcd_line(0, 19, 128, 19, ON); //Pintamos una linea por debajo de la temperatura 
0D0E:  CLRF   56
0D0F:  MOVLW  13
0D10:  MOVWF  57
0D11:  MOVLW  80
0D12:  MOVWF  58
0D13:  MOVLW  13
0D14:  MOVWF  59
0D15:  MOVLW  01
0D16:  MOVWF  5A
0D17:  BCF    0A.3
0D18:  CALL   5C6
0D19:  BSF    0A.3
....................       
....................    while(TRUE){ 
....................       trisb|=0b01000000; 
0D1A:  BSF    03.5
0D1B:  BSF    06.6
....................       if(kbhit()) { // if data received  
0D1C:  BCF    03.5
0D1D:  BTFSS  0C.5
0D1E:  GOTO   547
....................          turn_on_bt(); 
....................       } 
....................       if(habilitarLectura){ 
*
0D47:  BTFSS  2F.0
0D48:  GOTO   67A
.................... 			set_adc_channel(0); //Seteamos el canal que vamos a leer 
0D49:  MOVLW  00
0D4A:  MOVWF  78
0D4B:  MOVF   1F,W
0D4C:  ANDLW  C7
0D4D:  IORWF  78,W
0D4E:  MOVWF  1F
.................... 			delay_us(10); //Esperamos 10 us 
0D4F:  MOVLW  06
0D50:  MOVWF  77
0D51:  DECFSZ 77,F
0D52:  GOTO   551
0D53:  NOP
.................... 			iAn=read_adc(); //Levantamos el dato 
0D54:  BSF    1F.2
0D55:  BTFSC  1F.2
0D56:  GOTO   555
0D57:  BSF    03.5
0D58:  MOVF   1E,W
0D59:  BCF    03.5
0D5A:  MOVWF  32
0D5B:  MOVF   1E,W
0D5C:  MOVWF  33
.................... 			t=(5.0*iAn*100.0)/1024.0; //Lo convertemos a temperatura 
0D5D:  MOVF   33,W
0D5E:  MOVWF  5A
0D5F:  MOVF   32,W
0D60:  MOVWF  59
0D61:  BCF    0A.3
0D62:  CALL   6C3
0D63:  BSF    0A.3
0D64:  CLRF   5F
0D65:  CLRF   5E
0D66:  MOVLW  20
0D67:  MOVWF  5D
0D68:  MOVLW  81
0D69:  MOVWF  5C
0D6A:  MOVF   7A,W
0D6B:  MOVWF  63
0D6C:  MOVF   79,W
0D6D:  MOVWF  62
0D6E:  MOVF   78,W
0D6F:  MOVWF  61
0D70:  MOVF   77,W
0D71:  MOVWF  60
0D72:  BCF    0A.3
0D73:  CALL   6E0
0D74:  BSF    0A.3
0D75:  MOVF   7A,W
0D76:  MOVWF  52
0D77:  MOVF   79,W
0D78:  MOVWF  51
0D79:  MOVF   78,W
0D7A:  MOVWF  50
0D7B:  MOVF   77,W
0D7C:  MOVWF  4F
0D7D:  MOVF   7A,W
0D7E:  MOVWF  5F
0D7F:  MOVF   79,W
0D80:  MOVWF  5E
0D81:  MOVF   78,W
0D82:  MOVWF  5D
0D83:  MOVF   77,W
0D84:  MOVWF  5C
0D85:  CLRF   63
0D86:  CLRF   62
0D87:  MOVLW  48
0D88:  MOVWF  61
0D89:  MOVLW  85
0D8A:  MOVWF  60
0D8B:  BCF    0A.3
0D8C:  CALL   6E0
0D8D:  BSF    0A.3
0D8E:  MOVF   7A,W
0D8F:  MOVWF  52
0D90:  MOVF   79,W
0D91:  MOVWF  51
0D92:  MOVF   78,W
0D93:  MOVWF  50
0D94:  MOVF   77,W
0D95:  MOVWF  4F
0D96:  MOVF   7A,W
0D97:  MOVWF  56
0D98:  MOVF   79,W
0D99:  MOVWF  55
0D9A:  MOVF   78,W
0D9B:  MOVWF  54
0D9C:  MOVF   77,W
0D9D:  MOVWF  53
0D9E:  CLRF   5A
0D9F:  CLRF   59
0DA0:  CLRF   58
0DA1:  MOVLW  89
0DA2:  MOVWF  57
0DA3:  GOTO   000
0DA4:  MOVF   7A,W
0DA5:  MOVWF  37
0DA6:  MOVF   79,W
0DA7:  MOVWF  36
0DA8:  MOVF   78,W
0DA9:  MOVWF  35
0DAA:  MOVF   77,W
0DAB:  MOVWF  34
.................... 		  	 
.................... 			if(t!=y){ //Si t es != al dato anterior refrescamos la temperatura y la enviamos al bluetooth 
0DAC:  MOVF   37,W
0DAD:  MOVWF  52
0DAE:  MOVF   36,W
0DAF:  MOVWF  51
0DB0:  MOVF   35,W
0DB1:  MOVWF  50
0DB2:  MOVF   34,W
0DB3:  MOVWF  4F
0DB4:  MOVF   2D,W
0DB5:  MOVWF  56
0DB6:  MOVF   2C,W
0DB7:  MOVWF  55
0DB8:  MOVF   2B,W
0DB9:  MOVWF  54
0DBA:  MOVF   2A,W
0DBB:  MOVWF  53
0DBC:  BCF    0A.3
0DBD:  CALL   755
0DBE:  BSF    0A.3
0DBF:  BTFSC  03.2
0DC0:  GOTO   614
.................... 				sprintf(str, "%4.2f°C", t); //Convertimos la temperatura float en un char* 
0DC1:  CLRF   31
0DC2:  MOVLW  38
0DC3:  MOVWF  30
0DC4:  MOVLW  03
0DC5:  MOVWF  04
0DC6:  MOVF   37,W
0DC7:  MOVWF  52
0DC8:  MOVF   36,W
0DC9:  MOVWF  51
0DCA:  MOVF   35,W
0DCB:  MOVWF  50
0DCC:  MOVF   34,W
0DCD:  MOVWF  4F
0DCE:  MOVLW  02
0DCF:  MOVWF  53
0DD0:  GOTO   11C
0DD1:  MOVLW  B0
0DD2:  MOVWF  5C
0DD3:  BCF    0A.3
0DD4:  CALL   7B3
0DD5:  BSF    0A.3
0DD6:  MOVLW  43
0DD7:  MOVWF  5C
0DD8:  BCF    0A.3
0DD9:  CALL   7B3
0DDA:  BSF    0A.3
0DDB:  CLRF   27
0DDC:  BTFSC  0B.7
0DDD:  BSF    27.7
0DDE:  BCF    0B.7
.................... 		      limpiarPorcion(12*6, 10, 9*6, 7); //Limpiamos la porcion de pantalla que tiene el valor de la temperatura. 12 es la cantiad de caracteres de "temperatura:" 
0DDF:  MOVLW  48
0DE0:  BSF    03.5
0DE1:  MOVWF  2B
0DE2:  MOVLW  0A
0DE3:  MOVWF  2C
0DE4:  MOVLW  36
0DE5:  MOVWF  2D
0DE6:  MOVLW  07
0DE7:  MOVWF  2E
0DE8:  BCF    0A.3
0DE9:  BCF    03.5
0DEA:  CALL   433
0DEB:  BSF    0A.3
0DEC:  BTFSC  27.7
0DED:  BSF    0B.7
0DEE:  CLRF   27
0DEF:  BTFSC  0B.7
0DF0:  BSF    27.7
0DF1:  BCF    0B.7
.................... 		      glcd_text57(12*6, 10, str, 1, ON); //Escribimos la temperatura. 
0DF2:  MOVLW  48
0DF3:  BSF    03.5
0DF4:  MOVWF  2D
0DF5:  MOVLW  0A
0DF6:  MOVWF  2E
0DF7:  CLRF   30
0DF8:  MOVLW  38
0DF9:  MOVWF  2F
0DFA:  MOVLW  01
0DFB:  MOVWF  31
0DFC:  MOVWF  32
0DFD:  BCF    0A.3
0DFE:  BCF    03.5
0DFF:  CALL   33B
0E00:  BSF    0A.3
0E01:  BTFSC  27.7
0E02:  BSF    0B.7
.................... 	      	printf("%f\r", t); //Enviamos la temperatura por bluetooth 
0E03:  MOVLW  89
0E04:  MOVWF  04
0E05:  MOVF   37,W
0E06:  MOVWF  52
0E07:  MOVF   36,W
0E08:  MOVWF  51
0E09:  MOVF   35,W
0E0A:  MOVWF  50
0E0B:  MOVF   34,W
0E0C:  MOVWF  4F
0E0D:  MOVLW  02
0E0E:  MOVWF  53
0E0F:  GOTO   1ED
0E10:  MOVLW  0D
0E11:  BTFSS  0C.4
0E12:  GOTO   611
0E13:  MOVWF  19
.................... 	   	} 
.................... 			if(t<=50){ //Si t es menor o igual a 50 la agregamos al grafico 
0E14:  MOVF   37,W
0E15:  MOVWF  52
0E16:  MOVF   36,W
0E17:  MOVWF  51
0E18:  MOVF   35,W
0E19:  MOVWF  50
0E1A:  MOVF   34,W
0E1B:  MOVWF  4F
0E1C:  CLRF   56
0E1D:  CLRF   55
0E1E:  MOVLW  48
0E1F:  MOVWF  54
0E20:  MOVLW  84
0E21:  MOVWF  53
0E22:  BCF    0A.3
0E23:  CALL   755
0E24:  BSF    0A.3
0E25:  BTFSC  03.0
0E26:  GOTO   629
0E27:  BTFSS  03.2
0E28:  GOTO   650
.................... 		      nuevaLinea(t); //Dibujamos la nueva linea en el grafico. 
0E29:  MOVF   37,W
0E2A:  MOVWF  52
0E2B:  MOVF   36,W
0E2C:  MOVWF  51
0E2D:  MOVF   35,W
0E2E:  MOVWF  50
0E2F:  MOVF   34,W
0E30:  MOVWF  4F
0E31:  GOTO   3FB
.................... 	      	glcd_text57(3, 0, (char*)"T>50", 1, OFF); //ocultamos la notificacion de t>50 
0E32:  MOVLW  54
0E33:  MOVWF  42
0E34:  MOVLW  3E
0E35:  MOVWF  43
0E36:  MOVLW  35
0E37:  MOVWF  44
0E38:  MOVLW  30
0E39:  MOVWF  45
0E3A:  CLRF   46
0E3B:  CLRF   27
0E3C:  BTFSC  0B.7
0E3D:  BSF    27.7
0E3E:  BCF    0B.7
0E3F:  MOVLW  03
0E40:  BSF    03.5
0E41:  MOVWF  2D
0E42:  CLRF   2E
0E43:  CLRF   30
0E44:  MOVLW  42
0E45:  MOVWF  2F
0E46:  MOVLW  01
0E47:  MOVWF  31
0E48:  CLRF   32
0E49:  BCF    0A.3
0E4A:  BCF    03.5
0E4B:  CALL   33B
0E4C:  BSF    0A.3
0E4D:  BTFSC  27.7
0E4E:  BSF    0B.7
.................... 	      } 
0E4F:  GOTO   675
.................... 	      else{ 
.................... 	      	glcd_text57(3, 0, (char*)"T>50", 1, ON); //Esto significa que no graficamos temperaturas superiores a 50 
0E50:  MOVLW  54
0E51:  MOVWF  42
0E52:  MOVLW  3E
0E53:  MOVWF  43
0E54:  MOVLW  35
0E55:  MOVWF  44
0E56:  MOVLW  30
0E57:  MOVWF  45
0E58:  CLRF   46
0E59:  CLRF   27
0E5A:  BTFSC  0B.7
0E5B:  BSF    27.7
0E5C:  BCF    0B.7
0E5D:  MOVLW  03
0E5E:  BSF    03.5
0E5F:  MOVWF  2D
0E60:  CLRF   2E
0E61:  CLRF   30
0E62:  MOVLW  42
0E63:  MOVWF  2F
0E64:  MOVLW  01
0E65:  MOVWF  31
0E66:  MOVWF  32
0E67:  BCF    0A.3
0E68:  BCF    03.5
0E69:  CALL   33B
0E6A:  BSF    0A.3
0E6B:  BTFSC  27.7
0E6C:  BSF    0B.7
.................... 	      	y=t; //igualamos el dato anterior al valor de temperatura para no refrescar otra vez el valor de la temperatura 
0E6D:  MOVF   37,W
0E6E:  MOVWF  2D
0E6F:  MOVF   36,W
0E70:  MOVWF  2C
0E71:  MOVF   35,W
0E72:  MOVWF  2B
0E73:  MOVF   34,W
0E74:  MOVWF  2A
.................... 	      } 
.................... 	      delay_ms(100); 
0E75:  MOVLW  64
0E76:  MOVWF  51
0E77:  BCF    0A.3
0E78:  CALL   6AF
0E79:  BSF    0A.3
....................       } 
0E7A:  GOTO   51A
....................    } 
.................... } 
0E7B:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
