CCS PCM C Compiler, Version 5.076, 56587               12-nov.-20 14:25

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Proyecto Final\tp_final_edi2\Codigo\main.lst

               ROM used:   5205 words (64%)
                           Largest free fragment is 2048
               RAM used:   136 (37%) at main() level
                           226 (61%) worst case
               Stack used: 7 locations (3 in main + 4 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   03C
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.5
001E:  GOTO   021
001F:  BTFSC  0C.5
0020:  GOTO   03F
0021:  MOVLW  8C
0022:  MOVWF  04
0023:  BTFSS  00.0
0024:  GOTO   027
0025:  BTFSC  0C.0
0026:  GOTO   042
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   045
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   20,W
0036:  MOVWF  0A
0037:  SWAPF  21,W
0038:  MOVWF  03
0039:  SWAPF  7F,F
003A:  SWAPF  7F,W
003B:  RETFIE
003C:  BSF    0A.3
003D:  BCF    0A.4
003E:  GOTO   12C
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   78A
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   481
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   274
.................... #include <main.h> 
.................... #include <16F877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0048:  BCF    0A.0
0049:  BCF    0A.1
004A:  BCF    0A.2
004B:  ADDLW  4F
004C:  BTFSC  03.0
004D:  INCF   0A,F
004E:  MOVWF  02
004F:  RETLW  00
0050:  RETLW  00
0051:  RETLW  00
0052:  RETLW  00
0053:  RETLW  00
0054:  RETLW  00
0055:  RETLW  00
0056:  RETLW  5F
0057:  RETLW  00
0058:  RETLW  00
0059:  RETLW  00
005A:  RETLW  03
005B:  RETLW  00
005C:  RETLW  03
005D:  RETLW  00
005E:  RETLW  14
005F:  RETLW  3E
0060:  RETLW  14
0061:  RETLW  3E
0062:  RETLW  14
0063:  RETLW  24
0064:  RETLW  2A
0065:  RETLW  7F
0066:  RETLW  2A
0067:  RETLW  12
0068:  RETLW  43
0069:  RETLW  33
006A:  RETLW  08
006B:  RETLW  66
006C:  RETLW  61
006D:  RETLW  36
006E:  RETLW  49
006F:  RETLW  55
0070:  RETLW  22
0071:  RETLW  50
0072:  RETLW  00
0073:  RETLW  05
0074:  RETLW  03
0075:  RETLW  00
0076:  RETLW  00
0077:  RETLW  00
0078:  RETLW  1C
0079:  RETLW  22
007A:  RETLW  41
007B:  RETLW  00
007C:  RETLW  00
007D:  RETLW  41
007E:  RETLW  22
007F:  RETLW  1C
0080:  RETLW  00
0081:  RETLW  14
0082:  RETLW  08
0083:  RETLW  3E
0084:  RETLW  08
0085:  RETLW  14
0086:  RETLW  08
0087:  RETLW  08
0088:  RETLW  3E
0089:  RETLW  08
008A:  RETLW  08
008B:  RETLW  00
008C:  RETLW  50
008D:  RETLW  30
008E:  RETLW  00
008F:  RETLW  00
0090:  RETLW  08
0091:  RETLW  08
0092:  RETLW  08
0093:  RETLW  08
0094:  RETLW  08
0095:  RETLW  00
0096:  RETLW  60
0097:  RETLW  60
0098:  RETLW  00
0099:  RETLW  00
009A:  RETLW  20
009B:  RETLW  10
009C:  RETLW  08
009D:  RETLW  04
009E:  RETLW  02
009F:  RETLW  3E
00A0:  RETLW  51
00A1:  RETLW  49
00A2:  RETLW  45
00A3:  RETLW  3E
00A4:  RETLW  00
00A5:  RETLW  04
00A6:  RETLW  02
00A7:  RETLW  7F
00A8:  RETLW  00
00A9:  RETLW  42
00AA:  RETLW  61
00AB:  RETLW  51
00AC:  RETLW  49
00AD:  RETLW  46
00AE:  RETLW  22
00AF:  RETLW  41
00B0:  RETLW  49
00B1:  RETLW  49
00B2:  RETLW  36
00B3:  RETLW  18
00B4:  RETLW  14
00B5:  RETLW  12
00B6:  RETLW  7F
00B7:  RETLW  10
00B8:  RETLW  27
00B9:  RETLW  45
00BA:  RETLW  45
00BB:  RETLW  45
00BC:  RETLW  39
00BD:  RETLW  3E
00BE:  RETLW  49
00BF:  RETLW  49
00C0:  RETLW  49
00C1:  RETLW  32
00C2:  RETLW  01
00C3:  RETLW  01
00C4:  RETLW  71
00C5:  RETLW  09
00C6:  RETLW  07
00C7:  RETLW  36
00C8:  RETLW  49
00C9:  RETLW  49
00CA:  RETLW  49
00CB:  RETLW  36
00CC:  RETLW  26
00CD:  RETLW  49
00CE:  RETLW  49
00CF:  RETLW  49
00D0:  RETLW  3E
00D1:  RETLW  00
00D2:  RETLW  36
00D3:  RETLW  36
00D4:  RETLW  00
00D5:  RETLW  00
00D6:  RETLW  00
00D7:  RETLW  56
00D8:  RETLW  36
00D9:  RETLW  00
00DA:  RETLW  00
00DB:  RETLW  08
00DC:  RETLW  14
00DD:  RETLW  22
00DE:  RETLW  41
00DF:  RETLW  00
00E0:  RETLW  14
00E1:  RETLW  14
00E2:  RETLW  14
00E3:  RETLW  14
00E4:  RETLW  14
00E5:  RETLW  00
00E6:  RETLW  41
00E7:  RETLW  22
00E8:  RETLW  14
00E9:  RETLW  08
00EA:  RETLW  02
00EB:  RETLW  01
00EC:  RETLW  51
00ED:  RETLW  09
00EE:  RETLW  06
00EF:  RETLW  3E
00F0:  RETLW  41
00F1:  RETLW  59
00F2:  RETLW  55
00F3:  RETLW  5E
00F4:  RETLW  7E
00F5:  RETLW  09
00F6:  RETLW  09
00F7:  RETLW  09
00F8:  RETLW  7E
00F9:  RETLW  7F
00FA:  RETLW  49
00FB:  RETLW  49
00FC:  RETLW  49
00FD:  RETLW  36
00FE:  RETLW  3E
00FF:  RETLW  41
0100:  RETLW  41
0101:  RETLW  41
0102:  RETLW  22
0103:  RETLW  7F
0104:  RETLW  41
0105:  RETLW  41
0106:  RETLW  41
0107:  RETLW  3E
0108:  RETLW  7F
0109:  RETLW  49
010A:  RETLW  49
010B:  RETLW  49
010C:  RETLW  41
010D:  RETLW  7F
010E:  RETLW  09
010F:  RETLW  09
0110:  RETLW  09
0111:  RETLW  01
0112:  RETLW  3E
0113:  RETLW  41
0114:  RETLW  41
0115:  RETLW  49
0116:  RETLW  3A
0117:  RETLW  7F
0118:  RETLW  08
0119:  RETLW  08
011A:  RETLW  08
011B:  RETLW  7F
011C:  RETLW  00
011D:  RETLW  41
011E:  RETLW  7F
011F:  RETLW  41
0120:  RETLW  00
0121:  RETLW  30
0122:  RETLW  40
0123:  RETLW  40
0124:  RETLW  40
0125:  RETLW  3F
0126:  RETLW  7F
0127:  RETLW  08
0128:  RETLW  14
0129:  RETLW  22
012A:  RETLW  41
012B:  RETLW  7F
012C:  RETLW  40
012D:  RETLW  40
012E:  RETLW  40
012F:  RETLW  40
0130:  RETLW  7F
0131:  RETLW  02
0132:  RETLW  0C
0133:  RETLW  02
0134:  RETLW  7F
0135:  RETLW  7F
0136:  RETLW  02
0137:  RETLW  04
0138:  RETLW  08
0139:  RETLW  7F
013A:  RETLW  3E
013B:  RETLW  41
013C:  RETLW  41
013D:  RETLW  41
013E:  RETLW  3E
013F:  RETLW  7F
0140:  RETLW  09
0141:  RETLW  09
0142:  RETLW  09
0143:  RETLW  06
0144:  RETLW  1E
0145:  RETLW  21
0146:  RETLW  21
0147:  RETLW  21
0148:  RETLW  5E
0149:  RETLW  7F
014A:  RETLW  09
014B:  RETLW  09
014C:  RETLW  09
014D:  RETLW  76
014E:  BSF    0A.0
014F:  BCF    0A.1
0150:  BCF    0A.2
0151:  ADDLW  55
0152:  BTFSC  03.0
0153:  INCF   0A,F
0154:  MOVWF  02
0155:  RETLW  26
0156:  RETLW  49
0157:  RETLW  49
0158:  RETLW  49
0159:  RETLW  32
015A:  RETLW  01
015B:  RETLW  01
015C:  RETLW  7F
015D:  RETLW  01
015E:  RETLW  01
015F:  RETLW  3F
0160:  RETLW  40
0161:  RETLW  40
0162:  RETLW  40
0163:  RETLW  3F
0164:  RETLW  1F
0165:  RETLW  20
0166:  RETLW  40
0167:  RETLW  20
0168:  RETLW  1F
0169:  RETLW  7F
016A:  RETLW  20
016B:  RETLW  10
016C:  RETLW  20
016D:  RETLW  7F
016E:  RETLW  41
016F:  RETLW  22
0170:  RETLW  1C
0171:  RETLW  22
0172:  RETLW  41
0173:  RETLW  07
0174:  RETLW  08
0175:  RETLW  70
0176:  RETLW  08
0177:  RETLW  07
0178:  RETLW  61
0179:  RETLW  51
017A:  RETLW  49
017B:  RETLW  45
017C:  RETLW  43
017D:  RETLW  00
017E:  RETLW  7F
017F:  RETLW  41
0180:  RETLW  00
0181:  RETLW  00
0182:  RETLW  02
0183:  RETLW  04
0184:  RETLW  08
0185:  RETLW  10
0186:  RETLW  20
0187:  RETLW  00
0188:  RETLW  00
0189:  RETLW  41
018A:  RETLW  7F
018B:  RETLW  00
018C:  RETLW  04
018D:  RETLW  02
018E:  RETLW  01
018F:  RETLW  02
0190:  RETLW  04
0191:  RETLW  40
0192:  RETLW  40
0193:  RETLW  40
0194:  RETLW  40
0195:  RETLW  40
0196:  RETLW  00
0197:  RETLW  01
0198:  RETLW  02
0199:  RETLW  04
019A:  RETLW  00
019B:  RETLW  20
019C:  RETLW  54
019D:  RETLW  54
019E:  RETLW  54
019F:  RETLW  78
01A0:  RETLW  7F
01A1:  RETLW  44
01A2:  RETLW  44
01A3:  RETLW  44
01A4:  RETLW  38
01A5:  RETLW  38
01A6:  RETLW  44
01A7:  RETLW  44
01A8:  RETLW  44
01A9:  RETLW  44
01AA:  RETLW  38
01AB:  RETLW  44
01AC:  RETLW  44
01AD:  RETLW  44
01AE:  RETLW  7F
01AF:  RETLW  38
01B0:  RETLW  54
01B1:  RETLW  54
01B2:  RETLW  54
01B3:  RETLW  18
01B4:  RETLW  04
01B5:  RETLW  04
01B6:  RETLW  7E
01B7:  RETLW  05
01B8:  RETLW  05
01B9:  RETLW  08
01BA:  RETLW  54
01BB:  RETLW  54
01BC:  RETLW  54
01BD:  RETLW  3C
01BE:  RETLW  7F
01BF:  RETLW  08
01C0:  RETLW  04
01C1:  RETLW  04
01C2:  RETLW  78
01C3:  RETLW  00
01C4:  RETLW  44
01C5:  RETLW  7D
01C6:  RETLW  40
01C7:  RETLW  00
01C8:  RETLW  20
01C9:  RETLW  40
01CA:  RETLW  44
01CB:  RETLW  3D
01CC:  RETLW  00
01CD:  RETLW  7F
01CE:  RETLW  10
01CF:  RETLW  28
01D0:  RETLW  44
01D1:  RETLW  00
01D2:  RETLW  00
01D3:  RETLW  41
01D4:  RETLW  7F
01D5:  RETLW  40
01D6:  RETLW  00
01D7:  RETLW  7C
01D8:  RETLW  04
01D9:  RETLW  78
01DA:  RETLW  04
01DB:  RETLW  78
01DC:  RETLW  7C
01DD:  RETLW  08
01DE:  RETLW  04
01DF:  RETLW  04
01E0:  RETLW  78
01E1:  RETLW  38
01E2:  RETLW  44
01E3:  RETLW  44
01E4:  RETLW  44
01E5:  RETLW  38
01E6:  RETLW  7C
01E7:  RETLW  14
01E8:  RETLW  14
01E9:  RETLW  14
01EA:  RETLW  08
01EB:  RETLW  08
01EC:  RETLW  14
01ED:  RETLW  14
01EE:  RETLW  14
01EF:  RETLW  7C
01F0:  RETLW  00
01F1:  RETLW  7C
01F2:  RETLW  08
01F3:  RETLW  04
01F4:  RETLW  04
01F5:  RETLW  48
01F6:  RETLW  54
01F7:  RETLW  54
01F8:  RETLW  54
01F9:  RETLW  20
01FA:  RETLW  04
01FB:  RETLW  04
01FC:  RETLW  3F
01FD:  RETLW  44
01FE:  RETLW  44
01FF:  RETLW  3C
0200:  RETLW  40
0201:  RETLW  40
0202:  RETLW  20
0203:  RETLW  7C
0204:  RETLW  1C
0205:  RETLW  20
0206:  RETLW  40
0207:  RETLW  20
0208:  RETLW  1C
0209:  RETLW  3C
020A:  RETLW  40
020B:  RETLW  30
020C:  RETLW  40
020D:  RETLW  3C
020E:  RETLW  44
020F:  RETLW  28
0210:  RETLW  10
0211:  RETLW  28
0212:  RETLW  44
0213:  RETLW  0C
0214:  RETLW  50
0215:  RETLW  50
0216:  RETLW  50
0217:  RETLW  3C
0218:  RETLW  44
0219:  RETLW  64
021A:  RETLW  54
021B:  RETLW  4C
021C:  RETLW  44
021D:  RETLW  00
021E:  RETLW  08
021F:  RETLW  36
0220:  RETLW  41
0221:  RETLW  41
0222:  RETLW  00
0223:  RETLW  00
0224:  RETLW  7F
0225:  RETLW  00
0226:  RETLW  00
0227:  RETLW  41
0228:  RETLW  41
0229:  RETLW  36
022A:  RETLW  08
022B:  RETLW  00
022C:  RETLW  02
022D:  RETLW  01
022E:  RETLW  02
022F:  RETLW  04
0230:  RETLW  02
0231:  BCF    0A.0
0232:  BSF    0A.1
0233:  BCF    0A.2
0234:  ADDWF  02,F
0235:  RETLW  43
0236:  RETLW  61
0237:  RETLW  70
0238:  RETLW  74
0239:  RETLW  75
023A:  RETLW  72
023B:  RETLW  61
023C:  RETLW  6E
023D:  RETLW  64
023E:  RETLW  6F
023F:  RETLW  00
0240:  BCF    0A.0
0241:  BSF    0A.1
0242:  BCF    0A.2
0243:  ADDWF  02,F
0244:  RETLW  4C
0245:  RETLW  69
0246:  RETLW  6D
0247:  RETLW  70
0248:  RETLW  69
0249:  RETLW  61
024A:  RETLW  6E
024B:  RETLW  64
024C:  RETLW  6F
024D:  RETLW  00
024E:  BCF    0A.0
024F:  BSF    0A.1
0250:  BCF    0A.2
0251:  ADDWF  02,F
0252:  RETLW  54
0253:  RETLW  65
0254:  RETLW  6D
0255:  RETLW  70
0256:  RETLW  65
0257:  RETLW  72
0258:  RETLW  61
0259:  RETLW  74
025A:  RETLW  75
025B:  RETLW  72
025C:  RETLW  61
025D:  RETLW  3A
025E:  RETLW  00
*
028B:  BSF    03.5
028C:  BSF    03.6
028D:  MOVF   18,W
028E:  BTFSC  03.2
028F:  GOTO   2FD
0290:  MOVWF  20
0291:  MOVF   1C,W
0292:  BTFSC  03.2
0293:  GOTO   2FD
0294:  ADDWF  20,F
0295:  BTFSC  03.0
0296:  GOTO   29E
0297:  MOVLW  7F
0298:  SUBWF  20,F
0299:  BTFSS  03.0
029A:  GOTO   2FD
029B:  BTFSC  03.2
029C:  GOTO   2FD
029D:  GOTO   2A2
029E:  MOVLW  81
029F:  ADDWF  20,F
02A0:  BTFSC  03.0
02A1:  GOTO   2FD
02A2:  MOVF   20,W
02A3:  MOVWF  77
02A4:  CLRF   78
02A5:  CLRF   79
02A6:  CLRF   7A
02A7:  MOVF   19,W
02A8:  MOVWF  24
02A9:  BSF    24.7
02AA:  MOVF   1A,W
02AB:  MOVWF  23
02AC:  MOVF   1B,W
02AD:  MOVWF  22
02AE:  MOVLW  18
02AF:  MOVWF  20
02B0:  CLRF   21
02B1:  BTFSS  22.0
02B2:  GOTO   2CB
02B3:  MOVF   1F,W
02B4:  ADDWF  7A,F
02B5:  BTFSS  03.0
02B6:  GOTO   2BD
02B7:  INCF   79,F
02B8:  BTFSS  03.2
02B9:  GOTO   2BD
02BA:  INCF   78,F
02BB:  BTFSC  03.2
02BC:  BSF    21.7
02BD:  MOVF   1E,W
02BE:  ADDWF  79,F
02BF:  BTFSS  03.0
02C0:  GOTO   2C4
02C1:  INCF   78,F
02C2:  BTFSC  03.2
02C3:  BSF    21.7
02C4:  MOVF   1D,W
02C5:  MOVWF  1A
02C6:  BSF    1A.7
02C7:  MOVF   1A,W
02C8:  ADDWF  78,F
02C9:  BTFSC  03.0
02CA:  BSF    21.7
02CB:  RLF    21,F
02CC:  RRF    78,F
02CD:  RRF    79,F
02CE:  RRF    7A,F
02CF:  RRF    24,F
02D0:  RRF    23,F
02D1:  RRF    22,F
02D2:  BCF    03.0
02D3:  DECFSZ 20,F
02D4:  GOTO   2B0
02D5:  MOVLW  01
02D6:  ADDWF  77,F
02D7:  BTFSC  03.0
02D8:  GOTO   2FD
02D9:  BTFSC  78.7
02DA:  GOTO   2E2
02DB:  RLF    24,F
02DC:  RLF    7A,F
02DD:  RLF    79,F
02DE:  RLF    78,F
02DF:  DECF   77,F
02E0:  BTFSC  03.2
02E1:  GOTO   2FD
02E2:  BTFSS  24.7
02E3:  GOTO   2F3
02E4:  INCF   7A,F
02E5:  BTFSS  03.2
02E6:  GOTO   2F3
02E7:  INCF   79,F
02E8:  BTFSS  03.2
02E9:  GOTO   2F3
02EA:  INCF   78,F
02EB:  BTFSS  03.2
02EC:  GOTO   2F3
02ED:  RRF    78,F
02EE:  RRF    79,F
02EF:  RRF    7A,F
02F0:  INCF   77,F
02F1:  BTFSC  03.2
02F2:  GOTO   2FD
02F3:  MOVF   19,W
02F4:  MOVWF  21
02F5:  MOVF   1D,W
02F6:  XORWF  21,F
02F7:  BTFSS  21.7
02F8:  GOTO   2FB
02F9:  BSF    78.7
02FA:  GOTO   301
02FB:  BCF    78.7
02FC:  GOTO   301
02FD:  CLRF   77
02FE:  CLRF   78
02FF:  CLRF   79
0300:  CLRF   7A
0301:  BCF    03.5
0302:  BCF    03.6
0303:  RETURN
0304:  BSF    03.5
0305:  BSF    03.6
0306:  MOVF   18,W
0307:  SUBLW  B6
0308:  MOVWF  18
0309:  CLRF   7A
030A:  MOVF   19,W
030B:  MOVWF  1C
030C:  BSF    19.7
030D:  BCF    03.0
030E:  RRF    19,F
030F:  RRF    1A,F
0310:  RRF    1B,F
0311:  RRF    7A,F
0312:  RRF    79,F
0313:  RRF    78,F
0314:  RRF    77,F
0315:  DECFSZ 18,F
0316:  GOTO   30D
0317:  BTFSS  1C.7
0318:  GOTO   324
0319:  COMF   77,F
031A:  COMF   78,F
031B:  COMF   79,F
031C:  COMF   7A,F
031D:  INCF   77,F
031E:  BTFSC  03.2
031F:  INCF   78,F
0320:  BTFSC  03.2
0321:  INCF   79,F
0322:  BTFSC  03.2
0323:  INCF   7A,F
0324:  BCF    03.5
0325:  BCF    03.6
0326:  RETURN
0327:  BTFSC  03.1
0328:  GOTO   32C
0329:  MOVLW  A0
032A:  MOVWF  04
032B:  BSF    03.7
032C:  CLRF   77
032D:  CLRF   78
032E:  CLRF   79
032F:  CLRF   7A
0330:  BSF    03.5
0331:  BSF    03.6
0332:  CLRF   20
0333:  CLRF   21
0334:  CLRF   22
0335:  CLRF   23
0336:  MOVF   1F,W
0337:  IORWF  1E,W
0338:  IORWF  1D,W
0339:  IORWF  1C,W
033A:  BTFSC  03.2
033B:  GOTO   36C
033C:  MOVLW  20
033D:  MOVWF  24
033E:  BCF    03.0
033F:  RLF    18,F
0340:  RLF    19,F
0341:  RLF    1A,F
0342:  RLF    1B,F
0343:  RLF    20,F
0344:  RLF    21,F
0345:  RLF    22,F
0346:  RLF    23,F
0347:  MOVF   1F,W
0348:  SUBWF  23,W
0349:  BTFSS  03.2
034A:  GOTO   355
034B:  MOVF   1E,W
034C:  SUBWF  22,W
034D:  BTFSS  03.2
034E:  GOTO   355
034F:  MOVF   1D,W
0350:  SUBWF  21,W
0351:  BTFSS  03.2
0352:  GOTO   355
0353:  MOVF   1C,W
0354:  SUBWF  20,W
0355:  BTFSS  03.0
0356:  GOTO   366
0357:  MOVF   1C,W
0358:  SUBWF  20,F
0359:  MOVF   1D,W
035A:  BTFSS  03.0
035B:  INCFSZ 1D,W
035C:  SUBWF  21,F
035D:  MOVF   1E,W
035E:  BTFSS  03.0
035F:  INCFSZ 1E,W
0360:  SUBWF  22,F
0361:  MOVF   1F,W
0362:  BTFSS  03.0
0363:  INCFSZ 1F,W
0364:  SUBWF  23,F
0365:  BSF    03.0
0366:  RLF    77,F
0367:  RLF    78,F
0368:  RLF    79,F
0369:  RLF    7A,F
036A:  DECFSZ 24,F
036B:  GOTO   33E
036C:  MOVF   20,W
036D:  MOVWF  00
036E:  INCF   04,F
036F:  MOVF   21,W
0370:  MOVWF  00
0371:  INCF   04,F
0372:  MOVF   22,W
0373:  MOVWF  00
0374:  INCF   04,F
0375:  MOVF   23,W
0376:  MOVWF  00
0377:  BCF    03.5
0378:  BCF    03.6
0379:  RETURN
037A:  MOVF   04,W
037B:  BSF    03.6
037C:  MOVWF  52
037D:  MOVF   51,W
037E:  MOVWF  54
037F:  BTFSC  03.2
0380:  GOTO   3A4
0381:  MOVF   50,W
0382:  BSF    03.5
0383:  MOVWF  1B
0384:  BCF    03.5
0385:  MOVF   4F,W
0386:  BSF    03.5
0387:  MOVWF  1A
0388:  BCF    03.5
0389:  MOVF   4E,W
038A:  BSF    03.5
038B:  MOVWF  19
038C:  BCF    03.5
038D:  MOVF   4D,W
038E:  BSF    03.5
038F:  MOVWF  18
0390:  CLRF   1F
0391:  CLRF   1E
0392:  MOVLW  20
0393:  MOVWF  1D
0394:  MOVLW  82
0395:  MOVWF  1C
0396:  BCF    03.5
0397:  BCF    03.6
0398:  CALL   28B
0399:  MOVF   7A,W
039A:  BSF    03.6
039B:  MOVWF  50
039C:  MOVF   79,W
039D:  MOVWF  4F
039E:  MOVF   78,W
039F:  MOVWF  4E
03A0:  MOVF   77,W
03A1:  MOVWF  4D
03A2:  DECFSZ 54,F
03A3:  GOTO   381
03A4:  MOVF   50,W
03A5:  BSF    03.5
03A6:  MOVWF  1B
03A7:  BCF    03.5
03A8:  MOVF   4F,W
03A9:  BSF    03.5
03AA:  MOVWF  1A
03AB:  BCF    03.5
03AC:  MOVF   4E,W
03AD:  BSF    03.5
03AE:  MOVWF  19
03AF:  BCF    03.5
03B0:  MOVF   4D,W
03B1:  BSF    03.5
03B2:  MOVWF  18
03B3:  BCF    03.5
03B4:  BCF    03.6
03B5:  CALL   304
03B6:  MOVF   7A,W
03B7:  BSF    03.6
03B8:  MOVWF  50
03B9:  MOVF   79,W
03BA:  MOVWF  4F
03BB:  MOVF   78,W
03BC:  MOVWF  4E
03BD:  MOVF   77,W
03BE:  MOVWF  4D
03BF:  BTFSS  50.7
03C0:  GOTO   3CE
03C1:  DECF   52,F
03C2:  BSF    52.5
03C3:  COMF   4D,F
03C4:  COMF   4E,F
03C5:  COMF   4F,F
03C6:  COMF   50,F
03C7:  INCF   4D,F
03C8:  BTFSC  03.2
03C9:  INCF   4E,F
03CA:  BTFSC  03.2
03CB:  INCF   4F,F
03CC:  BTFSC  03.2
03CD:  INCF   50,F
03CE:  MOVLW  3B
03CF:  MOVWF  59
03D0:  MOVLW  9A
03D1:  MOVWF  58
03D2:  MOVLW  CA
03D3:  MOVWF  57
03D4:  CLRF   56
03D5:  MOVLW  0A
03D6:  MOVWF  54
03D7:  MOVF   51,W
03D8:  BTFSC  03.2
03D9:  INCF   52,F
03DA:  BSF    03.1
03DB:  MOVLW  4D
03DC:  MOVWF  04
03DD:  BSF    03.7
03DE:  MOVF   50,W
03DF:  BSF    03.5
03E0:  MOVWF  1B
03E1:  BCF    03.5
03E2:  MOVF   4F,W
03E3:  BSF    03.5
03E4:  MOVWF  1A
03E5:  BCF    03.5
03E6:  MOVF   4E,W
03E7:  BSF    03.5
03E8:  MOVWF  19
03E9:  BCF    03.5
03EA:  MOVF   4D,W
03EB:  BSF    03.5
03EC:  MOVWF  18
03ED:  BCF    03.5
03EE:  MOVF   59,W
03EF:  BSF    03.5
03F0:  MOVWF  1F
03F1:  BCF    03.5
03F2:  MOVF   58,W
03F3:  BSF    03.5
03F4:  MOVWF  1E
03F5:  BCF    03.5
03F6:  MOVF   57,W
03F7:  BSF    03.5
03F8:  MOVWF  1D
03F9:  BCF    03.5
03FA:  MOVF   56,W
03FB:  BSF    03.5
03FC:  MOVWF  1C
03FD:  BCF    03.5
03FE:  BCF    03.6
03FF:  CALL   327
0400:  MOVF   78,W
0401:  MOVF   77,F
0402:  BTFSS  03.2
0403:  GOTO   41B
0404:  BSF    03.6
0405:  INCF   51,W
0406:  SUBWF  54,W
0407:  BTFSS  03.2
0408:  GOTO   40B
0409:  BCF    03.6
040A:  GOTO   41B
040B:  MOVF   52,W
040C:  BTFSC  03.2
040D:  GOTO   41E
040E:  ANDLW  0F
040F:  SUBWF  54,W
0410:  BTFSC  03.2
0411:  GOTO   414
0412:  BTFSC  03.0
0413:  GOTO   45A
0414:  BTFSC  52.7
0415:  GOTO   45A
0416:  BTFSC  52.6
0417:  GOTO   41E
0418:  MOVLW  20
0419:  GOTO   453
041A:  BCF    03.6
041B:  MOVLW  20
041C:  BSF    03.6
041D:  ANDWF  52,F
041E:  BTFSS  52.5
041F:  GOTO   42F
0420:  BCF    52.5
0421:  MOVF   51,W
0422:  BTFSS  03.2
0423:  DECF   52,F
0424:  MOVF   77,W
0425:  MOVWF  52
0426:  MOVLW  2D
0427:  BCF    03.6
0428:  BTFSS  0C.4
0429:  GOTO   428
042A:  MOVWF  19
042B:  BSF    03.6
042C:  MOVF   52,W
042D:  MOVWF  77
042E:  CLRF   52
042F:  MOVF   51,W
0430:  SUBWF  54,W
0431:  BTFSS  03.2
0432:  GOTO   440
0433:  MOVF   77,W
0434:  MOVWF  52
0435:  MOVLW  2E
0436:  BCF    03.6
0437:  BTFSS  0C.4
0438:  GOTO   437
0439:  MOVWF  19
043A:  BSF    03.6
043B:  MOVF   52,W
043C:  MOVWF  77
043D:  MOVLW  20
043E:  ANDWF  52,F
043F:  MOVLW  00
0440:  MOVLW  30
0441:  BTFSS  52.5
0442:  GOTO   453
0443:  BCF    52.5
0444:  MOVF   51,W
0445:  BTFSS  03.2
0446:  DECF   52,F
0447:  MOVF   77,W
0448:  MOVWF  52
0449:  MOVLW  2D
044A:  BCF    03.6
044B:  BTFSS  0C.4
044C:  GOTO   44B
044D:  MOVWF  19
044E:  BSF    03.6
044F:  MOVF   52,W
0450:  MOVWF  77
0451:  CLRF   52
0452:  MOVLW  30
0453:  ADDWF  77,F
0454:  MOVF   77,W
0455:  BCF    03.6
0456:  BTFSS  0C.4
0457:  GOTO   456
0458:  MOVWF  19
0459:  BSF    03.6
045A:  BCF    03.1
045B:  MOVF   59,W
045C:  BSF    03.5
045D:  MOVWF  1B
045E:  BCF    03.5
045F:  MOVF   58,W
0460:  BSF    03.5
0461:  MOVWF  1A
0462:  BCF    03.5
0463:  MOVF   57,W
0464:  BSF    03.5
0465:  MOVWF  19
0466:  BCF    03.5
0467:  MOVF   56,W
0468:  BSF    03.5
0469:  MOVWF  18
046A:  CLRF   1F
046B:  CLRF   1E
046C:  CLRF   1D
046D:  MOVLW  0A
046E:  MOVWF  1C
046F:  BCF    03.5
0470:  BCF    03.6
0471:  CALL   327
0472:  MOVF   7A,W
0473:  BSF    03.6
0474:  MOVWF  59
0475:  MOVF   79,W
0476:  MOVWF  58
0477:  MOVF   78,W
0478:  MOVWF  57
0479:  MOVF   77,W
047A:  MOVWF  56
047B:  DECFSZ 54,F
047C:  GOTO   3DA
047D:  BCF    03.6
047E:  BCF    0A.3
047F:  BCF    0A.4
0480:  GOTO   502 (RETURN)
*
0513:  CLRF   77
0514:  CLRF   78
0515:  BSF    03.5
0516:  BSF    03.6
0517:  MOVF   18,W
0518:  BCF    03.0
0519:  BTFSC  19.0
051A:  ADDWF  77,F
051B:  RRF    77,F
051C:  RRF    78,F
051D:  BTFSC  19.1
051E:  ADDWF  77,F
051F:  RRF    77,F
0520:  RRF    78,F
0521:  BTFSC  19.2
0522:  ADDWF  77,F
0523:  RRF    77,F
0524:  RRF    78,F
0525:  BTFSC  19.3
0526:  ADDWF  77,F
0527:  RRF    77,F
0528:  RRF    78,F
0529:  BTFSC  19.4
052A:  ADDWF  77,F
052B:  RRF    77,F
052C:  RRF    78,F
052D:  BTFSC  19.5
052E:  ADDWF  77,F
052F:  RRF    77,F
0530:  RRF    78,F
0531:  BTFSC  19.6
0532:  ADDWF  77,F
0533:  RRF    77,F
0534:  RRF    78,F
0535:  BTFSC  19.7
0536:  ADDWF  77,F
0537:  RRF    77,F
0538:  RRF    78,F
0539:  BCF    03.5
053A:  BCF    03.6
053B:  RETURN
*
0758:  MOVF   36,W
0759:  MOVWF  04
075A:  BCF    03.7
075B:  BTFSC  37.0
075C:  BSF    03.7
075D:  BSF    03.5
075E:  BSF    03.6
075F:  MOVF   18,W
0760:  MOVWF  00
0761:  INCF   04,F
0762:  CLRF   00
0763:  BCF    03.5
0764:  BCF    03.6
0765:  INCF   36,F
0766:  BTFSC  03.2
0767:  INCF   37,F
0768:  RETURN
*
07BF:  MOVLW  8E
07C0:  MOVWF  77
07C1:  BSF    03.6
07C2:  MOVF   28,W
07C3:  MOVWF  78
07C4:  MOVF   27,W
07C5:  MOVWF  79
07C6:  CLRF   7A
07C7:  MOVF   78,F
07C8:  BTFSS  03.2
07C9:  GOTO   7D4
07CA:  MOVF   79,W
07CB:  MOVWF  78
07CC:  CLRF   79
07CD:  MOVLW  08
07CE:  SUBWF  77,F
07CF:  MOVF   78,F
07D0:  BTFSS  03.2
07D1:  GOTO   7D4
07D2:  CLRF   77
07D3:  GOTO   7DC
07D4:  BCF    03.0
07D5:  BTFSC  78.7
07D6:  GOTO   7DB
07D7:  RLF    79,F
07D8:  RLF    78,F
07D9:  DECF   77,F
07DA:  GOTO   7D4
07DB:  BCF    78.7
07DC:  BCF    03.6
07DD:  RETURN
07DE:  MOVLW  8E
07DF:  MOVWF  77
07E0:  BSF    03.6
07E1:  MOVF   2D,W
07E2:  SUBWF  77,F
07E3:  MOVF   2E,W
07E4:  MOVWF  79
07E5:  MOVF   2F,W
07E6:  MOVWF  78
07E7:  BSF    79.7
07E8:  MOVF   77,F
07E9:  BTFSC  03.2
07EA:  GOTO   7F6
07EB:  BCF    03.0
07EC:  MOVF   79,F
07ED:  BTFSS  03.2
07EE:  GOTO   7F2
07EF:  MOVF   78,F
07F0:  BTFSC  03.2
07F1:  GOTO   7F6
07F2:  RRF    79,F
07F3:  RRF    78,F
07F4:  DECFSZ 77,F
07F5:  GOTO   7EB
07F6:  BTFSS  2E.7
07F7:  GOTO   7FD
07F8:  COMF   78,F
07F9:  COMF   79,F
07FA:  INCF   78,F
07FB:  BTFSC  03.2
07FC:  INCF   79,F
07FD:  BCF    03.6
07FE:  RETURN
0800:  MOVF   04,W
0801:  BSF    03.5
0802:  BSF    03.6
0803:  MOVWF  10
0804:  BCF    03.5
0805:  MOVF   69,W
0806:  BSF    03.5
0807:  MOVWF  12
0808:  BTFSC  03.2
0809:  GOTO   031
080A:  BCF    03.5
080B:  MOVF   68,W
080C:  BSF    03.5
080D:  MOVWF  1B
080E:  BCF    03.5
080F:  MOVF   67,W
0810:  BSF    03.5
0811:  MOVWF  1A
0812:  BCF    03.5
0813:  MOVF   66,W
0814:  BSF    03.5
0815:  MOVWF  19
0816:  BCF    03.5
0817:  MOVF   65,W
0818:  BSF    03.5
0819:  MOVWF  18
081A:  CLRF   1F
081B:  CLRF   1E
081C:  MOVLW  20
081D:  MOVWF  1D
081E:  MOVLW  82
081F:  MOVWF  1C
0820:  BCF    0A.3
0821:  BCF    03.5
0822:  BCF    03.6
0823:  CALL   28B
0824:  BSF    0A.3
0825:  MOVF   7A,W
0826:  BSF    03.6
0827:  MOVWF  68
0828:  MOVF   79,W
0829:  MOVWF  67
082A:  MOVF   78,W
082B:  MOVWF  66
082C:  MOVF   77,W
082D:  MOVWF  65
082E:  BSF    03.5
082F:  DECFSZ 12,F
0830:  GOTO   00A
0831:  BCF    03.5
0832:  MOVF   68,W
0833:  BSF    03.5
0834:  MOVWF  1B
0835:  BCF    03.5
0836:  MOVF   67,W
0837:  BSF    03.5
0838:  MOVWF  1A
0839:  BCF    03.5
083A:  MOVF   66,W
083B:  BSF    03.5
083C:  MOVWF  19
083D:  BCF    03.5
083E:  MOVF   65,W
083F:  BSF    03.5
0840:  MOVWF  18
0841:  BCF    0A.3
0842:  BCF    03.5
0843:  BCF    03.6
0844:  CALL   304
0845:  BSF    0A.3
0846:  MOVF   7A,W
0847:  BSF    03.6
0848:  MOVWF  68
0849:  MOVF   79,W
084A:  MOVWF  67
084B:  MOVF   78,W
084C:  MOVWF  66
084D:  MOVF   77,W
084E:  MOVWF  65
084F:  BTFSS  68.7
0850:  GOTO   060
0851:  BSF    03.5
0852:  DECF   10,F
0853:  BSF    10.5
0854:  BCF    03.5
0855:  COMF   65,F
0856:  COMF   66,F
0857:  COMF   67,F
0858:  COMF   68,F
0859:  INCF   65,F
085A:  BTFSC  03.2
085B:  INCF   66,F
085C:  BTFSC  03.2
085D:  INCF   67,F
085E:  BTFSC  03.2
085F:  INCF   68,F
0860:  MOVLW  3B
0861:  BSF    03.5
0862:  MOVWF  17
0863:  MOVLW  9A
0864:  MOVWF  16
0865:  MOVLW  CA
0866:  MOVWF  15
0867:  CLRF   14
0868:  MOVLW  0A
0869:  MOVWF  12
086A:  BCF    03.5
086B:  MOVF   69,W
086C:  BTFSS  03.2
086D:  GOTO   071
086E:  BSF    03.5
086F:  INCF   10,F
0870:  BCF    03.5
0871:  BSF    03.1
0872:  MOVLW  65
0873:  MOVWF  04
0874:  BSF    03.7
0875:  MOVF   68,W
0876:  BSF    03.5
0877:  MOVWF  1B
0878:  BCF    03.5
0879:  MOVF   67,W
087A:  BSF    03.5
087B:  MOVWF  1A
087C:  BCF    03.5
087D:  MOVF   66,W
087E:  BSF    03.5
087F:  MOVWF  19
0880:  BCF    03.5
0881:  MOVF   65,W
0882:  BSF    03.5
0883:  MOVWF  18
0884:  MOVF   17,W
0885:  MOVWF  1F
0886:  MOVF   16,W
0887:  MOVWF  1E
0888:  MOVF   15,W
0889:  MOVWF  1D
088A:  MOVF   14,W
088B:  MOVWF  1C
088C:  BCF    0A.3
088D:  BCF    03.5
088E:  BCF    03.6
088F:  CALL   327
0890:  BSF    0A.3
0891:  MOVF   78,W
0892:  MOVF   77,F
0893:  BTFSS  03.2
0894:  GOTO   0AF
0895:  BSF    03.6
0896:  INCF   69,W
0897:  BSF    03.5
0898:  SUBWF  12,W
0899:  BTFSS  03.2
089A:  GOTO   09E
089B:  BCF    03.5
089C:  BCF    03.6
089D:  GOTO   0AF
089E:  MOVF   10,W
089F:  BTFSC  03.2
08A0:  GOTO   0B3
08A1:  ANDLW  0F
08A2:  SUBWF  12,W
08A3:  BTFSC  03.2
08A4:  GOTO   0A7
08A5:  BTFSC  03.0
08A6:  GOTO   107
08A7:  BTFSC  10.7
08A8:  GOTO   107
08A9:  BTFSC  10.6
08AA:  GOTO   0B3
08AB:  MOVLW  20
08AC:  GOTO   0FD
08AD:  BCF    03.5
08AE:  BCF    03.6
08AF:  MOVLW  20
08B0:  BSF    03.5
08B1:  BSF    03.6
08B2:  ANDWF  10,F
08B3:  BTFSS  10.5
08B4:  GOTO   0CC
08B5:  BCF    10.5
08B6:  BCF    03.5
08B7:  MOVF   69,W
08B8:  BTFSC  03.2
08B9:  GOTO   0BD
08BA:  BSF    03.5
08BB:  DECF   10,F
08BC:  BCF    03.5
08BD:  MOVF   77,W
08BE:  BSF    03.5
08BF:  MOVWF  10
08C0:  MOVLW  2D
08C1:  MOVWF  18
08C2:  BCF    0A.3
08C3:  BCF    03.5
08C4:  BCF    03.6
08C5:  CALL   758
08C6:  BSF    0A.3
08C7:  BSF    03.5
08C8:  BSF    03.6
08C9:  MOVF   10,W
08CA:  MOVWF  77
08CB:  CLRF   10
08CC:  BCF    03.5
08CD:  MOVF   69,W
08CE:  BSF    03.5
08CF:  SUBWF  12,W
08D0:  BTFSS  03.2
08D1:  GOTO   0E2
08D2:  MOVF   77,W
08D3:  MOVWF  10
08D4:  MOVLW  2E
08D5:  MOVWF  18
08D6:  BCF    0A.3
08D7:  BCF    03.5
08D8:  BCF    03.6
08D9:  CALL   758
08DA:  BSF    0A.3
08DB:  BSF    03.5
08DC:  BSF    03.6
08DD:  MOVF   10,W
08DE:  MOVWF  77
08DF:  MOVLW  20
08E0:  ANDWF  10,F
08E1:  MOVLW  00
08E2:  MOVLW  30
08E3:  BTFSS  10.5
08E4:  GOTO   0FD
08E5:  BCF    10.5
08E6:  BCF    03.5
08E7:  MOVF   69,W
08E8:  BTFSC  03.2
08E9:  GOTO   0ED
08EA:  BSF    03.5
08EB:  DECF   10,F
08EC:  BCF    03.5
08ED:  MOVF   77,W
08EE:  BSF    03.5
08EF:  MOVWF  10
08F0:  MOVLW  2D
08F1:  MOVWF  18
08F2:  BCF    0A.3
08F3:  BCF    03.5
08F4:  BCF    03.6
08F5:  CALL   758
08F6:  BSF    0A.3
08F7:  BSF    03.5
08F8:  BSF    03.6
08F9:  MOVF   10,W
08FA:  MOVWF  77
08FB:  CLRF   10
08FC:  MOVLW  30
08FD:  ADDWF  77,F
08FE:  MOVF   77,W
08FF:  MOVWF  18
0900:  BCF    0A.3
0901:  BCF    03.5
0902:  BCF    03.6
0903:  CALL   758
0904:  BSF    0A.3
0905:  BSF    03.5
0906:  BSF    03.6
0907:  BCF    03.1
0908:  MOVF   17,W
0909:  MOVWF  1B
090A:  MOVF   16,W
090B:  MOVWF  1A
090C:  MOVF   15,W
090D:  MOVWF  19
090E:  MOVF   14,W
090F:  MOVWF  18
0910:  CLRF   1F
0911:  CLRF   1E
0912:  CLRF   1D
0913:  MOVLW  0A
0914:  MOVWF  1C
0915:  BCF    0A.3
0916:  BCF    03.5
0917:  BCF    03.6
0918:  CALL   327
0919:  BSF    0A.3
091A:  MOVF   7A,W
091B:  BSF    03.5
091C:  BSF    03.6
091D:  MOVWF  17
091E:  MOVF   79,W
091F:  MOVWF  16
0920:  MOVF   78,W
0921:  MOVWF  15
0922:  MOVF   77,W
0923:  MOVWF  14
0924:  DECFSZ 12,F
0925:  GOTO   127
0926:  GOTO   129
0927:  BCF    03.5
0928:  GOTO   071
0929:  BCF    03.5
092A:  BCF    03.6
092B:  RETURN
*
0CA2:  BSF    03.6
0CA3:  MOVF   2B,W
0CA4:  BTFSC  03.2
0CA5:  GOTO   568
0CA6:  MOVWF  37
0CA7:  MOVF   2F,W
0CA8:  BTFSC  03.2
0CA9:  GOTO   568
0CAA:  SUBWF  37,F
0CAB:  BTFSS  03.0
0CAC:  GOTO   4B2
0CAD:  MOVLW  7F
0CAE:  ADDWF  37,F
0CAF:  BTFSC  03.0
0CB0:  GOTO   568
0CB1:  GOTO   4B8
0CB2:  MOVLW  81
0CB3:  SUBWF  37,F
0CB4:  BTFSS  03.0
0CB5:  GOTO   568
0CB6:  BTFSC  03.2
0CB7:  GOTO   568
0CB8:  MOVF   37,W
0CB9:  MOVWF  77
0CBA:  CLRF   78
0CBB:  CLRF   79
0CBC:  CLRF   7A
0CBD:  CLRF   36
0CBE:  MOVF   2C,W
0CBF:  MOVWF  35
0CC0:  BSF    35.7
0CC1:  MOVF   2D,W
0CC2:  MOVWF  34
0CC3:  MOVF   2E,W
0CC4:  MOVWF  33
0CC5:  MOVLW  19
0CC6:  MOVWF  37
0CC7:  MOVF   32,W
0CC8:  SUBWF  33,F
0CC9:  BTFSC  03.0
0CCA:  GOTO   4DB
0CCB:  MOVLW  01
0CCC:  SUBWF  34,F
0CCD:  BTFSC  03.0
0CCE:  GOTO   4DB
0CCF:  SUBWF  35,F
0CD0:  BTFSC  03.0
0CD1:  GOTO   4DB
0CD2:  SUBWF  36,F
0CD3:  BTFSC  03.0
0CD4:  GOTO   4DB
0CD5:  INCF   36,F
0CD6:  INCF   35,F
0CD7:  INCF   34,F
0CD8:  MOVF   32,W
0CD9:  ADDWF  33,F
0CDA:  GOTO   50D
0CDB:  MOVF   31,W
0CDC:  SUBWF  34,F
0CDD:  BTFSC  03.0
0CDE:  GOTO   4F6
0CDF:  MOVLW  01
0CE0:  SUBWF  35,F
0CE1:  BTFSC  03.0
0CE2:  GOTO   4F6
0CE3:  SUBWF  36,F
0CE4:  BTFSC  03.0
0CE5:  GOTO   4F6
0CE6:  INCF   36,F
0CE7:  INCF   35,F
0CE8:  MOVF   31,W
0CE9:  ADDWF  34,F
0CEA:  MOVF   32,W
0CEB:  ADDWF  33,F
0CEC:  BTFSS  03.0
0CED:  GOTO   50D
0CEE:  INCF   34,F
0CEF:  BTFSS  03.2
0CF0:  GOTO   50D
0CF1:  INCF   35,F
0CF2:  BTFSS  03.2
0CF3:  GOTO   50D
0CF4:  INCF   36,F
0CF5:  GOTO   50D
0CF6:  MOVF   30,W
0CF7:  IORLW  80
0CF8:  SUBWF  35,F
0CF9:  BTFSC  03.0
0CFA:  GOTO   50C
0CFB:  MOVLW  01
0CFC:  SUBWF  36,F
0CFD:  BTFSC  03.0
0CFE:  GOTO   50C
0CFF:  INCF   36,F
0D00:  MOVF   30,W
0D01:  IORLW  80
0D02:  ADDWF  35,F
0D03:  MOVF   31,W
0D04:  ADDWF  34,F
0D05:  BTFSS  03.0
0D06:  GOTO   4EA
0D07:  INCF   35,F
0D08:  BTFSS  03.2
0D09:  GOTO   4EA
0D0A:  INCF   36,F
0D0B:  GOTO   4EA
0D0C:  BSF    7A.0
0D0D:  DECFSZ 37,F
0D0E:  GOTO   510
0D0F:  GOTO   51B
0D10:  BCF    03.0
0D11:  RLF    33,F
0D12:  RLF    34,F
0D13:  RLF    35,F
0D14:  RLF    36,F
0D15:  BCF    03.0
0D16:  RLF    7A,F
0D17:  RLF    79,F
0D18:  RLF    78,F
0D19:  RLF    38,F
0D1A:  GOTO   4C7
0D1B:  BTFSS  38.0
0D1C:  GOTO   523
0D1D:  BCF    03.0
0D1E:  RRF    78,F
0D1F:  RRF    79,F
0D20:  RRF    7A,F
0D21:  RRF    38,F
0D22:  GOTO   526
0D23:  DECF   77,F
0D24:  BTFSC  03.2
0D25:  GOTO   568
0D26:  BTFSC  38.7
0D27:  GOTO   54F
0D28:  BCF    03.0
0D29:  RLF    33,F
0D2A:  RLF    34,F
0D2B:  RLF    35,F
0D2C:  RLF    36,F
0D2D:  MOVF   32,W
0D2E:  SUBWF  33,F
0D2F:  BTFSC  03.0
0D30:  GOTO   53B
0D31:  MOVLW  01
0D32:  SUBWF  34,F
0D33:  BTFSC  03.0
0D34:  GOTO   53B
0D35:  SUBWF  35,F
0D36:  BTFSC  03.0
0D37:  GOTO   53B
0D38:  SUBWF  36,F
0D39:  BTFSS  03.0
0D3A:  GOTO   55E
0D3B:  MOVF   31,W
0D3C:  SUBWF  34,F
0D3D:  BTFSC  03.0
0D3E:  GOTO   546
0D3F:  MOVLW  01
0D40:  SUBWF  35,F
0D41:  BTFSC  03.0
0D42:  GOTO   546
0D43:  SUBWF  36,F
0D44:  BTFSS  03.0
0D45:  GOTO   55E
0D46:  MOVF   30,W
0D47:  IORLW  80
0D48:  SUBWF  35,F
0D49:  BTFSC  03.0
0D4A:  GOTO   54F
0D4B:  MOVLW  01
0D4C:  SUBWF  36,F
0D4D:  BTFSS  03.0
0D4E:  GOTO   55E
0D4F:  INCF   7A,F
0D50:  BTFSS  03.2
0D51:  GOTO   55E
0D52:  INCF   79,F
0D53:  BTFSS  03.2
0D54:  GOTO   55E
0D55:  INCF   78,F
0D56:  BTFSS  03.2
0D57:  GOTO   55E
0D58:  INCF   77,F
0D59:  BTFSC  03.2
0D5A:  GOTO   568
0D5B:  RRF    78,F
0D5C:  RRF    79,F
0D5D:  RRF    7A,F
0D5E:  MOVF   2C,W
0D5F:  MOVWF  37
0D60:  MOVF   30,W
0D61:  XORWF  37,F
0D62:  BTFSS  37.7
0D63:  GOTO   566
0D64:  BSF    78.7
0D65:  GOTO   56C
0D66:  BCF    78.7
0D67:  GOTO   56C
0D68:  CLRF   77
0D69:  CLRF   78
0D6A:  CLRF   79
0D6B:  CLRF   7A
0D6C:  BCF    03.6
0D6D:  RETURN
0D6E:  BSF    03.6
0D6F:  MOVF   28,W
0D70:  MOVWF  2F
0D71:  MOVF   2C,W
0D72:  XORWF  2F,F
0D73:  BTFSS  2F.7
0D74:  GOTO   57A
0D75:  BCF    03.2
0D76:  BCF    03.0
0D77:  BTFSC  28.7
0D78:  BSF    03.0
0D79:  GOTO   5AD
0D7A:  MOVF   28,W
0D7B:  MOVWF  2F
0D7C:  MOVF   2B,W
0D7D:  MOVWF  30
0D7E:  MOVF   27,W
0D7F:  SUBWF  30,F
0D80:  BTFSC  03.2
0D81:  GOTO   588
0D82:  BTFSS  2F.7
0D83:  GOTO   5AD
0D84:  MOVF   03,W
0D85:  XORLW  01
0D86:  MOVWF  03
0D87:  GOTO   5AD
0D88:  MOVF   2C,W
0D89:  MOVWF  30
0D8A:  MOVF   28,W
0D8B:  SUBWF  30,F
0D8C:  BTFSC  03.2
0D8D:  GOTO   594
0D8E:  BTFSS  2F.7
0D8F:  GOTO   5AD
0D90:  MOVF   03,W
0D91:  XORLW  01
0D92:  MOVWF  03
0D93:  GOTO   5AD
0D94:  MOVF   2D,W
0D95:  MOVWF  30
0D96:  MOVF   29,W
0D97:  SUBWF  30,F
0D98:  BTFSC  03.2
0D99:  GOTO   5A0
0D9A:  BTFSS  2F.7
0D9B:  GOTO   5AD
0D9C:  MOVF   03,W
0D9D:  XORLW  01
0D9E:  MOVWF  03
0D9F:  GOTO   5AD
0DA0:  MOVF   2E,W
0DA1:  MOVWF  30
0DA2:  MOVF   2A,W
0DA3:  SUBWF  30,F
0DA4:  BTFSC  03.2
0DA5:  GOTO   5AC
0DA6:  BTFSS  2F.7
0DA7:  GOTO   5AD
0DA8:  MOVF   03,W
0DA9:  XORLW  01
0DAA:  MOVWF  03
0DAB:  GOTO   5AD
0DAC:  BCF    03.0
0DAD:  BCF    03.6
0DAE:  RETURN
0DAF:  MOVLW  80
0DB0:  BTFSS  03.1
0DB1:  GOTO   5B5
0DB2:  BSF    03.6
0DB3:  XORWF  36,F
0DB4:  BCF    03.6
0DB5:  BSF    03.6
0DB6:  CLRF   3B
0DB7:  CLRF   3C
0DB8:  MOVF   32,W
0DB9:  MOVWF  3A
0DBA:  MOVF   36,W
0DBB:  XORWF  3A,F
0DBC:  MOVF   31,W
0DBD:  BTFSC  03.2
0DBE:  GOTO   6A3
0DBF:  MOVWF  39
0DC0:  MOVWF  77
0DC1:  MOVF   35,W
0DC2:  BTFSC  03.2
0DC3:  GOTO   6AC
0DC4:  SUBWF  39,F
0DC5:  BTFSC  03.2
0DC6:  GOTO   648
0DC7:  BTFSS  03.0
0DC8:  GOTO   606
0DC9:  MOVF   36,W
0DCA:  MOVWF  3F
0DCB:  BSF    3F.7
0DCC:  MOVF   37,W
0DCD:  MOVWF  3E
0DCE:  MOVF   38,W
0DCF:  MOVWF  3D
0DD0:  CLRF   3C
0DD1:  BCF    03.0
0DD2:  RRF    3F,F
0DD3:  RRF    3E,F
0DD4:  RRF    3D,F
0DD5:  RRF    3C,F
0DD6:  DECFSZ 39,F
0DD7:  GOTO   5D0
0DD8:  BTFSS  3A.7
0DD9:  GOTO   5DD
0DDA:  BSF    3B.0
0DDB:  GOTO   6C0
0DDC:  BCF    3B.0
0DDD:  BCF    39.0
0DDE:  BSF    3B.4
0DDF:  MOVLW  34
0DE0:  MOVWF  04
0DE1:  BSF    03.7
0DE2:  GOTO   6D5
0DE3:  BCF    3B.4
0DE4:  BTFSC  3A.7
0DE5:  GOTO   5F0
0DE6:  BTFSS  39.0
0DE7:  GOTO   5FB
0DE8:  RRF    3F,F
0DE9:  RRF    3E,F
0DEA:  RRF    3D,F
0DEB:  RRF    3C,F
0DEC:  INCF   77,F
0DED:  BTFSC  03.2
0DEE:  GOTO   6BB
0DEF:  GOTO   5FB
0DF0:  BTFSC  3F.7
0DF1:  GOTO   5FE
0DF2:  BCF    03.0
0DF3:  RLF    3C,F
0DF4:  RLF    3D,F
0DF5:  RLF    3E,F
0DF6:  RLF    3F,F
0DF7:  DECF   77,F
0DF8:  BTFSC  03.2
0DF9:  GOTO   6BB
0DFA:  GOTO   5F0
0DFB:  BSF    3B.6
0DFC:  GOTO   668
0DFD:  BCF    3B.6
0DFE:  MOVF   32,W
0DFF:  MOVWF  3A
0E00:  BTFSS  3A.7
0E01:  GOTO   604
0E02:  BSF    3F.7
0E03:  GOTO   6B4
0E04:  BCF    3F.7
0E05:  GOTO   6B4
0E06:  MOVF   35,W
0E07:  MOVWF  39
0E08:  MOVWF  77
0E09:  MOVF   31,W
0E0A:  SUBWF  39,F
0E0B:  MOVF   32,W
0E0C:  MOVWF  3F
0E0D:  BSF    3F.7
0E0E:  MOVF   33,W
0E0F:  MOVWF  3E
0E10:  MOVF   34,W
0E11:  MOVWF  3D
0E12:  CLRF   3C
0E13:  BCF    03.0
0E14:  RRF    3F,F
0E15:  RRF    3E,F
0E16:  RRF    3D,F
0E17:  RRF    3C,F
0E18:  DECFSZ 39,F
0E19:  GOTO   612
0E1A:  BTFSS  3A.7
0E1B:  GOTO   61F
0E1C:  BSF    3B.1
0E1D:  GOTO   6C0
0E1E:  BCF    3B.1
0E1F:  BCF    39.0
0E20:  BSF    3B.5
0E21:  MOVLW  38
0E22:  MOVWF  04
0E23:  BSF    03.7
0E24:  GOTO   6D5
0E25:  BCF    3B.5
0E26:  BTFSC  3A.7
0E27:  GOTO   632
0E28:  BTFSS  39.0
0E29:  GOTO   63D
0E2A:  RRF    3F,F
0E2B:  RRF    3E,F
0E2C:  RRF    3D,F
0E2D:  RRF    3C,F
0E2E:  INCF   77,F
0E2F:  BTFSC  03.2
0E30:  GOTO   6BB
0E31:  GOTO   63D
0E32:  BTFSC  3F.7
0E33:  GOTO   640
0E34:  BCF    03.0
0E35:  RLF    3C,F
0E36:  RLF    3D,F
0E37:  RLF    3E,F
0E38:  RLF    3F,F
0E39:  DECF   77,F
0E3A:  BTFSC  03.2
0E3B:  GOTO   6BB
0E3C:  GOTO   632
0E3D:  BSF    3B.7
0E3E:  GOTO   668
0E3F:  BCF    3B.7
0E40:  MOVF   36,W
0E41:  MOVWF  3A
0E42:  BTFSS  3A.7
0E43:  GOTO   646
0E44:  BSF    3F.7
0E45:  GOTO   6B4
0E46:  BCF    3F.7
0E47:  GOTO   6B4
0E48:  MOVF   36,W
0E49:  MOVWF  3F
0E4A:  BSF    3F.7
0E4B:  MOVF   37,W
0E4C:  MOVWF  3E
0E4D:  MOVF   38,W
0E4E:  MOVWF  3D
0E4F:  BTFSS  3A.7
0E50:  GOTO   655
0E51:  BCF    3F.7
0E52:  BSF    3B.2
0E53:  GOTO   6C0
0E54:  BCF    3B.2
0E55:  CLRF   3C
0E56:  BCF    39.0
0E57:  MOVLW  34
0E58:  MOVWF  04
0E59:  BSF    03.7
0E5A:  GOTO   6D5
0E5B:  BTFSC  3A.7
0E5C:  GOTO   67E
0E5D:  MOVF   32,W
0E5E:  MOVWF  3A
0E5F:  BTFSS  39.0
0E60:  GOTO   668
0E61:  RRF    3F,F
0E62:  RRF    3E,F
0E63:  RRF    3D,F
0E64:  RRF    3C,F
0E65:  INCF   77,F
0E66:  BTFSC  03.2
0E67:  GOTO   6BB
0E68:  BTFSS  3C.7
0E69:  GOTO   679
0E6A:  INCF   3D,F
0E6B:  BTFSS  03.2
0E6C:  GOTO   679
0E6D:  INCF   3E,F
0E6E:  BTFSS  03.2
0E6F:  GOTO   679
0E70:  INCF   3F,F
0E71:  BTFSS  03.2
0E72:  GOTO   679
0E73:  RRF    3F,F
0E74:  RRF    3E,F
0E75:  RRF    3D,F
0E76:  INCF   77,F
0E77:  BTFSC  03.2
0E78:  GOTO   6BB
0E79:  BTFSC  3B.6
0E7A:  GOTO   5FD
0E7B:  BTFSC  3B.7
0E7C:  GOTO   63F
0E7D:  GOTO   69D
0E7E:  MOVLW  80
0E7F:  XORWF  3F,F
0E80:  BTFSS  3F.7
0E81:  GOTO   686
0E82:  GOTO   6C0
0E83:  MOVF   36,W
0E84:  MOVWF  3A
0E85:  GOTO   693
0E86:  MOVF   32,W
0E87:  MOVWF  3A
0E88:  MOVF   3F,F
0E89:  BTFSS  03.2
0E8A:  GOTO   693
0E8B:  MOVF   3E,F
0E8C:  BTFSS  03.2
0E8D:  GOTO   693
0E8E:  MOVF   3D,F
0E8F:  BTFSS  03.2
0E90:  GOTO   693
0E91:  CLRF   77
0E92:  GOTO   6B4
0E93:  BTFSC  3F.7
0E94:  GOTO   69D
0E95:  BCF    03.0
0E96:  RLF    3C,F
0E97:  RLF    3D,F
0E98:  RLF    3E,F
0E99:  RLF    3F,F
0E9A:  DECFSZ 77,F
0E9B:  GOTO   693
0E9C:  GOTO   6BB
0E9D:  BTFSS  3A.7
0E9E:  GOTO   6A1
0E9F:  BSF    3F.7
0EA0:  GOTO   6B4
0EA1:  BCF    3F.7
0EA2:  GOTO   6B4
0EA3:  MOVF   35,W
0EA4:  MOVWF  77
0EA5:  MOVF   36,W
0EA6:  MOVWF  3F
0EA7:  MOVF   37,W
0EA8:  MOVWF  3E
0EA9:  MOVF   38,W
0EAA:  MOVWF  3D
0EAB:  GOTO   6B4
0EAC:  MOVF   31,W
0EAD:  MOVWF  77
0EAE:  MOVF   32,W
0EAF:  MOVWF  3F
0EB0:  MOVF   33,W
0EB1:  MOVWF  3E
0EB2:  MOVF   34,W
0EB3:  MOVWF  3D
0EB4:  MOVF   3F,W
0EB5:  MOVWF  78
0EB6:  MOVF   3E,W
0EB7:  MOVWF  79
0EB8:  MOVF   3D,W
0EB9:  MOVWF  7A
0EBA:  GOTO   6F3
0EBB:  CLRF   77
0EBC:  CLRF   78
0EBD:  CLRF   79
0EBE:  CLRF   7A
0EBF:  GOTO   6F3
0EC0:  CLRF   3C
0EC1:  COMF   3D,F
0EC2:  COMF   3E,F
0EC3:  COMF   3F,F
0EC4:  COMF   3C,F
0EC5:  INCF   3C,F
0EC6:  BTFSS  03.2
0EC7:  GOTO   6CE
0EC8:  INCF   3D,F
0EC9:  BTFSS  03.2
0ECA:  GOTO   6CE
0ECB:  INCF   3E,F
0ECC:  BTFSC  03.2
0ECD:  INCF   3F,F
0ECE:  BTFSC  3B.0
0ECF:  GOTO   5DC
0ED0:  BTFSC  3B.1
0ED1:  GOTO   61E
0ED2:  BTFSC  3B.2
0ED3:  GOTO   654
0ED4:  GOTO   683
0ED5:  MOVF   00,W
0ED6:  ADDWF  3D,F
0ED7:  BTFSS  03.0
0ED8:  GOTO   6DF
0ED9:  INCF   3E,F
0EDA:  BTFSS  03.2
0EDB:  GOTO   6DF
0EDC:  INCF   3F,F
0EDD:  BTFSC  03.2
0EDE:  BSF    39.0
0EDF:  DECF   04,F
0EE0:  MOVF   00,W
0EE1:  ADDWF  3E,F
0EE2:  BTFSS  03.0
0EE3:  GOTO   6E7
0EE4:  INCF   3F,F
0EE5:  BTFSC  03.2
0EE6:  BSF    39.0
0EE7:  DECF   04,F
0EE8:  MOVF   00,W
0EE9:  BTFSS  00.7
0EEA:  XORLW  80
0EEB:  ADDWF  3F,F
0EEC:  BTFSC  03.0
0EED:  BSF    39.0
0EEE:  BTFSC  3B.4
0EEF:  GOTO   5E3
0EF0:  BTFSC  3B.5
0EF1:  GOTO   625
0EF2:  GOTO   65B
0EF3:  BCF    03.6
0EF4:  RETURN
*
0FD5:  MOVF   00,F
0FD6:  BTFSC  03.2
0FD7:  GOTO   7F2
0FD8:  BSF    03.6
0FD9:  CLRF   28
0FDA:  MOVF   04,W
0FDB:  MOVWF  27
0FDC:  BCF    28.0
0FDD:  BTFSC  03.7
0FDE:  BSF    28.0
0FDF:  MOVF   00,W
0FE0:  BCF    03.6
0FE1:  BTFSS  0C.4
0FE2:  GOTO   7E1
0FE3:  MOVWF  19
0FE4:  BSF    03.6
0FE5:  MOVF   27,W
0FE6:  MOVWF  04
0FE7:  BCF    03.7
0FE8:  BTFSC  28.0
0FE9:  BSF    03.7
0FEA:  INCF   04,F
0FEB:  BTFSS  03.2
0FEC:  GOTO   7F0
0FED:  BCF    03.6
0FEE:  INCF   05,F
0FEF:  BSF    03.6
0FF0:  BCF    03.6
0FF1:  GOTO   7D5
0FF2:  BCF    0A.3
0FF3:  BSF    0A.4
0FF4:  GOTO   448 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4000000) 
*
025F:  MOVLW  47
0260:  MOVWF  04
0261:  BSF    03.7
0262:  MOVF   00,W
0263:  BTFSC  03.2
0264:  GOTO   273
0265:  MOVLW  01
0266:  MOVWF  78
0267:  CLRF   77
0268:  DECFSZ 77,F
0269:  GOTO   268
026A:  DECFSZ 78,F
026B:  GOTO   267
026C:  MOVLW  4A
026D:  MOVWF  77
026E:  DECFSZ 77,F
026F:  GOTO   26E
0270:  GOTO   271
0271:  DECFSZ 00,F
0272:  GOTO   265
0273:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7, bits=8, parity=N) 
....................  
.................... #fuses XT, NOWDT,NOPROTECT,NOLVP 
.................... #include <HDM64GS12.c> //Manejo del display gráfico 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B0   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B1   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B2   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B4   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B5   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C0   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    unsigned int8 left[512]; 
....................    unsigned int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
0A41:  BCF    28.0
0A42:  MOVF   28,W
0A43:  BSF    03.5
0A44:  MOVWF  07
0A45:  BCF    03.5
0A46:  BSF    07.0
....................    output_low(GLCD_E); 
0A47:  BSF    03.5
0A48:  BCF    06.5
0A49:  BCF    03.5
0A4A:  BCF    06.5
....................    output_low(GLCD_CS1); 
0A4B:  BSF    03.5
0A4C:  BCF    06.0
0A4D:  BCF    03.5
0A4E:  BCF    06.0
....................    output_low(GLCD_CS2); 
0A4F:  BSF    03.5
0A50:  BCF    06.1
0A51:  BCF    03.5
0A52:  BCF    06.1
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
0A53:  BSF    03.5
0A54:  BCF    06.2
0A55:  BCF    03.5
0A56:  BCF    06.2
0A57:  CLRF   27
0A58:  BTFSC  0B.7
0A59:  BSF    27.7
0A5A:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
0A5B:  BSF    03.5
0A5C:  BSF    03.6
0A5D:  CLRF   1F
0A5E:  MOVLW  C0
0A5F:  MOVWF  20
0A60:  BCF    0A.3
0A61:  BCF    03.5
0A62:  BCF    03.6
0A63:  CALL   53C
0A64:  BSF    0A.3
0A65:  BTFSC  27.7
0A66:  BSF    0B.7
0A67:  CLRF   27
0A68:  BTFSC  0B.7
0A69:  BSF    27.7
0A6A:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
0A6B:  MOVLW  01
0A6C:  BSF    03.5
0A6D:  BSF    03.6
0A6E:  MOVWF  1F
0A6F:  MOVLW  C0
0A70:  MOVWF  20
0A71:  BCF    0A.3
0A72:  BCF    03.5
0A73:  BCF    03.6
0A74:  CALL   53C
0A75:  BSF    0A.3
0A76:  BTFSC  27.7
0A77:  BSF    0B.7
0A78:  CLRF   27
0A79:  BTFSC  0B.7
0A7A:  BSF    27.7
0A7B:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
0A7C:  BSF    03.5
0A7D:  BSF    03.6
0A7E:  CLRF   1F
0A7F:  MOVLW  40
0A80:  MOVWF  20
0A81:  BCF    0A.3
0A82:  BCF    03.5
0A83:  BCF    03.6
0A84:  CALL   53C
0A85:  BSF    0A.3
0A86:  BTFSC  27.7
0A87:  BSF    0B.7
0A88:  CLRF   27
0A89:  BTFSC  0B.7
0A8A:  BSF    27.7
0A8B:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
0A8C:  MOVLW  01
0A8D:  BSF    03.5
0A8E:  BSF    03.6
0A8F:  MOVWF  1F
0A90:  MOVLW  40
0A91:  MOVWF  20
0A92:  BCF    0A.3
0A93:  BCF    03.5
0A94:  BCF    03.6
0A95:  CALL   53C
0A96:  BSF    0A.3
0A97:  BTFSC  27.7
0A98:  BSF    0B.7
0A99:  CLRF   27
0A9A:  BTFSC  0B.7
0A9B:  BSF    27.7
0A9C:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
0A9D:  BSF    03.5
0A9E:  BSF    03.6
0A9F:  CLRF   1F
0AA0:  MOVLW  B8
0AA1:  MOVWF  20
0AA2:  BCF    0A.3
0AA3:  BCF    03.5
0AA4:  BCF    03.6
0AA5:  CALL   53C
0AA6:  BSF    0A.3
0AA7:  BTFSC  27.7
0AA8:  BSF    0B.7
0AA9:  CLRF   27
0AAA:  BTFSC  0B.7
0AAB:  BSF    27.7
0AAC:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
0AAD:  MOVLW  01
0AAE:  BSF    03.5
0AAF:  BSF    03.6
0AB0:  MOVWF  1F
0AB1:  MOVLW  B8
0AB2:  MOVWF  20
0AB3:  BCF    0A.3
0AB4:  BCF    03.5
0AB5:  BCF    03.6
0AB6:  CALL   53C
0AB7:  BSF    0A.3
0AB8:  BTFSC  27.7
0AB9:  BSF    0B.7
....................  
....................    if(mode == ON) 
0ABA:  BSF    03.6
0ABB:  DECFSZ 27,W
0ABC:  GOTO   2E1
0ABD:  BCF    03.6
0ABE:  CLRF   27
0ABF:  BTFSC  0B.7
0AC0:  BSF    27.7
0AC1:  BCF    0B.7
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
0AC2:  BSF    03.5
0AC3:  BSF    03.6
0AC4:  CLRF   1F
0AC5:  MOVLW  3F
0AC6:  MOVWF  20
0AC7:  BCF    0A.3
0AC8:  BCF    03.5
0AC9:  BCF    03.6
0ACA:  CALL   53C
0ACB:  BSF    0A.3
0ACC:  BTFSC  27.7
0ACD:  BSF    0B.7
0ACE:  CLRF   27
0ACF:  BTFSC  0B.7
0AD0:  BSF    27.7
0AD1:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
0AD2:  MOVLW  01
0AD3:  BSF    03.5
0AD4:  BSF    03.6
0AD5:  MOVWF  1F
0AD6:  MOVLW  3F
0AD7:  MOVWF  20
0AD8:  BCF    0A.3
0AD9:  BCF    03.5
0ADA:  BCF    03.6
0ADB:  CALL   53C
0ADC:  BSF    0A.3
0ADD:  BTFSC  27.7
0ADE:  BSF    0B.7
....................    } 
0ADF:  GOTO   303
0AE0:  BSF    03.6
0AE1:  BCF    03.6
0AE2:  CLRF   27
0AE3:  BTFSC  0B.7
0AE4:  BSF    27.7
0AE5:  BCF    0B.7
....................    else 
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
0AE6:  BSF    03.5
0AE7:  BSF    03.6
0AE8:  CLRF   1F
0AE9:  MOVLW  3E
0AEA:  MOVWF  20
0AEB:  BCF    0A.3
0AEC:  BCF    03.5
0AED:  BCF    03.6
0AEE:  CALL   53C
0AEF:  BSF    0A.3
0AF0:  BTFSC  27.7
0AF1:  BSF    0B.7
0AF2:  CLRF   27
0AF3:  BTFSC  0B.7
0AF4:  BSF    27.7
0AF5:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
0AF6:  MOVLW  01
0AF7:  BSF    03.5
0AF8:  BSF    03.6
0AF9:  MOVWF  1F
0AFA:  MOVLW  3E
0AFB:  MOVWF  20
0AFC:  BCF    0A.3
0AFD:  BCF    03.5
0AFE:  BCF    03.6
0AFF:  CALL   53C
0B00:  BSF    0A.3
0B01:  BTFSC  27.7
0B02:  BSF    0B.7
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
0B03:  BSF    03.6
0B04:  CLRF   28
....................  
....................    #ifdef FAST_GLCD 
*
0BC2:  BCF    03.6
0BC3:  BCF    0A.3
0BC4:  BSF    0A.4
0BC5:  GOTO   03F (RETURN)
....................    glcd_update(); 
....................    #endif 
.................... } 
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    unsigned int8 i, j; 
....................    unsigned int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
*
05A4:  BSF    03.5
05A5:  BSF    03.6
05A6:  BCF    1C.0
.................... { 
....................    unsigned int8* p; 
....................    unsigned int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
05A7:  MOVF   18,W
05A8:  SUBLW  3F
05A9:  BTFSC  03.0
05AA:  GOTO   5AE
....................    { 
....................       x -= 64; 
05AB:  MOVLW  40
05AC:  SUBWF  18,F
....................       side = GLCD_RIGHT; 
05AD:  BSF    1C.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
05AE:  BCF    03.6
05AF:  BCF    06.2
05B0:  BCF    03.5
05B1:  BCF    06.2
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
05B2:  BSF    03.5
05B3:  BSF    03.6
05B4:  BCF    18.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
05B5:  BSF    18.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
05B6:  MOVLW  00
05B7:  BTFSC  1C.0
05B8:  MOVLW  01
05B9:  MOVWF  1D
05BA:  MOVWF  1F
05BB:  MOVF   18,W
05BC:  MOVWF  20
05BD:  BCF    03.5
05BE:  BCF    03.6
05BF:  CALL   53C
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
05C0:  MOVLW  00
05C1:  BSF    03.5
05C2:  BSF    03.6
05C3:  BTFSC  1C.0
05C4:  MOVLW  01
05C5:  MOVWF  1D
05C6:  RRF    19,W
05C7:  MOVWF  77
05C8:  RRF    77,F
05C9:  RRF    77,F
05CA:  MOVLW  1F
05CB:  ANDWF  77,F
05CC:  MOVF   77,W
05CD:  ANDLW  BF
05CE:  IORLW  B8
05CF:  MOVWF  1E
05D0:  MOVF   1D,W
05D1:  MOVWF  1F
05D2:  MOVF   1E,W
05D3:  MOVWF  20
05D4:  BCF    03.5
05D5:  BCF    03.6
05D6:  CALL   53C
....................    output_high(GLCD_DI);                        // Set for data 
05D7:  BSF    03.5
05D8:  BCF    06.2
05D9:  BCF    03.5
05DA:  BSF    06.2
....................    glcd_readByte(side);                         // Need two reads to get data 
05DB:  MOVLW  00
05DC:  BSF    03.5
05DD:  BSF    03.6
05DE:  BTFSC  1C.0
05DF:  MOVLW  01
05E0:  MOVWF  1D
05E1:  MOVWF  1E
05E2:  BCF    03.5
05E3:  BCF    03.6
05E4:  CALL   56D
....................    data = glcd_readByte(side);                  //  at new address 
05E5:  MOVLW  00
05E6:  BSF    03.5
05E7:  BSF    03.6
05E8:  BTFSC  1C.0
05E9:  MOVLW  01
05EA:  MOVWF  1D
05EB:  MOVWF  1E
05EC:  BCF    03.5
05ED:  BCF    03.6
05EE:  CALL   56D
05EF:  MOVF   78,W
05F0:  BSF    03.5
05F1:  BSF    03.6
05F2:  MOVWF  1B
....................  
....................    if(color == ON) 
05F3:  DECFSZ 1A,W
05F4:  GOTO   605
....................       bit_set(data, y%8);        // Turn the pixel on 
05F5:  MOVF   19,W
05F6:  ANDLW  07
05F7:  MOVWF  1D
05F8:  MOVLW  01
05F9:  MOVWF  77
05FA:  MOVF   1D,W
05FB:  MOVWF  78
05FC:  BTFSC  03.2
05FD:  GOTO   602
05FE:  BCF    03.0
05FF:  RLF    77,F
0600:  DECFSZ 78,F
0601:  GOTO   5FE
0602:  MOVF   77,W
0603:  IORWF  1B,F
0604:  GOTO   615
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
0605:  MOVF   19,W
0606:  ANDLW  07
0607:  MOVWF  1D
0608:  MOVLW  01
0609:  MOVWF  77
060A:  MOVF   1D,W
060B:  MOVWF  78
060C:  BTFSC  03.2
060D:  GOTO   612
060E:  BCF    03.0
060F:  RLF    77,F
0610:  DECFSZ 78,F
0611:  GOTO   60E
0612:  MOVF   77,W
0613:  XORLW  FF
0614:  ANDWF  1B,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
0615:  BCF    03.6
0616:  BCF    06.2
0617:  BCF    03.5
0618:  BCF    06.2
....................    glcd_writeByte(side, x);      // Set the horizontal address 
0619:  MOVLW  00
061A:  BSF    03.5
061B:  BSF    03.6
061C:  BTFSC  1C.0
061D:  MOVLW  01
061E:  MOVWF  1D
061F:  MOVWF  1F
0620:  MOVF   18,W
0621:  MOVWF  20
0622:  BCF    03.5
0623:  BCF    03.6
0624:  CALL   53C
....................    output_high(GLCD_DI);         // Set for data 
0625:  BSF    03.5
0626:  BCF    06.2
0627:  BCF    03.5
0628:  BSF    06.2
....................    glcd_writeByte(side, data);   // Write the pixel data 
0629:  MOVLW  00
062A:  BSF    03.5
062B:  BSF    03.6
062C:  BTFSC  1C.0
062D:  MOVLW  01
062E:  MOVWF  1D
062F:  MOVWF  1F
0630:  MOVF   1B,W
0631:  MOVWF  20
0632:  BCF    03.5
0633:  BCF    03.6
0634:  CALL   53C
0635:  RETURN
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    unsigned int8  data; 
....................    unsigned int8  *p1, *p2; 
....................    unsigned int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................    	*p1++ = data; 
....................    	*p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    unsigned int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
0B05:  CLRF   29
0B06:  MOVF   29,W
0B07:  SUBLW  07
0B08:  BTFSS  03.0
0B09:  GOTO   3C2
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
0B0A:  BSF    03.5
0B0B:  BCF    03.6
0B0C:  BCF    06.2
0B0D:  BCF    03.5
0B0E:  BCF    06.2
0B0F:  CLRF   27
0B10:  BTFSC  0B.7
0B11:  BSF    27.7
0B12:  BCF    0B.7
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
0B13:  BSF    03.5
0B14:  BSF    03.6
0B15:  CLRF   1F
0B16:  MOVLW  40
0B17:  MOVWF  20
0B18:  BCF    0A.3
0B19:  BCF    03.5
0B1A:  BCF    03.6
0B1B:  CALL   53C
0B1C:  BSF    0A.3
0B1D:  BTFSC  27.7
0B1E:  BSF    0B.7
0B1F:  CLRF   27
0B20:  BTFSC  0B.7
0B21:  BSF    27.7
0B22:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
0B23:  MOVLW  01
0B24:  BSF    03.5
0B25:  BSF    03.6
0B26:  MOVWF  1F
0B27:  MOVLW  40
0B28:  MOVWF  20
0B29:  BCF    0A.3
0B2A:  BCF    03.5
0B2B:  BCF    03.6
0B2C:  CALL   53C
0B2D:  BSF    0A.3
0B2E:  BTFSC  27.7
0B2F:  BSF    0B.7
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
0B30:  BSF    03.6
0B31:  MOVF   29,W
0B32:  IORLW  B8
0B33:  MOVWF  2B
0B34:  BCF    03.6
0B35:  CLRF   27
0B36:  BTFSC  0B.7
0B37:  BSF    27.7
0B38:  BCF    0B.7
0B39:  BSF    03.5
0B3A:  BSF    03.6
0B3B:  CLRF   1F
0B3C:  BCF    03.5
0B3D:  MOVF   2B,W
0B3E:  BSF    03.5
0B3F:  MOVWF  20
0B40:  BCF    0A.3
0B41:  BCF    03.5
0B42:  BCF    03.6
0B43:  CALL   53C
0B44:  BSF    0A.3
0B45:  BTFSC  27.7
0B46:  BSF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
0B47:  BSF    03.6
0B48:  MOVF   29,W
0B49:  IORLW  B8
0B4A:  MOVWF  2B
0B4B:  BCF    03.6
0B4C:  CLRF   27
0B4D:  BTFSC  0B.7
0B4E:  BSF    27.7
0B4F:  BCF    0B.7
0B50:  MOVLW  01
0B51:  BSF    03.5
0B52:  BSF    03.6
0B53:  MOVWF  1F
0B54:  BCF    03.5
0B55:  MOVF   2B,W
0B56:  BSF    03.5
0B57:  MOVWF  20
0B58:  BCF    0A.3
0B59:  BCF    03.5
0B5A:  BCF    03.6
0B5B:  CALL   53C
0B5C:  BSF    0A.3
0B5D:  BTFSC  27.7
0B5E:  BSF    0B.7
....................       output_high(GLCD_DI);                     // Set for data 
0B5F:  BSF    03.5
0B60:  BCF    06.2
0B61:  BCF    03.5
0B62:  BSF    06.2
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
0B63:  BSF    03.6
0B64:  CLRF   2A
0B65:  MOVF   2A,W
0B66:  SUBLW  3F
0B67:  BTFSS  03.0
0B68:  GOTO   3C0
0B69:  BCF    03.6
0B6A:  CLRF   27
0B6B:  BTFSC  0B.7
0B6C:  BSF    27.7
0B6D:  BCF    0B.7
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
0B6E:  MOVLW  FF
0B6F:  BSF    03.5
0B70:  BSF    03.6
0B71:  MOVWF  18
0B72:  BCF    03.5
0B73:  MOVF   28,W
0B74:  BSF    03.5
0B75:  MOVWF  19
0B76:  BCF    0A.3
0B77:  BCF    03.5
0B78:  BCF    03.6
0B79:  CALL   513
0B7A:  BSF    0A.3
0B7B:  BTFSC  27.7
0B7C:  BSF    0B.7
0B7D:  MOVF   78,W
0B7E:  BSF    03.6
0B7F:  MOVWF  2B
0B80:  BCF    03.6
0B81:  CLRF   27
0B82:  BTFSC  0B.7
0B83:  BSF    27.7
0B84:  BCF    0B.7
0B85:  BSF    03.5
0B86:  BSF    03.6
0B87:  CLRF   1F
0B88:  BCF    03.5
0B89:  MOVF   2B,W
0B8A:  BSF    03.5
0B8B:  MOVWF  20
0B8C:  BCF    0A.3
0B8D:  BCF    03.5
0B8E:  BCF    03.6
0B8F:  CALL   53C
0B90:  BSF    0A.3
0B91:  BTFSC  27.7
0B92:  BSF    0B.7
0B93:  CLRF   27
0B94:  BTFSC  0B.7
0B95:  BSF    27.7
0B96:  BCF    0B.7
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
0B97:  MOVLW  FF
0B98:  BSF    03.5
0B99:  BSF    03.6
0B9A:  MOVWF  18
0B9B:  BCF    03.5
0B9C:  MOVF   28,W
0B9D:  BSF    03.5
0B9E:  MOVWF  19
0B9F:  BCF    0A.3
0BA0:  BCF    03.5
0BA1:  BCF    03.6
0BA2:  CALL   513
0BA3:  BSF    0A.3
0BA4:  BTFSC  27.7
0BA5:  BSF    0B.7
0BA6:  MOVF   78,W
0BA7:  BSF    03.6
0BA8:  MOVWF  2B
0BA9:  BCF    03.6
0BAA:  CLRF   27
0BAB:  BTFSC  0B.7
0BAC:  BSF    27.7
0BAD:  BCF    0B.7
0BAE:  MOVLW  01
0BAF:  BSF    03.5
0BB0:  BSF    03.6
0BB1:  MOVWF  1F
0BB2:  BCF    03.5
0BB3:  MOVF   2B,W
0BB4:  BSF    03.5
0BB5:  MOVWF  20
0BB6:  BCF    0A.3
0BB7:  BCF    03.5
0BB8:  BCF    03.6
0BB9:  CALL   53C
0BBA:  BSF    0A.3
0BBB:  BTFSC  27.7
0BBC:  BSF    0B.7
0BBD:  BSF    03.6
0BBE:  INCF   2A,F
0BBF:  GOTO   365
....................       } 
0BC0:  INCF   29,F
0BC1:  GOTO   306
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    set_tris_d(0x00); 
*
053C:  MOVLW  00
053D:  BSF    03.5
053E:  MOVWF  08
....................     
....................    output_low(GLCD_RW);       // Set for writing 
053F:  BCF    06.4
0540:  BCF    03.5
0541:  BCF    06.4
....................  
.................... 	 if(side)                   // Choose which side to write to 
0542:  BSF    03.5
0543:  BSF    03.6
0544:  MOVF   1F,F
0545:  BTFSC  03.2
0546:  GOTO   54E
....................       output_high(GLCD_CS2); 
0547:  BCF    03.6
0548:  BCF    06.1
0549:  BCF    03.5
054A:  BSF    06.1
054B:  GOTO   552
054C:  BSF    03.5
054D:  BSF    03.6
....................    else 
....................       output_high(GLCD_CS1); 
054E:  BCF    03.6
054F:  BCF    06.0
0550:  BCF    03.5
0551:  BSF    06.0
....................  
.................... 	 delay_us(1); 
0552:  NOP
....................  
....................    output_d(data);            // Put the data on the port 
0553:  BSF    03.5
0554:  CLRF   08
0555:  BSF    03.6
0556:  MOVF   20,W
0557:  BCF    03.5
0558:  BCF    03.6
0559:  MOVWF  08
....................    delay_us(1); 
055A:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
055B:  BSF    03.5
055C:  BCF    06.5
055D:  BCF    03.5
055E:  BSF    06.5
....................    delay_us(1); 
055F:  NOP
....................    output_low(GLCD_E); 
0560:  BSF    03.5
0561:  BCF    06.5
0562:  BCF    03.5
0563:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
0564:  BSF    03.5
0565:  BCF    06.0
0566:  BCF    03.5
0567:  BCF    06.0
....................    output_low(GLCD_CS2); 
0568:  BSF    03.5
0569:  BCF    06.1
056A:  BCF    03.5
056B:  BCF    06.1
056C:  RETURN
.................... } 
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
056D:  MOVLW  FF
056E:  BSF    03.5
056F:  MOVWF  08
....................    output_high(GLCD_RW);      // Set for reading 
0570:  BCF    06.4
0571:  BCF    03.5
0572:  BSF    06.4
....................  
....................    if(side)                   // Choose which side to write to 
0573:  BSF    03.5
0574:  BSF    03.6
0575:  MOVF   1E,F
0576:  BTFSC  03.2
0577:  GOTO   57F
....................       output_high(GLCD_CS2); 
0578:  BCF    03.6
0579:  BCF    06.1
057A:  BCF    03.5
057B:  BSF    06.1
057C:  GOTO   583
057D:  BSF    03.5
057E:  BSF    03.6
....................    else 
....................       output_high(GLCD_CS1); 
057F:  BCF    03.6
0580:  BCF    06.0
0581:  BCF    03.5
0582:  BSF    06.0
....................  
....................    delay_us(1); 
0583:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
0584:  BSF    03.5
0585:  BCF    06.5
0586:  BCF    03.5
0587:  BSF    06.5
....................    delay_us(1); 
0588:  NOP
....................    data = input_d();          // Get the data from the display's output register 
0589:  MOVLW  FF
058A:  BSF    03.5
058B:  MOVWF  08
058C:  BCF    03.5
058D:  MOVF   08,W
058E:  BSF    03.5
058F:  BSF    03.6
0590:  MOVWF  1F
....................    output_low(GLCD_E); 
0591:  BCF    03.6
0592:  BCF    06.5
0593:  BCF    03.5
0594:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
0595:  BSF    03.5
0596:  BCF    06.0
0597:  BCF    03.5
0598:  BCF    06.0
....................    output_low(GLCD_CS2); 
0599:  BSF    03.5
059A:  BCF    06.1
059B:  BCF    03.5
059C:  BCF    06.1
....................    return data;               // Return the read data 
059D:  BSF    03.5
059E:  BSF    03.6
059F:  MOVF   1F,W
05A0:  MOVWF  78
05A1:  BCF    03.5
05A2:  BCF    03.6
05A3:  RETURN
.................... } 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> //Funciones para dibujar y escribir en el display 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
0BC6:  MOVLW  01
0BC7:  BSF    03.6
0BC8:  MOVWF  37
0BC9:  MOVWF  38
0BCA:  CLRF   3D
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0BCB:  MOVF   2E,W
0BCC:  SUBWF  30,W
0BCD:  MOVWF  3E
0BCE:  MOVF   3E,W
0BCF:  BTFSS  3E.7
0BD0:  GOTO   3D3
0BD1:  MOVF   3E,W
0BD2:  SUBLW  00
0BD3:  CLRF   7A
0BD4:  MOVWF  35
0BD5:  MOVF   7A,W
0BD6:  MOVWF  36
....................    dy = abs((signed int8)(y2 - y1)); 
0BD7:  MOVF   2F,W
0BD8:  SUBWF  31,W
0BD9:  MOVWF  3E
0BDA:  MOVF   3E,W
0BDB:  BTFSS  3E.7
0BDC:  GOTO   3DF
0BDD:  MOVF   3E,W
0BDE:  SUBLW  00
0BDF:  CLRF   7A
0BE0:  MOVWF  33
0BE1:  MOVF   7A,W
0BE2:  MOVWF  34
....................    #endif 
....................  
....................    if(x1 > x2) 
0BE3:  MOVF   2E,W
0BE4:  SUBWF  30,W
0BE5:  BTFSC  03.0
0BE6:  GOTO   3E9
....................       addx = -1; 
0BE7:  MOVLW  FF
0BE8:  MOVWF  37
....................    if(y1 > y2) 
0BE9:  MOVF   2F,W
0BEA:  SUBWF  31,W
0BEB:  BTFSC  03.0
0BEC:  GOTO   3EF
....................       addy = -1; 
0BED:  MOVLW  FF
0BEE:  MOVWF  38
....................  
....................    if(dx >= dy) 
0BEF:  MOVF   34,W
0BF0:  SUBWF  36,W
0BF1:  BTFSS  03.0
0BF2:  GOTO   44D
0BF3:  BTFSS  03.2
0BF4:  GOTO   3F9
0BF5:  MOVF   33,W
0BF6:  SUBWF  35,W
0BF7:  BTFSS  03.0
0BF8:  GOTO   44D
....................    { 
....................       dy *= 2; 
0BF9:  BCF    03.0
0BFA:  RLF    33,F
0BFB:  RLF    34,F
....................       P = dy - dx; 
0BFC:  MOVF   35,W
0BFD:  SUBWF  33,W
0BFE:  MOVWF  77
0BFF:  MOVF   34,W
0C00:  MOVWF  7A
0C01:  MOVF   36,W
0C02:  BTFSS  03.0
0C03:  INCFSZ 36,W
0C04:  SUBWF  7A,F
0C05:  MOVF   77,W
0C06:  MOVWF  39
0C07:  MOVF   7A,W
0C08:  MOVWF  3A
....................       diff = P - dx; 
0C09:  MOVF   35,W
0C0A:  SUBWF  39,W
0C0B:  MOVWF  3B
0C0C:  MOVF   3A,W
0C0D:  MOVWF  3C
0C0E:  MOVF   36,W
0C0F:  BTFSS  03.0
0C10:  INCFSZ 36,W
0C11:  SUBWF  3C,F
....................  
....................       for(; i<=dx; ++i) 
0C12:  MOVF   36,F
0C13:  BTFSS  03.2
0C14:  GOTO   419
0C15:  MOVF   3D,W
0C16:  SUBWF  35,W
0C17:  BTFSS  03.0
0C18:  GOTO   44C
0C19:  BCF    03.6
0C1A:  CLRF   27
0C1B:  BTFSC  0B.7
0C1C:  BSF    27.7
0C1D:  BCF    0B.7
....................       { 
....................          glcd_pixel(x1, y1, color); 
0C1E:  BSF    03.6
0C1F:  MOVF   2E,W
0C20:  BSF    03.5
0C21:  MOVWF  18
0C22:  BCF    03.5
0C23:  MOVF   2F,W
0C24:  BSF    03.5
0C25:  MOVWF  19
0C26:  BCF    03.5
0C27:  MOVF   32,W
0C28:  BSF    03.5
0C29:  MOVWF  1A
0C2A:  BCF    0A.3
0C2B:  BCF    03.5
0C2C:  BCF    03.6
0C2D:  CALL   5A4
0C2E:  BSF    0A.3
0C2F:  BTFSC  27.7
0C30:  BSF    0B.7
....................  
....................          if(P < 0) 
0C31:  BSF    03.6
0C32:  BTFSS  3A.7
0C33:  GOTO   43E
....................          { 
....................             P  += dy; 
0C34:  MOVF   33,W
0C35:  ADDWF  39,F
0C36:  MOVF   34,W
0C37:  BTFSC  03.0
0C38:  INCFSZ 34,W
0C39:  ADDWF  3A,F
....................             x1 += addx; 
0C3A:  MOVF   37,W
0C3B:  ADDWF  2E,W
0C3C:  MOVWF  2E
....................          } 
0C3D:  GOTO   44A
....................          else 
....................          { 
....................             P  += diff; 
0C3E:  MOVF   3B,W
0C3F:  ADDWF  39,F
0C40:  MOVF   3C,W
0C41:  BTFSC  03.0
0C42:  INCFSZ 3C,W
0C43:  ADDWF  3A,F
....................             x1 += addx; 
0C44:  MOVF   37,W
0C45:  ADDWF  2E,W
0C46:  MOVWF  2E
....................             y1 += addy; 
0C47:  MOVF   38,W
0C48:  ADDWF  2F,W
0C49:  MOVWF  2F
....................          } 
0C4A:  INCF   3D,F
0C4B:  GOTO   412
....................       } 
....................    } 
0C4C:  GOTO   4A0
....................    else 
....................    { 
....................       dx *= 2; 
0C4D:  BCF    03.0
0C4E:  RLF    35,F
0C4F:  RLF    36,F
....................       P = dx - dy; 
0C50:  MOVF   33,W
0C51:  SUBWF  35,W
0C52:  MOVWF  77
0C53:  MOVF   36,W
0C54:  MOVWF  7A
0C55:  MOVF   34,W
0C56:  BTFSS  03.0
0C57:  INCFSZ 34,W
0C58:  SUBWF  7A,F
0C59:  MOVF   77,W
0C5A:  MOVWF  39
0C5B:  MOVF   7A,W
0C5C:  MOVWF  3A
....................       diff = P - dy; 
0C5D:  MOVF   33,W
0C5E:  SUBWF  39,W
0C5F:  MOVWF  3B
0C60:  MOVF   3A,W
0C61:  MOVWF  3C
0C62:  MOVF   34,W
0C63:  BTFSS  03.0
0C64:  INCFSZ 34,W
0C65:  SUBWF  3C,F
....................  
....................       for(; i<=dy; ++i) 
0C66:  MOVF   34,F
0C67:  BTFSS  03.2
0C68:  GOTO   46D
0C69:  MOVF   3D,W
0C6A:  SUBWF  33,W
0C6B:  BTFSS  03.0
0C6C:  GOTO   4A0
0C6D:  BCF    03.6
0C6E:  CLRF   27
0C6F:  BTFSC  0B.7
0C70:  BSF    27.7
0C71:  BCF    0B.7
....................       { 
....................          glcd_pixel(x1, y1, color); 
0C72:  BSF    03.6
0C73:  MOVF   2E,W
0C74:  BSF    03.5
0C75:  MOVWF  18
0C76:  BCF    03.5
0C77:  MOVF   2F,W
0C78:  BSF    03.5
0C79:  MOVWF  19
0C7A:  BCF    03.5
0C7B:  MOVF   32,W
0C7C:  BSF    03.5
0C7D:  MOVWF  1A
0C7E:  BCF    0A.3
0C7F:  BCF    03.5
0C80:  BCF    03.6
0C81:  CALL   5A4
0C82:  BSF    0A.3
0C83:  BTFSC  27.7
0C84:  BSF    0B.7
....................  
....................          if(P < 0) 
0C85:  BSF    03.6
0C86:  BTFSS  3A.7
0C87:  GOTO   492
....................          { 
....................             P  += dx; 
0C88:  MOVF   35,W
0C89:  ADDWF  39,F
0C8A:  MOVF   36,W
0C8B:  BTFSC  03.0
0C8C:  INCFSZ 36,W
0C8D:  ADDWF  3A,F
....................             y1 += addy; 
0C8E:  MOVF   38,W
0C8F:  ADDWF  2F,W
0C90:  MOVWF  2F
....................          } 
0C91:  GOTO   49E
....................          else 
....................          { 
....................             P  += diff; 
0C92:  MOVF   3B,W
0C93:  ADDWF  39,F
0C94:  MOVF   3C,W
0C95:  BTFSC  03.0
0C96:  INCFSZ 3C,W
0C97:  ADDWF  3A,F
....................             x1 += addx; 
0C98:  MOVF   37,W
0C99:  ADDWF  2E,W
0C9A:  MOVWF  2E
....................             y1 += addy; 
0C9B:  MOVF   38,W
0C9C:  ADDWF  2F,W
0C9D:  MOVWF  2F
....................          } 
0C9E:  INCF   3D,F
0C9F:  GOTO   466
....................       } 
....................    } 
0CA0:  BCF    03.6
0CA1:  RETURN
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
0636:  BSF    03.6
0637:  MOVF   6A,W
0638:  MOVWF  7A
0639:  MOVF   69,W
063A:  MOVWF  04
063B:  BCF    03.7
063C:  BTFSC  7A.0
063D:  BSF    03.7
063E:  MOVF   00,F
063F:  BTFSC  03.2
0640:  GOTO   756
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0641:  MOVF   6A,W
0642:  MOVWF  7A
0643:  MOVF   69,W
0644:  MOVWF  04
0645:  BCF    03.7
0646:  BTFSC  7A.0
0647:  BSF    03.7
0648:  MOVF   00,W
0649:  SUBLW  52
064A:  BTFSS  03.0
064B:  GOTO   676
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
064C:  MOVF   6A,W
064D:  MOVWF  7A
064E:  MOVF   69,W
064F:  MOVWF  04
0650:  BCF    03.7
0651:  BTFSC  7A.0
0652:  BSF    03.7
0653:  MOVLW  20
0654:  SUBWF  00,W
0655:  BSF    03.5
0656:  MOVWF  17
0657:  MOVWF  18
0658:  MOVLW  05
0659:  MOVWF  19
065A:  BCF    03.5
065B:  BCF    03.6
065C:  CALL   513
065D:  MOVF   78,W
065E:  BSF    03.5
065F:  BSF    03.6
0660:  MOVWF  16
0661:  MOVWF  78
0662:  MOVLW  05
0663:  MOVWF  77
0664:  MOVLW  91
0665:  MOVWF  04
0666:  BSF    03.7
0667:  MOVF   78,W
0668:  BCF    03.5
0669:  BCF    03.6
066A:  CALL   048
066B:  MOVWF  00
066C:  INCF   78,F
066D:  INCF   04,F
066E:  DECFSZ 77,F
066F:  GOTO   671
0670:  GOTO   674
0671:  BSF    03.5
0672:  BSF    03.6
0673:  GOTO   667
0674:  GOTO   6B3
0675:  BSF    03.6
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
0676:  MOVF   6A,W
0677:  MOVWF  7A
0678:  MOVF   69,W
0679:  MOVWF  04
067A:  BCF    03.7
067B:  BTFSC  7A.0
067C:  BSF    03.7
067D:  MOVF   00,W
067E:  SUBLW  7E
067F:  BTFSS  03.0
0680:  GOTO   6AB
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
0681:  MOVF   6A,W
0682:  MOVWF  7A
0683:  MOVF   69,W
0684:  MOVWF  04
0685:  BCF    03.7
0686:  BTFSC  7A.0
0687:  BSF    03.7
0688:  MOVLW  53
0689:  SUBWF  00,W
068A:  BSF    03.5
068B:  MOVWF  17
068C:  MOVWF  18
068D:  MOVLW  05
068E:  MOVWF  19
068F:  BCF    03.5
0690:  BCF    03.6
0691:  CALL   513
0692:  MOVF   78,W
0693:  BSF    03.5
0694:  BSF    03.6
0695:  MOVWF  16
0696:  MOVWF  78
0697:  MOVLW  05
0698:  MOVWF  77
0699:  MOVLW  91
069A:  MOVWF  04
069B:  BSF    03.7
069C:  MOVF   78,W
069D:  BCF    03.5
069E:  BCF    03.6
069F:  CALL   14E
06A0:  MOVWF  00
06A1:  INCF   78,F
06A2:  INCF   04,F
06A3:  DECFSZ 77,F
06A4:  GOTO   6A6
06A5:  GOTO   6A9
06A6:  BSF    03.5
06A7:  BSF    03.6
06A8:  GOTO   69C
06A9:  GOTO   6B3
06AA:  BSF    03.6
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
06AB:  BSF    03.5
06AC:  CLRF   11
06AD:  CLRF   12
06AE:  CLRF   13
06AF:  CLRF   14
06B0:  CLRF   15
06B1:  BCF    03.5
06B2:  BCF    03.6
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
06B3:  BSF    03.6
06B4:  MOVF   6A,W
06B5:  MOVWF  7A
06B6:  MOVF   69,W
06B7:  MOVWF  04
06B8:  BCF    03.7
06B9:  BTFSC  7A.0
06BA:  BSF    03.7
06BB:  MOVF   00,W
06BC:  XORLW  0A
06BD:  BCF    03.6
06BE:  BTFSC  03.2
06BF:  GOTO   6C4
06C0:  XORLW  07
06C1:  BTFSC  03.2
06C2:  GOTO   6D5
06C3:  GOTO   6D9
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
06C4:  MOVLW  07
06C5:  BSF    03.5
06C6:  BSF    03.6
06C7:  MOVWF  18
06C8:  BCF    03.5
06C9:  MOVF   6B,W
06CA:  BSF    03.5
06CB:  MOVWF  19
06CC:  BCF    03.5
06CD:  BCF    03.6
06CE:  CALL   513
06CF:  MOVLW  01
06D0:  ADDWF  78,W
06D1:  BSF    03.6
06D2:  ADDWF  68,F
....................             continue; 
06D3:  GOTO   751
06D4:  BCF    03.6
....................          case '\r': 
....................             x = 0; 
06D5:  BSF    03.6
06D6:  CLRF   67
....................             continue; 
06D7:  GOTO   751
06D8:  BCF    03.6
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
06D9:  MOVLW  05
06DA:  BSF    03.5
06DB:  BSF    03.6
06DC:  MOVWF  18
06DD:  BCF    03.5
06DE:  MOVF   6B,W
06DF:  BSF    03.5
06E0:  MOVWF  19
06E1:  BCF    03.5
06E2:  BCF    03.6
06E3:  CALL   513
06E4:  MOVF   78,W
06E5:  BSF    03.6
06E6:  ADDWF  67,W
06E7:  SUBLW  7F
06E8:  BTFSC  03.0
06E9:  GOTO   6F9
....................       { 
....................          x = 0;                           // Set x at far left position 
06EA:  CLRF   67
....................          y += 7*size + 1;                 // Set y at next position down 
06EB:  MOVLW  07
06EC:  BSF    03.5
06ED:  MOVWF  18
06EE:  BCF    03.5
06EF:  MOVF   6B,W
06F0:  BSF    03.5
06F1:  MOVWF  19
06F2:  BCF    03.5
06F3:  BCF    03.6
06F4:  CALL   513
06F5:  MOVLW  01
06F6:  ADDWF  78,W
06F7:  BSF    03.6
06F8:  ADDWF  68,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
06F9:  CLRF   6D
06FA:  MOVF   6D,W
06FB:  SUBLW  04
06FC:  BTFSS  03.0
06FD:  GOTO   751
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
06FE:  CLRF   6E
06FF:  MOVF   6E,W
0700:  SUBLW  06
0701:  BTFSS  03.0
0702:  GOTO   74D
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
0703:  MOVLW  91
0704:  ADDWF  6D,W
0705:  MOVWF  04
0706:  BSF    03.7
0707:  MOVF   00,W
0708:  BSF    03.5
0709:  MOVWF  16
070A:  MOVWF  77
070B:  BCF    03.5
070C:  MOVF   6E,W
070D:  MOVWF  78
070E:  BTFSC  03.2
070F:  GOTO   714
0710:  BCF    03.0
0711:  RRF    77,F
0712:  DECFSZ 78,F
0713:  GOTO   710
0714:  BTFSS  77.0
0715:  GOTO   74B
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
0716:  CLRF   6F
0717:  MOVF   6B,W
0718:  SUBWF  6F,W
0719:  BTFSC  03.0
071A:  GOTO   74B
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
071B:  BSF    03.5
071C:  CLRF   10
071D:  BCF    03.5
071E:  MOVF   6B,W
071F:  BSF    03.5
0720:  SUBWF  10,W
0721:  BTFSC  03.0
0722:  GOTO   748
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
0723:  MOVF   10,W
0724:  BCF    03.5
0725:  ADDWF  67,W
0726:  BSF    03.5
0727:  MOVWF  16
0728:  BCF    03.5
0729:  MOVF   6E,W
072A:  BSF    03.5
072B:  MOVWF  18
072C:  BCF    03.5
072D:  MOVF   6B,W
072E:  BSF    03.5
072F:  MOVWF  19
0730:  BCF    03.5
0731:  BCF    03.6
0732:  CALL   513
0733:  MOVF   78,W
0734:  BSF    03.6
0735:  ADDWF  68,W
0736:  ADDWF  6F,W
0737:  BSF    03.5
0738:  MOVWF  17
0739:  MOVF   16,W
073A:  MOVWF  18
073B:  MOVF   17,W
073C:  MOVWF  19
073D:  BCF    03.5
073E:  MOVF   6C,W
073F:  BSF    03.5
0740:  MOVWF  1A
0741:  BCF    03.5
0742:  BCF    03.6
0743:  CALL   5A4
0744:  BSF    03.5
0745:  BSF    03.6
0746:  INCF   10,F
0747:  GOTO   71D
....................                   } 
0748:  BCF    03.5
0749:  INCF   6F,F
074A:  GOTO   717
....................                } 
....................             } 
074B:  INCF   6E,F
074C:  GOTO   6FF
....................          } 
074D:  INCF   6D,F
074E:  MOVF   6B,W
074F:  ADDWF  67,F
0750:  GOTO   6FA
....................       } 
0751:  INCF   69,F
0752:  BTFSC  03.2
0753:  INCF   6A,F
0754:  INCF   67,F
0755:  GOTO   637
....................    } 
0756:  BCF    03.6
0757:  RETURN
.................... } 
....................  
.................... #endif 
....................  
.................... //#include "sdcard.c" 
....................  
.................... #byte trisb=0x86 
....................  
.................... ///Defines 
....................  
.................... #define escala -2 //Escala negativa para que crezca hacia arriba. 
.................... #define limpiarGrafico limpiarPorcion(0,20,128,44) //Limpia el area del grafico 
.................... #define offset 120 //es el offset para la altura de la grafica 
.................... #define TMR1 0x0BDC //Este es el valor para 500ms en el timer1 (0,5s=(4/4000000)8(65536-TMR1))=>TMR1=3036 
.................... #define TMR0 0x40 //Este es el valor para 50ms en el timer0 
.................... #define nMediciones 20 //Numero de mediciones 
....................  
.................... ///Fin Defines 
....................  
.................... ///Variables Globales 
....................  
.................... int x=0; //Posicion inicial de x para graficar la temperatura 
.................... float y; //Temperatura anterior 
.................... float t; //Temperatura actual 
.................... float registro[nMediciones]; //registro de las ultimas nMediciones mediciones 
.................... int1 habilitarLectura=0; //Variable para habilitar o deshabilitar la captura de datos del sensor 
.................... char received = '\0'; 
.................... int ciclos=10; //Variable que cuenta los ciclos que debe hacer el timer0 antes de ejecutar su codigo 
.................... int ciclosT1=6; //Variable que cuenta los ciclos que debe hacer el timer1 antes de ejecutar su codigo 
....................  
.................... ///Fin Variables Globales 
....................  
.................... ///Funciones 
....................  
.................... void limpiarPorcion(int x1, int y1, int x2, int y2){ //(x1, y1) = posición del primer pixel. (x2, y2) = cantididad de pixeles hacia la derecha y hacia abajo 
....................    for(int i=x1;i<x1+x2;i++) 
*
0769:  BSF    03.6
076A:  MOVF   65,W
076B:  MOVWF  69
076C:  MOVF   67,W
076D:  ADDWF  65,W
076E:  SUBWF  69,W
076F:  BTFSC  03.0
0770:  GOTO   788
....................       for(int j=y1;j<y1+y2;j++) 
0771:  MOVF   66,W
0772:  MOVWF  6A
0773:  MOVF   68,W
0774:  ADDWF  66,W
0775:  SUBWF  6A,W
0776:  BTFSC  03.0
0777:  GOTO   786
....................          glcd_pixel(i, j, OFF); //Apagamos el pixel. 
0778:  MOVF   69,W
0779:  BSF    03.5
077A:  MOVWF  18
077B:  BCF    03.5
077C:  MOVF   6A,W
077D:  BSF    03.5
077E:  MOVWF  19
077F:  CLRF   1A
0780:  BCF    03.5
0781:  BCF    03.6
0782:  CALL   5A4
0783:  BSF    03.6
0784:  INCF   6A,F
0785:  GOTO   773
0786:  INCF   69,F
0787:  GOTO   76C
0788:  BCF    03.6
0789:  RETURN
.................... } 
....................  
.................... void nuevaLinea(float temp){ //Funcion para graficar las nuevas lineas de temperatura 
*
0EF5:  MOVLW  01
0EF6:  ADDWF  29,W
0EF7:  BSF    03.6
0EF8:  MOVWF  2B
....................    int x1=x+1; 
....................    if(x1>=128){ //Revisamos si sobrepasamos el tamaño de la pantalla 
0EF9:  MOVF   2B,W
0EFA:  SUBLW  7F
0EFB:  BTFSC  03.0
0EFC:  GOTO   714
0EFD:  BCF    03.6
0EFE:  CLRF   27
0EFF:  BTFSC  0B.7
0F00:  BSF    27.7
0F01:  BCF    0B.7
....................       limpiarGrafico; //Limpiamos el area del grafico 
0F02:  BSF    03.6
0F03:  CLRF   65
0F04:  MOVLW  14
0F05:  MOVWF  66
0F06:  MOVLW  80
0F07:  MOVWF  67
0F08:  MOVLW  2C
0F09:  MOVWF  68
0F0A:  BCF    0A.3
0F0B:  BCF    03.6
0F0C:  CALL   769
0F0D:  BSF    0A.3
0F0E:  BTFSC  27.7
0F0F:  BSF    0B.7
....................       x=0; 
0F10:  CLRF   29
....................       x1=1; 
0F11:  MOVLW  01
0F12:  BSF    03.6
0F13:  MOVWF  2B
0F14:  BCF    03.6
0F15:  CLRF   27
0F16:  BTFSC  0B.7
0F17:  BSF    27.7
0F18:  BCF    0B.7
....................    } 
....................    glcd_line(x, (y*escala)+offset, x1, (temp*escala)+offset, ON); //multiplicamos por la escala para que la grafica entre en el area del grafico. El offset esta explicado arriba 
0F19:  MOVF   2D,W
0F1A:  BSF    03.5
0F1B:  BSF    03.6
0F1C:  MOVWF  1B
0F1D:  BCF    03.5
0F1E:  BCF    03.6
0F1F:  MOVF   2C,W
0F20:  BSF    03.5
0F21:  BSF    03.6
0F22:  MOVWF  1A
0F23:  BCF    03.5
0F24:  BCF    03.6
0F25:  MOVF   2B,W
0F26:  BSF    03.5
0F27:  BSF    03.6
0F28:  MOVWF  19
0F29:  BCF    03.5
0F2A:  BCF    03.6
0F2B:  MOVF   2A,W
0F2C:  BSF    03.5
0F2D:  BSF    03.6
0F2E:  MOVWF  18
0F2F:  CLRF   1F
0F30:  CLRF   1E
0F31:  MOVLW  80
0F32:  MOVWF  1D
0F33:  MOVWF  1C
0F34:  BCF    0A.3
0F35:  BCF    03.5
0F36:  BCF    03.6
0F37:  CALL   28B
0F38:  BSF    0A.3
0F39:  BTFSC  27.7
0F3A:  BSF    0B.7
0F3B:  MOVF   7A,W
0F3C:  BSF    03.6
0F3D:  MOVWF  2F
0F3E:  MOVF   79,W
0F3F:  MOVWF  2E
0F40:  MOVF   78,W
0F41:  MOVWF  2D
0F42:  MOVF   77,W
0F43:  MOVWF  2C
0F44:  BCF    03.1
0F45:  MOVF   2F,W
0F46:  MOVWF  34
0F47:  MOVF   2E,W
0F48:  MOVWF  33
0F49:  MOVF   2D,W
0F4A:  MOVWF  32
0F4B:  MOVF   2C,W
0F4C:  MOVWF  31
0F4D:  CLRF   38
0F4E:  CLRF   37
0F4F:  MOVLW  70
0F50:  MOVWF  36
0F51:  MOVLW  85
0F52:  MOVWF  35
0F53:  BCF    03.6
0F54:  CALL   5AF
0F55:  MOVF   7A,W
0F56:  BSF    03.6
0F57:  MOVWF  30
0F58:  MOVF   79,W
0F59:  MOVWF  2F
0F5A:  MOVF   78,W
0F5B:  MOVWF  2E
0F5C:  MOVF   77,W
0F5D:  MOVWF  2D
0F5E:  BCF    0A.3
0F5F:  BCF    03.6
0F60:  CALL   7DE
0F61:  BSF    0A.3
0F62:  MOVF   78,W
0F63:  BSF    03.6
0F64:  MOVWF  2C
0F65:  BCF    03.6
0F66:  CLRF   27
0F67:  BTFSC  0B.7
0F68:  BSF    27.7
0F69:  BCF    0B.7
0F6A:  BSF    03.6
0F6B:  MOVF   2A,W
0F6C:  BSF    03.5
0F6D:  MOVWF  1B
0F6E:  BCF    03.5
0F6F:  MOVF   29,W
0F70:  BSF    03.5
0F71:  MOVWF  1A
0F72:  BCF    03.5
0F73:  MOVF   28,W
0F74:  BSF    03.5
0F75:  MOVWF  19
0F76:  BCF    03.5
0F77:  MOVF   27,W
0F78:  BSF    03.5
0F79:  MOVWF  18
0F7A:  CLRF   1F
0F7B:  CLRF   1E
0F7C:  MOVLW  80
0F7D:  MOVWF  1D
0F7E:  MOVWF  1C
0F7F:  BCF    0A.3
0F80:  BCF    03.5
0F81:  BCF    03.6
0F82:  CALL   28B
0F83:  BSF    0A.3
0F84:  BTFSC  27.7
0F85:  BSF    0B.7
0F86:  MOVF   7A,W
0F87:  BSF    03.6
0F88:  MOVWF  30
0F89:  MOVF   79,W
0F8A:  MOVWF  2F
0F8B:  MOVF   78,W
0F8C:  MOVWF  2E
0F8D:  MOVF   77,W
0F8E:  MOVWF  2D
0F8F:  BCF    03.1
0F90:  MOVF   30,W
0F91:  MOVWF  34
0F92:  MOVF   2F,W
0F93:  MOVWF  33
0F94:  MOVF   2E,W
0F95:  MOVWF  32
0F96:  MOVF   2D,W
0F97:  MOVWF  31
0F98:  CLRF   38
0F99:  CLRF   37
0F9A:  MOVLW  70
0F9B:  MOVWF  36
0F9C:  MOVLW  85
0F9D:  MOVWF  35
0F9E:  BCF    03.6
0F9F:  CALL   5AF
0FA0:  MOVF   7A,W
0FA1:  BSF    03.6
0FA2:  MOVWF  30
0FA3:  MOVF   79,W
0FA4:  MOVWF  2F
0FA5:  MOVF   78,W
0FA6:  MOVWF  2E
0FA7:  MOVF   77,W
0FA8:  MOVWF  2D
0FA9:  BCF    0A.3
0FAA:  BCF    03.6
0FAB:  CALL   7DE
0FAC:  BSF    0A.3
0FAD:  MOVF   78,W
0FAE:  BSF    03.6
0FAF:  MOVWF  2D
0FB0:  BCF    03.6
0FB1:  MOVF   29,W
0FB2:  BSF    03.6
0FB3:  MOVWF  2E
0FB4:  MOVF   2C,W
0FB5:  MOVWF  2F
0FB6:  MOVF   2B,W
0FB7:  MOVWF  30
0FB8:  MOVF   2D,W
0FB9:  MOVWF  31
0FBA:  MOVLW  01
0FBB:  MOVWF  32
0FBC:  BCF    03.6
0FBD:  CALL   3C6
....................    y=temp; 
0FBE:  BSF    03.6
0FBF:  MOVF   2A,W
0FC0:  BCF    03.6
0FC1:  MOVWF  2D
0FC2:  BSF    03.6
0FC3:  MOVF   29,W
0FC4:  BCF    03.6
0FC5:  MOVWF  2C
0FC6:  BSF    03.6
0FC7:  MOVF   28,W
0FC8:  BCF    03.6
0FC9:  MOVWF  2B
0FCA:  BSF    03.6
0FCB:  MOVF   27,W
0FCC:  BCF    03.6
0FCD:  MOVWF  2A
....................    x=x1; 
0FCE:  BSF    03.6
0FCF:  MOVF   2B,W
0FD0:  BCF    03.6
0FD1:  MOVWF  29
0FD2:  BCF    0A.3
0FD3:  BSF    0A.4
0FD4:  GOTO   351 (RETURN)
.................... } 
....................  
.................... ///Fin Funciones 
....................  
.................... ///Interrupciones 
....................  
.................... #INT_TIMER0 
.................... void TIMER0_isr(){ //Timer para hacer sonar el buzzer cada 500ms 
....................    ciclos--; 
*
0274:  DECFSZ 34,F
....................    if(ciclos==0){ 
0275:  GOTO   285
....................       ciclos=10; 
0276:  MOVLW  0A
0277:  MOVWF  34
....................       output_low(PIN_B3); 
0278:  BSF    03.5
0279:  BCF    06.3
027A:  BCF    03.5
027B:  BCF    06.3
....................       delay_ms(50); 
027C:  MOVLW  32
027D:  BSF    03.6
027E:  MOVWF  47
027F:  BCF    03.6
0280:  CALL   25F
....................       output_high(PIN_B3); 
0281:  BSF    03.5
0282:  BCF    06.3
0283:  BCF    03.5
0284:  BSF    06.3
....................    } 
....................    set_timer0(TMR0); 
0285:  MOVLW  40
0286:  MOVWF  01
.................... } 
....................  
0287:  BCF    0B.2
0288:  BCF    0A.3
0289:  BCF    0A.4
028A:  GOTO   02B
.................... #INT_TIMER1 
.................... void TIMER1_isr(){ //Timer para almacenar, en un array, la temepratura actual cada 3 segundos 
.................... 	ciclosT1--; 
*
0481:  DECFSZ 35,F
.................... 	if(ciclosT1==0){ 
0482:  GOTO   50A
....................       ciclosT1=6; 
0483:  MOVLW  06
0484:  MOVWF  35
....................       //Aca hay que hacer el guardado en sd 
....................       //Con este bloque de codigo guardamos en un array las ultimas N mediciones 
....................       //Las cuales podemos guardar despues donde querramos 
.................... 	   for(int i=0; i<nMediciones-1;i++) 
0485:  BSF    03.6
0486:  CLRF   47
0487:  MOVF   47,W
0488:  SUBLW  12
0489:  BTFSS  03.0
048A:  GOTO   4C9
.................... 	   	registro[i]=registro[i+1]; 
048B:  RLF    47,W
048C:  MOVWF  77
048D:  RLF    77,F
048E:  MOVLW  FC
048F:  ANDWF  77,F
0490:  MOVF   77,W
0491:  ADDLW  A0
0492:  MOVWF  78
0493:  CLRF   7A
0494:  BTFSC  03.0
0495:  INCF   7A,F
0496:  MOVF   78,W
0497:  MOVWF  49
0498:  MOVF   7A,W
0499:  MOVWF  4A
049A:  MOVLW  01
049B:  ADDWF  47,W
049C:  MOVWF  77
049D:  RLF    77,F
049E:  RLF    77,F
049F:  MOVLW  FC
04A0:  ANDWF  77,F
04A1:  MOVF   77,W
04A2:  ADDLW  A0
04A3:  MOVWF  04
04A4:  BCF    03.7
04A5:  MOVF   00,W
04A6:  MOVWF  77
04A7:  INCF   04,F
04A8:  MOVF   00,W
04A9:  MOVWF  78
04AA:  INCF   04,F
04AB:  MOVF   00,W
04AC:  MOVWF  79
04AD:  INCF   04,F
04AE:  MOVF   00,W
04AF:  MOVWF  7A
04B0:  MOVWF  4E
04B1:  MOVF   79,W
04B2:  MOVWF  4D
04B3:  MOVF   78,W
04B4:  MOVWF  4C
04B5:  MOVF   77,W
04B6:  MOVWF  4B
04B7:  MOVF   49,W
04B8:  MOVWF  04
04B9:  BCF    03.7
04BA:  BTFSC  4A.0
04BB:  BSF    03.7
04BC:  MOVF   4B,W
04BD:  MOVWF  00
04BE:  INCF   04,F
04BF:  MOVF   4C,W
04C0:  MOVWF  00
04C1:  INCF   04,F
04C2:  MOVF   4D,W
04C3:  MOVWF  00
04C4:  INCF   04,F
04C5:  MOVF   4E,W
04C6:  MOVWF  00
04C7:  INCF   47,F
04C8:  GOTO   487
.................... 	   registro[nMediciones-1]=t; 
04C9:  BCF    03.6
04CA:  MOVF   31,W
04CB:  BSF    03.5
04CC:  MOVWF  6F
04CD:  BCF    03.5
04CE:  MOVF   30,W
04CF:  BSF    03.5
04D0:  MOVWF  6E
04D1:  BCF    03.5
04D2:  MOVF   2F,W
04D3:  BSF    03.5
04D4:  MOVWF  6D
04D5:  BCF    03.5
04D6:  MOVF   2E,W
04D7:  BSF    03.5
04D8:  MOVWF  6C
.................... 	   for(int i=0; i<nMediciones; i++) 
04D9:  BCF    03.5
04DA:  BSF    03.6
04DB:  CLRF   48
04DC:  MOVF   48,W
04DD:  SUBLW  13
04DE:  BTFSS  03.0
04DF:  GOTO   509
.................... 	   	printf("%4.2f ",registro[i]); 
04E0:  RLF    48,W
04E1:  MOVWF  77
04E2:  RLF    77,F
04E3:  MOVLW  FC
04E4:  ANDWF  77,F
04E5:  MOVF   77,W
04E6:  ADDLW  A0
04E7:  MOVWF  04
04E8:  BCF    03.7
04E9:  MOVF   00,W
04EA:  MOVWF  49
04EB:  INCF   04,F
04EC:  MOVF   00,W
04ED:  MOVWF  4A
04EE:  INCF   04,F
04EF:  MOVF   00,W
04F0:  MOVWF  4B
04F1:  INCF   04,F
04F2:  MOVF   00,W
04F3:  MOVWF  4C
04F4:  MOVLW  03
04F5:  MOVWF  04
04F6:  MOVF   4C,W
04F7:  MOVWF  50
04F8:  MOVF   4B,W
04F9:  MOVWF  4F
04FA:  MOVF   4A,W
04FB:  MOVWF  4E
04FC:  MOVF   49,W
04FD:  MOVWF  4D
04FE:  MOVLW  02
04FF:  MOVWF  51
0500:  BCF    03.6
0501:  GOTO   37A
0502:  MOVLW  20
0503:  BTFSS  0C.4
0504:  GOTO   503
0505:  MOVWF  19
0506:  BSF    03.6
0507:  INCF   48,F
0508:  GOTO   4DC
0509:  BCF    03.6
....................    } 
....................    set_timer1(TMR1); 
050A:  CLRF   0E
050B:  MOVLW  0B
050C:  MOVWF  0F
050D:  MOVLW  DC
050E:  MOVWF  0E
.................... } 
....................  
050F:  BCF    0C.0
0510:  BCF    0A.3
0511:  BCF    0A.4
0512:  GOTO   02B
.................... #INT_RB 
.................... void RB_isr(){ //Prueba de interrupciones 
....................    if(input(PIN_B6)){ //Habilita o deshabilita la captura de datos 
*
092C:  BSF    03.5
092D:  BSF    06.6
092E:  BCF    03.5
092F:  BTFSS  06.6
0930:  GOTO   23D
....................       char str[8]; 
....................       habilitarLectura=~habilitarLectura; 
0931:  MOVLW  01
0932:  XORWF  32,F
....................       disable_interrupts(INT_TIMER0); 
0933:  BCF    0B.5
....................       if(habilitarLectura){ 
0934:  BTFSS  32.0
0935:  GOTO   198
....................          glcd_text57(128/2-30, 0, (char*)"Capturando", 1, ON); 
0936:  CLRF   78
0937:  MOVLW  0B
0938:  MOVWF  77
0939:  MOVLW  4F
093A:  MOVWF  04
093B:  BSF    03.7
093C:  MOVF   78,W
093D:  BCF    0A.3
093E:  CALL   231
093F:  BSF    0A.3
0940:  MOVWF  00
0941:  INCF   78,F
0942:  INCF   04,F
0943:  DECFSZ 77,F
0944:  GOTO   13C
0945:  MOVLW  22
0946:  BSF    03.6
0947:  MOVWF  67
0948:  CLRF   68
0949:  MOVLW  01
094A:  MOVWF  6A
094B:  MOVLW  4F
094C:  MOVWF  69
094D:  MOVLW  01
094E:  MOVWF  6B
094F:  MOVWF  6C
0950:  BCF    0A.3
0951:  BCF    03.6
0952:  CALL   636
0953:  BSF    0A.3
....................       	sprintf(str, "%4.2f°C", y); 
0954:  MOVLW  01
0955:  MOVWF  37
0956:  MOVLW  47
0957:  MOVWF  36
0958:  MOVLW  03
0959:  MOVWF  04
095A:  MOVF   2D,W
095B:  BSF    03.6
095C:  MOVWF  68
095D:  BCF    03.6
095E:  MOVF   2C,W
095F:  BSF    03.6
0960:  MOVWF  67
0961:  BCF    03.6
0962:  MOVF   2B,W
0963:  BSF    03.6
0964:  MOVWF  66
0965:  BCF    03.6
0966:  MOVF   2A,W
0967:  BSF    03.6
0968:  MOVWF  65
0969:  MOVLW  02
096A:  MOVWF  69
096B:  BCF    03.6
096C:  CALL   000
096D:  MOVLW  B0
096E:  BSF    03.5
096F:  BSF    03.6
0970:  MOVWF  18
0971:  BCF    0A.3
0972:  BCF    03.5
0973:  BCF    03.6
0974:  CALL   758
0975:  BSF    0A.3
0976:  MOVLW  43
0977:  BSF    03.5
0978:  BSF    03.6
0979:  MOVWF  18
097A:  BCF    0A.3
097B:  BCF    03.5
097C:  BCF    03.6
097D:  CALL   758
097E:  BSF    0A.3
....................          glcd_text57(12*6, 10, str, 1, ON); //Escribimos la temperatura. 
097F:  MOVLW  48
0980:  BSF    03.6
0981:  MOVWF  67
0982:  MOVLW  0A
0983:  MOVWF  68
0984:  MOVLW  01
0985:  MOVWF  6A
0986:  MOVLW  47
0987:  MOVWF  69
0988:  MOVLW  01
0989:  MOVWF  6B
098A:  MOVWF  6C
098B:  BCF    0A.3
098C:  BCF    03.6
098D:  CALL   636
098E:  BSF    0A.3
....................          enable_interrupts(INT_TIMER1); 
098F:  BSF    03.5
0990:  BSF    0C.0
....................          set_timer1(TMR1); 
0991:  BCF    03.5
0992:  CLRF   0E
0993:  MOVLW  0B
0994:  MOVWF  0F
0995:  MOVLW  DC
0996:  MOVWF  0E
....................       } 
0997:  GOTO   23D
....................       else { 
....................          glcd_text57(128/2-30, 0, (char*)"Capturando", 1, OFF); 
0998:  CLRF   78
0999:  MOVLW  0B
099A:  MOVWF  77
099B:  MOVLW  5A
099C:  MOVWF  04
099D:  BSF    03.7
099E:  MOVF   78,W
099F:  BCF    0A.3
09A0:  CALL   231
09A1:  BSF    0A.3
09A2:  MOVWF  00
09A3:  INCF   78,F
09A4:  INCF   04,F
09A5:  DECFSZ 77,F
09A6:  GOTO   19E
09A7:  MOVLW  22
09A8:  BSF    03.6
09A9:  MOVWF  67
09AA:  CLRF   68
09AB:  MOVLW  01
09AC:  MOVWF  6A
09AD:  MOVLW  5A
09AE:  MOVWF  69
09AF:  MOVLW  01
09B0:  MOVWF  6B
09B1:  CLRF   6C
09B2:  BCF    0A.3
09B3:  BCF    03.6
09B4:  CALL   636
09B5:  BSF    0A.3
....................          glcd_text57(128/2-30, 0, (char*)"Limpiando", 1, ON); 
09B6:  CLRF   78
09B7:  MOVLW  0A
09B8:  MOVWF  77
09B9:  MOVLW  5A
09BA:  MOVWF  04
09BB:  BSF    03.7
09BC:  MOVF   78,W
09BD:  BCF    0A.3
09BE:  CALL   240
09BF:  BSF    0A.3
09C0:  MOVWF  00
09C1:  INCF   78,F
09C2:  INCF   04,F
09C3:  DECFSZ 77,F
09C4:  GOTO   1BC
09C5:  MOVLW  22
09C6:  BSF    03.6
09C7:  MOVWF  67
09C8:  CLRF   68
09C9:  MOVLW  01
09CA:  MOVWF  6A
09CB:  MOVLW  5A
09CC:  MOVWF  69
09CD:  MOVLW  01
09CE:  MOVWF  6B
09CF:  MOVWF  6C
09D0:  BCF    0A.3
09D1:  BCF    03.6
09D2:  CALL   636
09D3:  BSF    0A.3
....................          limpiarGrafico; 
09D4:  BSF    03.6
09D5:  CLRF   65
09D6:  MOVLW  14
09D7:  MOVWF  66
09D8:  MOVLW  80
09D9:  MOVWF  67
09DA:  MOVLW  2C
09DB:  MOVWF  68
09DC:  BCF    0A.3
09DD:  BCF    03.6
09DE:  CALL   769
09DF:  BSF    0A.3
....................          glcd_text57(128/2-30, 0, (char*)"Limpiando", 1, OFF); 
09E0:  CLRF   78
09E1:  MOVLW  0A
09E2:  MOVWF  77
09E3:  MOVLW  5A
09E4:  MOVWF  04
09E5:  BSF    03.7
09E6:  MOVF   78,W
09E7:  BCF    0A.3
09E8:  CALL   240
09E9:  BSF    0A.3
09EA:  MOVWF  00
09EB:  INCF   78,F
09EC:  INCF   04,F
09ED:  DECFSZ 77,F
09EE:  GOTO   1E6
09EF:  MOVLW  22
09F0:  BSF    03.6
09F1:  MOVWF  67
09F2:  CLRF   68
09F3:  MOVLW  01
09F4:  MOVWF  6A
09F5:  MOVLW  5A
09F6:  MOVWF  69
09F7:  MOVLW  01
09F8:  MOVWF  6B
09F9:  CLRF   6C
09FA:  BCF    0A.3
09FB:  BCF    03.6
09FC:  CALL   636
09FD:  BSF    0A.3
....................       	sprintf(str, "%4.2f°C", t); 
09FE:  MOVLW  01
09FF:  MOVWF  37
0A00:  MOVLW  47
0A01:  MOVWF  36
0A02:  MOVLW  03
0A03:  MOVWF  04
0A04:  MOVF   31,W
0A05:  BSF    03.6
0A06:  MOVWF  68
0A07:  BCF    03.6
0A08:  MOVF   30,W
0A09:  BSF    03.6
0A0A:  MOVWF  67
0A0B:  BCF    03.6
0A0C:  MOVF   2F,W
0A0D:  BSF    03.6
0A0E:  MOVWF  66
0A0F:  BCF    03.6
0A10:  MOVF   2E,W
0A11:  BSF    03.6
0A12:  MOVWF  65
0A13:  MOVLW  02
0A14:  MOVWF  69
0A15:  BCF    03.6
0A16:  CALL   000
0A17:  MOVLW  B0
0A18:  BSF    03.5
0A19:  BSF    03.6
0A1A:  MOVWF  18
0A1B:  BCF    0A.3
0A1C:  BCF    03.5
0A1D:  BCF    03.6
0A1E:  CALL   758
0A1F:  BSF    0A.3
0A20:  MOVLW  43
0A21:  BSF    03.5
0A22:  BSF    03.6
0A23:  MOVWF  18
0A24:  BCF    0A.3
0A25:  BCF    03.5
0A26:  BCF    03.6
0A27:  CALL   758
0A28:  BSF    0A.3
....................          glcd_text57(12*6, 10, str, 1, OFF); 
0A29:  MOVLW  48
0A2A:  BSF    03.6
0A2B:  MOVWF  67
0A2C:  MOVLW  0A
0A2D:  MOVWF  68
0A2E:  MOVLW  01
0A2F:  MOVWF  6A
0A30:  MOVLW  47
0A31:  MOVWF  69
0A32:  MOVLW  01
0A33:  MOVWF  6B
0A34:  CLRF   6C
0A35:  BCF    0A.3
0A36:  BCF    03.6
0A37:  CALL   636
0A38:  BSF    0A.3
....................          x=0; 
0A39:  CLRF   29
....................          disable_interrupts(INT_TIMER1); 
0A3A:  BSF    03.5
0A3B:  BCF    0C.0
0A3C:  BCF    03.5
....................       } 
....................    } 
.................... } 
....................  
0A3D:  BCF    0B.0
0A3E:  BCF    0A.3
0A3F:  BCF    0A.4
0A40:  GOTO   02B
.................... #INT_RDA 
.................... void serial_interrupt() { 
....................    received = getc(); 
*
078A:  BTFSS  0C.5
078B:  GOTO   78A
078C:  MOVF   1A,W
078D:  MOVWF  33
....................    if(received == 'a') 
078E:  MOVF   33,W
078F:  SUBLW  61
0790:  BTFSS  03.2
0791:  GOTO   7A5
....................       glcd_text57(110,0,(char*)"BT",1,ON); //Mostramos BT 
0792:  MOVLW  42
0793:  BSF    03.6
0794:  MOVWF  47
0795:  MOVLW  54
0796:  MOVWF  48
0797:  CLRF   49
0798:  MOVLW  6E
0799:  MOVWF  67
079A:  CLRF   68
079B:  MOVLW  01
079C:  MOVWF  6A
079D:  MOVLW  47
079E:  MOVWF  69
079F:  MOVLW  01
07A0:  MOVWF  6B
07A1:  MOVWF  6C
07A2:  BCF    03.6
07A3:  CALL   636
07A4:  GOTO   7BB
....................    else if(received == 'b') 
07A5:  MOVF   33,W
07A6:  SUBLW  62
07A7:  BTFSS  03.2
07A8:  GOTO   7BB
....................       glcd_text57(110,0,(char*)"BT",1,OFF); //Mostramos BT 
07A9:  MOVLW  42
07AA:  BSF    03.6
07AB:  MOVWF  47
07AC:  MOVLW  54
07AD:  MOVWF  48
07AE:  CLRF   49
07AF:  MOVLW  6E
07B0:  MOVWF  67
07B1:  CLRF   68
07B2:  MOVLW  01
07B3:  MOVWF  6A
07B4:  MOVLW  47
07B5:  MOVWF  69
07B6:  MOVLW  01
07B7:  MOVWF  6B
07B8:  CLRF   6C
07B9:  BCF    03.6
07BA:  CALL   636
07BB:  BCF    0C.5
07BC:  BCF    0A.3
07BD:  BCF    0A.4
07BE:  GOTO   02B
.................... } 
....................  
.................... ///Fin Interrupciones 
....................  
.................... void main() 
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  MOVLW  19
1004:  BSF    03.5
1005:  MOVWF  19
1006:  MOVLW  A6
1007:  MOVWF  18
1008:  MOVLW  90
1009:  BCF    03.5
100A:  MOVWF  18
100B:  MOVLW  FF
100C:  MOVWF  28
100D:  CLRF   29
100E:  BCF    32.0
100F:  CLRF   33
1010:  MOVLW  0A
1011:  MOVWF  34
1012:  MOVLW  06
1013:  MOVWF  35
1014:  CLRF   37
1015:  CLRF   36
1016:  BSF    03.5
1017:  BSF    1F.0
1018:  BSF    1F.1
1019:  BSF    1F.2
101A:  BCF    1F.3
101B:  BCF    03.7
.................... { 
....................    trisb=0b01000000; 
101C:  MOVLW  40
101D:  MOVWF  06
....................    int16 iAn; 
....................    char str[8]; 
....................     
....................    setup_adc_ports(AN0); //seteamos el pin A0 como analogico 
101E:  BCF    1F.0
101F:  BSF    1F.1
1020:  BSF    1F.2
1021:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); //Establecemos el reloj interno 
1022:  BCF    03.5
1023:  BSF    1F.6
1024:  BSF    1F.7
1025:  BSF    03.5
1026:  BSF    1F.7
1027:  BCF    03.5
1028:  BSF    1F.0
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); //setup del timer0 
1029:  BSF    03.5
102A:  MOVF   01,W
102B:  ANDLW  C0
102C:  IORLW  07
102D:  MOVWF  01
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); //setup del timer1 
102E:  MOVLW  B5
102F:  BCF    03.5
1030:  MOVWF  10
....................    set_timer0(TMR0); //seteamos el timer0 
1031:  MOVLW  40
1032:  MOVWF  01
....................    set_timer1(TMR1); //setemaos el timer1 
1033:  CLRF   0E
1034:  MOVLW  0B
1035:  MOVWF  0F
1036:  MOVLW  DC
1037:  MOVWF  0E
....................     
....................    glcd_init(ON); //Inicializamos el lcd 
1038:  MOVLW  01
1039:  BSF    03.6
103A:  MOVWF  27
103B:  BCF    0A.4
103C:  BSF    0A.3
103D:  BCF    03.6
103E:  GOTO   241
103F:  BSF    0A.4
1040:  BCF    0A.3
....................     
....................    enable_interrupts(INT_RB); //Habilitamos las interrupciones del RB4-7 
1041:  BSF    0B.3
....................    enable_interrupts(INT_RDA); 
1042:  BSF    03.5
1043:  BSF    0C.5
....................    enable_interrupts(GLOBAL); //Habilitamos las interrupciones globales 
1044:  MOVLW  C0
1045:  BCF    03.5
1046:  IORWF  0B,F
....................  
....................    glcd_text57(0,10,(char*)"Temperatura:",1,ON); //Escribimos el texto "Tempreatura:" en la posicion 0,10 
1047:  CLRF   78
1048:  MOVLW  0D
1049:  MOVWF  77
104A:  MOVLW  1A
104B:  MOVWF  04
104C:  BSF    03.7
104D:  MOVF   78,W
104E:  BCF    0A.4
104F:  CALL   24E
1050:  BSF    0A.4
1051:  MOVWF  00
1052:  INCF   78,F
1053:  INCF   04,F
1054:  DECFSZ 77,F
1055:  GOTO   04D
1056:  CLRF   27
1057:  BTFSC  0B.7
1058:  BSF    27.7
1059:  BCF    0B.7
105A:  BSF    03.6
105B:  CLRF   67
105C:  MOVLW  0A
105D:  MOVWF  68
105E:  MOVLW  01
105F:  MOVWF  6A
1060:  MOVLW  1A
1061:  MOVWF  69
1062:  MOVLW  01
1063:  MOVWF  6B
1064:  MOVWF  6C
1065:  BCF    0A.4
1066:  BCF    03.6
1067:  CALL   636
1068:  BSF    0A.4
1069:  BTFSC  27.7
106A:  BSF    0B.7
....................    glcd_line(0, 8, 128, 8, ON); //Pintamos una linea por debajo del barra de notificaciones 
106B:  BSF    03.6
106C:  CLRF   2E
106D:  MOVLW  08
106E:  MOVWF  2F
106F:  MOVLW  80
1070:  MOVWF  30
1071:  MOVLW  08
1072:  MOVWF  31
1073:  MOVLW  01
1074:  MOVWF  32
1075:  BCF    0A.4
1076:  BSF    0A.3
1077:  BCF    03.6
1078:  CALL   3C6
1079:  BSF    0A.4
107A:  BCF    0A.3
....................    glcd_line(0, 19, 128, 19, ON); //Pintamos una linea por debajo de la temperatura 
107B:  BSF    03.6
107C:  CLRF   2E
107D:  MOVLW  13
107E:  MOVWF  2F
107F:  MOVLW  80
1080:  MOVWF  30
1081:  MOVLW  13
1082:  MOVWF  31
1083:  MOVLW  01
1084:  MOVWF  32
1085:  BCF    0A.4
1086:  BSF    0A.3
1087:  BCF    03.6
1088:  CALL   3C6
1089:  BSF    0A.4
108A:  BCF    0A.3
....................     
....................    set_adc_channel(0); //Seteamos el canal que vamos a leer 
108B:  MOVLW  00
108C:  MOVWF  78
108D:  MOVF   1F,W
108E:  ANDLW  C7
108F:  IORWF  78,W
1090:  MOVWF  1F
....................    delay_us(20); //Esperamos 10 us 
1091:  MOVLW  06
1092:  MOVWF  77
1093:  DECFSZ 77,F
1094:  GOTO   093
1095:  NOP
....................    iAn=read_adc(); //Levantamos el dato 
1096:  BSF    1F.2
1097:  BTFSC  1F.2
1098:  GOTO   097
1099:  MOVF   1E,W
109A:  MOVWF  7A
109B:  BSF    03.5
109C:  MOVF   1E,W
109D:  BCF    03.5
109E:  BSF    03.6
109F:  MOVWF  10
10A0:  MOVF   7A,W
10A1:  MOVWF  11
....................    y=(5.0*iAn*100.0)/1024.0; //Lo convertemos a temperatura. Esta es la primera captura 
10A2:  MOVF   11,W
10A3:  MOVWF  28
10A4:  MOVF   10,W
10A5:  MOVWF  27
10A6:  BCF    0A.4
10A7:  BCF    03.6
10A8:  CALL   7BF
10A9:  BSF    0A.4
10AA:  CLRF   27
10AB:  BTFSC  0B.7
10AC:  BSF    27.7
10AD:  BCF    0B.7
10AE:  BSF    03.5
10AF:  BSF    03.6
10B0:  CLRF   1B
10B1:  CLRF   1A
10B2:  MOVLW  20
10B3:  MOVWF  19
10B4:  MOVLW  81
10B5:  MOVWF  18
10B6:  MOVF   7A,W
10B7:  MOVWF  1F
10B8:  MOVF   79,W
10B9:  MOVWF  1E
10BA:  MOVF   78,W
10BB:  MOVWF  1D
10BC:  MOVF   77,W
10BD:  MOVWF  1C
10BE:  BCF    0A.4
10BF:  BCF    03.5
10C0:  BCF    03.6
10C1:  CALL   28B
10C2:  BSF    0A.4
10C3:  BTFSC  27.7
10C4:  BSF    0B.7
10C5:  MOVF   7A,W
10C6:  BSF    03.6
10C7:  MOVWF  2A
10C8:  MOVF   79,W
10C9:  MOVWF  29
10CA:  MOVF   78,W
10CB:  MOVWF  28
10CC:  MOVF   77,W
10CD:  MOVWF  27
10CE:  BCF    03.6
10CF:  CLRF   27
10D0:  BTFSC  0B.7
10D1:  BSF    27.7
10D2:  BCF    0B.7
10D3:  BSF    03.6
10D4:  MOVF   2A,W
10D5:  BSF    03.5
10D6:  MOVWF  1B
10D7:  BCF    03.5
10D8:  MOVF   29,W
10D9:  BSF    03.5
10DA:  MOVWF  1A
10DB:  BCF    03.5
10DC:  MOVF   28,W
10DD:  BSF    03.5
10DE:  MOVWF  19
10DF:  BCF    03.5
10E0:  MOVF   27,W
10E1:  BSF    03.5
10E2:  MOVWF  18
10E3:  CLRF   1F
10E4:  CLRF   1E
10E5:  MOVLW  48
10E6:  MOVWF  1D
10E7:  MOVLW  85
10E8:  MOVWF  1C
10E9:  BCF    0A.4
10EA:  BCF    03.5
10EB:  BCF    03.6
10EC:  CALL   28B
10ED:  BSF    0A.4
10EE:  BTFSC  27.7
10EF:  BSF    0B.7
10F0:  MOVF   7A,W
10F1:  BSF    03.6
10F2:  MOVWF  2A
10F3:  MOVF   79,W
10F4:  MOVWF  29
10F5:  MOVF   78,W
10F6:  MOVWF  28
10F7:  MOVF   77,W
10F8:  MOVWF  27
10F9:  MOVF   2A,W
10FA:  MOVWF  2E
10FB:  MOVF   29,W
10FC:  MOVWF  2D
10FD:  MOVF   28,W
10FE:  MOVWF  2C
10FF:  MOVF   27,W
1100:  MOVWF  2B
1101:  CLRF   32
1102:  CLRF   31
1103:  CLRF   30
1104:  MOVLW  89
1105:  MOVWF  2F
1106:  BCF    0A.4
1107:  BSF    0A.3
1108:  BCF    03.6
1109:  CALL   4A2
110A:  BSF    0A.4
110B:  BCF    0A.3
110C:  MOVF   7A,W
110D:  MOVWF  2D
110E:  MOVF   79,W
110F:  MOVWF  2C
1110:  MOVF   78,W
1111:  MOVWF  2B
1112:  MOVF   77,W
1113:  MOVWF  2A
1114:  CLRF   27
1115:  BTFSC  0B.7
1116:  BSF    27.7
1117:  BCF    0B.7
....................    delay_ms(250); 
1118:  MOVLW  FA
1119:  BSF    03.6
111A:  MOVWF  47
111B:  BCF    0A.4
111C:  BCF    03.6
111D:  CALL   25F
111E:  BSF    0A.4
111F:  BTFSC  27.7
1120:  BSF    0B.7
....................     
....................    while(TRUE) { 
....................       if(habilitarLectura){ 
1121:  BTFSS  32.0
1122:  GOTO   45F
....................          set_adc_channel(0); //Seteamos el canal que vamos a leer 
1123:  MOVLW  00
1124:  MOVWF  78
1125:  MOVF   1F,W
1126:  ANDLW  C7
1127:  IORWF  78,W
1128:  MOVWF  1F
....................          delay_us(10); //Esperamos 10 us 
1129:  MOVLW  03
112A:  MOVWF  77
112B:  DECFSZ 77,F
112C:  GOTO   12B
....................          iAn=read_adc(); //Levantamos el dato 
112D:  BSF    1F.2
112E:  BTFSC  1F.2
112F:  GOTO   12E
1130:  MOVF   1E,W
1131:  MOVWF  7A
1132:  BSF    03.5
1133:  MOVF   1E,W
1134:  BCF    03.5
1135:  BSF    03.6
1136:  MOVWF  10
1137:  MOVF   7A,W
1138:  MOVWF  11
....................          t=(5.0*iAn*100.0)/1024.0; //Lo convertemos a temperatura 
1139:  MOVF   11,W
113A:  MOVWF  28
113B:  MOVF   10,W
113C:  MOVWF  27
113D:  BCF    0A.4
113E:  BCF    03.6
113F:  CALL   7BF
1140:  BSF    0A.4
1141:  CLRF   27
1142:  BTFSC  0B.7
1143:  BSF    27.7
1144:  BCF    0B.7
1145:  BSF    03.5
1146:  BSF    03.6
1147:  CLRF   1B
1148:  CLRF   1A
1149:  MOVLW  20
114A:  MOVWF  19
114B:  MOVLW  81
114C:  MOVWF  18
114D:  MOVF   7A,W
114E:  MOVWF  1F
114F:  MOVF   79,W
1150:  MOVWF  1E
1151:  MOVF   78,W
1152:  MOVWF  1D
1153:  MOVF   77,W
1154:  MOVWF  1C
1155:  BCF    0A.4
1156:  BCF    03.5
1157:  BCF    03.6
1158:  CALL   28B
1159:  BSF    0A.4
115A:  BTFSC  27.7
115B:  BSF    0B.7
115C:  MOVF   7A,W
115D:  BSF    03.6
115E:  MOVWF  2A
115F:  MOVF   79,W
1160:  MOVWF  29
1161:  MOVF   78,W
1162:  MOVWF  28
1163:  MOVF   77,W
1164:  MOVWF  27
1165:  BCF    03.6
1166:  CLRF   27
1167:  BTFSC  0B.7
1168:  BSF    27.7
1169:  BCF    0B.7
116A:  BSF    03.6
116B:  MOVF   2A,W
116C:  BSF    03.5
116D:  MOVWF  1B
116E:  BCF    03.5
116F:  MOVF   29,W
1170:  BSF    03.5
1171:  MOVWF  1A
1172:  BCF    03.5
1173:  MOVF   28,W
1174:  BSF    03.5
1175:  MOVWF  19
1176:  BCF    03.5
1177:  MOVF   27,W
1178:  BSF    03.5
1179:  MOVWF  18
117A:  CLRF   1F
117B:  CLRF   1E
117C:  MOVLW  48
117D:  MOVWF  1D
117E:  MOVLW  85
117F:  MOVWF  1C
1180:  BCF    0A.4
1181:  BCF    03.5
1182:  BCF    03.6
1183:  CALL   28B
1184:  BSF    0A.4
1185:  BTFSC  27.7
1186:  BSF    0B.7
1187:  MOVF   7A,W
1188:  BSF    03.6
1189:  MOVWF  2A
118A:  MOVF   79,W
118B:  MOVWF  29
118C:  MOVF   78,W
118D:  MOVWF  28
118E:  MOVF   77,W
118F:  MOVWF  27
1190:  MOVF   2A,W
1191:  MOVWF  2E
1192:  MOVF   29,W
1193:  MOVWF  2D
1194:  MOVF   28,W
1195:  MOVWF  2C
1196:  MOVF   27,W
1197:  MOVWF  2B
1198:  CLRF   32
1199:  CLRF   31
119A:  CLRF   30
119B:  MOVLW  89
119C:  MOVWF  2F
119D:  BCF    0A.4
119E:  BSF    0A.3
119F:  BCF    03.6
11A0:  CALL   4A2
11A1:  BSF    0A.4
11A2:  BCF    0A.3
11A3:  MOVF   7A,W
11A4:  MOVWF  31
11A5:  MOVF   79,W
11A6:  MOVWF  30
11A7:  MOVF   78,W
11A8:  MOVWF  2F
11A9:  MOVF   77,W
11AA:  MOVWF  2E
....................           
....................          if(t!=y){ //Si t es != al dato anterior refrescamos la temperatura y la enviamos al bluetooth 
11AB:  MOVF   31,W
11AC:  BSF    03.6
11AD:  MOVWF  2A
11AE:  BCF    03.6
11AF:  MOVF   30,W
11B0:  BSF    03.6
11B1:  MOVWF  29
11B2:  BCF    03.6
11B3:  MOVF   2F,W
11B4:  BSF    03.6
11B5:  MOVWF  28
11B6:  BCF    03.6
11B7:  MOVF   2E,W
11B8:  BSF    03.6
11B9:  MOVWF  27
11BA:  BCF    03.6
11BB:  MOVF   2D,W
11BC:  BSF    03.6
11BD:  MOVWF  2E
11BE:  BCF    03.6
11BF:  MOVF   2C,W
11C0:  BSF    03.6
11C1:  MOVWF  2D
11C2:  BCF    03.6
11C3:  MOVF   2B,W
11C4:  BSF    03.6
11C5:  MOVWF  2C
11C6:  BCF    03.6
11C7:  MOVF   2A,W
11C8:  BSF    03.6
11C9:  MOVWF  2B
11CA:  BCF    0A.4
11CB:  BSF    0A.3
11CC:  BCF    03.6
11CD:  CALL   56E
11CE:  BSF    0A.4
11CF:  BCF    0A.3
11D0:  BTFSC  03.2
11D1:  GOTO   280
....................             //str[0] = '\0'; 
....................             sprintf(str, "%4.2f°C", y); //Convertimos la temperatura float en un char* 
11D2:  MOVLW  01
11D3:  MOVWF  37
11D4:  MOVLW  12
11D5:  MOVWF  36
11D6:  MOVLW  03
11D7:  MOVWF  04
11D8:  CLRF   27
11D9:  BTFSC  0B.7
11DA:  BSF    27.7
11DB:  BCF    0B.7
11DC:  MOVF   2D,W
11DD:  BSF    03.6
11DE:  MOVWF  68
11DF:  BCF    03.6
11E0:  MOVF   2C,W
11E1:  BSF    03.6
11E2:  MOVWF  67
11E3:  BCF    03.6
11E4:  MOVF   2B,W
11E5:  BSF    03.6
11E6:  MOVWF  66
11E7:  BCF    03.6
11E8:  MOVF   2A,W
11E9:  BSF    03.6
11EA:  MOVWF  65
11EB:  MOVLW  02
11EC:  MOVWF  69
11ED:  BCF    0A.4
11EE:  BSF    0A.3
11EF:  BCF    03.6
11F0:  CALL   000
11F1:  BSF    0A.4
11F2:  BCF    0A.3
11F3:  BTFSC  27.7
11F4:  BSF    0B.7
11F5:  CLRF   27
11F6:  BTFSC  0B.7
11F7:  BSF    27.7
11F8:  BCF    0B.7
11F9:  MOVLW  B0
11FA:  BSF    03.5
11FB:  BSF    03.6
11FC:  MOVWF  18
11FD:  BCF    0A.4
11FE:  BCF    03.5
11FF:  BCF    03.6
1200:  CALL   758
1201:  BSF    0A.4
1202:  BTFSC  27.7
1203:  BSF    0B.7
1204:  CLRF   27
1205:  BTFSC  0B.7
1206:  BSF    27.7
1207:  BCF    0B.7
1208:  MOVLW  43
1209:  BSF    03.5
120A:  BSF    03.6
120B:  MOVWF  18
120C:  BCF    0A.4
120D:  BCF    03.5
120E:  BCF    03.6
120F:  CALL   758
1210:  BSF    0A.4
1211:  BTFSC  27.7
1212:  BSF    0B.7
1213:  CLRF   27
1214:  BTFSC  0B.7
1215:  BSF    27.7
1216:  BCF    0B.7
....................             glcd_text57(12*6, 10, str, 1, OFF); //borramos del lcd la temperatura anterior 
1217:  MOVLW  48
1218:  BSF    03.6
1219:  MOVWF  67
121A:  MOVLW  0A
121B:  MOVWF  68
121C:  MOVLW  01
121D:  MOVWF  6A
121E:  MOVLW  12
121F:  MOVWF  69
1220:  MOVLW  01
1221:  MOVWF  6B
1222:  CLRF   6C
1223:  BCF    0A.4
1224:  BCF    03.6
1225:  CALL   636
1226:  BSF    0A.4
1227:  BTFSC  27.7
1228:  BSF    0B.7
....................             sprintf(str, "%4.2f°C", t); //Convertimos la temperatura float en un char* 
1229:  MOVLW  01
122A:  MOVWF  37
122B:  MOVLW  12
122C:  MOVWF  36
122D:  MOVLW  03
122E:  MOVWF  04
122F:  CLRF   27
1230:  BTFSC  0B.7
1231:  BSF    27.7
1232:  BCF    0B.7
1233:  MOVF   31,W
1234:  BSF    03.6
1235:  MOVWF  68
1236:  BCF    03.6
1237:  MOVF   30,W
1238:  BSF    03.6
1239:  MOVWF  67
123A:  BCF    03.6
123B:  MOVF   2F,W
123C:  BSF    03.6
123D:  MOVWF  66
123E:  BCF    03.6
123F:  MOVF   2E,W
1240:  BSF    03.6
1241:  MOVWF  65
1242:  MOVLW  02
1243:  MOVWF  69
1244:  BCF    0A.4
1245:  BSF    0A.3
1246:  BCF    03.6
1247:  CALL   000
1248:  BSF    0A.4
1249:  BCF    0A.3
124A:  BTFSC  27.7
124B:  BSF    0B.7
124C:  CLRF   27
124D:  BTFSC  0B.7
124E:  BSF    27.7
124F:  BCF    0B.7
1250:  MOVLW  B0
1251:  BSF    03.5
1252:  BSF    03.6
1253:  MOVWF  18
1254:  BCF    0A.4
1255:  BCF    03.5
1256:  BCF    03.6
1257:  CALL   758
1258:  BSF    0A.4
1259:  BTFSC  27.7
125A:  BSF    0B.7
125B:  CLRF   27
125C:  BTFSC  0B.7
125D:  BSF    27.7
125E:  BCF    0B.7
125F:  MOVLW  43
1260:  BSF    03.5
1261:  BSF    03.6
1262:  MOVWF  18
1263:  BCF    0A.4
1264:  BCF    03.5
1265:  BCF    03.6
1266:  CALL   758
1267:  BSF    0A.4
1268:  BTFSC  27.7
1269:  BSF    0B.7
126A:  CLRF   27
126B:  BTFSC  0B.7
126C:  BSF    27.7
126D:  BCF    0B.7
....................             glcd_text57(12*6, 10, str, 1, ON); //Escribimos la temperatura. 
126E:  MOVLW  48
126F:  BSF    03.6
1270:  MOVWF  67
1271:  MOVLW  0A
1272:  MOVWF  68
1273:  MOVLW  01
1274:  MOVWF  6A
1275:  MOVLW  12
1276:  MOVWF  69
1277:  MOVLW  01
1278:  MOVWF  6B
1279:  MOVWF  6C
127A:  BCF    0A.4
127B:  BCF    03.6
127C:  CALL   636
127D:  BSF    0A.4
127E:  BTFSC  27.7
127F:  BSF    0B.7
....................          } 
....................          if(t<=40 && t>=35) 
1280:  MOVF   31,W
1281:  BSF    03.6
1282:  MOVWF  2A
1283:  BCF    03.6
1284:  MOVF   30,W
1285:  BSF    03.6
1286:  MOVWF  29
1287:  BCF    03.6
1288:  MOVF   2F,W
1289:  BSF    03.6
128A:  MOVWF  28
128B:  BCF    03.6
128C:  MOVF   2E,W
128D:  BSF    03.6
128E:  MOVWF  27
128F:  CLRF   2E
1290:  CLRF   2D
1291:  MOVLW  20
1292:  MOVWF  2C
1293:  MOVLW  84
1294:  MOVWF  2B
1295:  BCF    0A.4
1296:  BSF    0A.3
1297:  BCF    03.6
1298:  CALL   56E
1299:  BSF    0A.4
129A:  BCF    0A.3
129B:  BTFSC  03.0
129C:  GOTO   29F
129D:  BTFSS  03.2
129E:  GOTO   2C1
129F:  BSF    03.6
12A0:  CLRF   2A
12A1:  CLRF   29
12A2:  MOVLW  0C
12A3:  MOVWF  28
12A4:  MOVLW  84
12A5:  MOVWF  27
12A6:  BCF    03.6
12A7:  MOVF   31,W
12A8:  BSF    03.6
12A9:  MOVWF  2E
12AA:  BCF    03.6
12AB:  MOVF   30,W
12AC:  BSF    03.6
12AD:  MOVWF  2D
12AE:  BCF    03.6
12AF:  MOVF   2F,W
12B0:  BSF    03.6
12B1:  MOVWF  2C
12B2:  BCF    03.6
12B3:  MOVF   2E,W
12B4:  BSF    03.6
12B5:  MOVWF  2B
12B6:  BCF    0A.4
12B7:  BSF    0A.3
12B8:  BCF    03.6
12B9:  CALL   56E
12BA:  BSF    0A.4
12BB:  BCF    0A.3
12BC:  BTFSC  03.0
12BD:  GOTO   2C0
12BE:  BTFSS  03.2
12BF:  GOTO   2C1
....................             disable_interrupts(INT_TIMER0); 
12C0:  BCF    0B.5
....................          if(t>40 || t<35) 
12C1:  BSF    03.6
12C2:  CLRF   2A
12C3:  CLRF   29
12C4:  MOVLW  20
12C5:  MOVWF  28
12C6:  MOVLW  84
12C7:  MOVWF  27
12C8:  BCF    03.6
12C9:  MOVF   31,W
12CA:  BSF    03.6
12CB:  MOVWF  2E
12CC:  BCF    03.6
12CD:  MOVF   30,W
12CE:  BSF    03.6
12CF:  MOVWF  2D
12D0:  BCF    03.6
12D1:  MOVF   2F,W
12D2:  BSF    03.6
12D3:  MOVWF  2C
12D4:  BCF    03.6
12D5:  MOVF   2E,W
12D6:  BSF    03.6
12D7:  MOVWF  2B
12D8:  BCF    0A.4
12D9:  BSF    0A.3
12DA:  BCF    03.6
12DB:  CALL   56E
12DC:  BSF    0A.4
12DD:  BCF    0A.3
12DE:  BTFSC  03.0
12DF:  GOTO   2FD
12E0:  MOVF   31,W
12E1:  BSF    03.6
12E2:  MOVWF  2A
12E3:  BCF    03.6
12E4:  MOVF   30,W
12E5:  BSF    03.6
12E6:  MOVWF  29
12E7:  BCF    03.6
12E8:  MOVF   2F,W
12E9:  BSF    03.6
12EA:  MOVWF  28
12EB:  BCF    03.6
12EC:  MOVF   2E,W
12ED:  BSF    03.6
12EE:  MOVWF  27
12EF:  CLRF   2E
12F0:  CLRF   2D
12F1:  MOVLW  0C
12F2:  MOVWF  2C
12F3:  MOVLW  84
12F4:  MOVWF  2B
12F5:  BCF    0A.4
12F6:  BSF    0A.3
12F7:  BCF    03.6
12F8:  CALL   56E
12F9:  BSF    0A.4
12FA:  BCF    0A.3
12FB:  BTFSS  03.0
12FC:  GOTO   2FE
....................             enable_interrupts(INT_TIMER0); 
12FD:  BSF    0B.5
....................          if(t<=50 && t>=28){ //Si t es menor o igual a 50 la agregamos al grafico 
12FE:  MOVF   31,W
12FF:  BSF    03.6
1300:  MOVWF  2A
1301:  BCF    03.6
1302:  MOVF   30,W
1303:  BSF    03.6
1304:  MOVWF  29
1305:  BCF    03.6
1306:  MOVF   2F,W
1307:  BSF    03.6
1308:  MOVWF  28
1309:  BCF    03.6
130A:  MOVF   2E,W
130B:  BSF    03.6
130C:  MOVWF  27
130D:  CLRF   2E
130E:  CLRF   2D
130F:  MOVLW  48
1310:  MOVWF  2C
1311:  MOVLW  84
1312:  MOVWF  2B
1313:  BCF    0A.4
1314:  BSF    0A.3
1315:  BCF    03.6
1316:  CALL   56E
1317:  BSF    0A.4
1318:  BCF    0A.3
1319:  BTFSC  03.0
131A:  GOTO   31D
131B:  BTFSS  03.2
131C:  GOTO   393
131D:  BSF    03.6
131E:  CLRF   2A
131F:  CLRF   29
1320:  MOVLW  60
1321:  MOVWF  28
1322:  MOVLW  83
1323:  MOVWF  27
1324:  BCF    03.6
1325:  MOVF   31,W
1326:  BSF    03.6
1327:  MOVWF  2E
1328:  BCF    03.6
1329:  MOVF   30,W
132A:  BSF    03.6
132B:  MOVWF  2D
132C:  BCF    03.6
132D:  MOVF   2F,W
132E:  BSF    03.6
132F:  MOVWF  2C
1330:  BCF    03.6
1331:  MOVF   2E,W
1332:  BSF    03.6
1333:  MOVWF  2B
1334:  BCF    0A.4
1335:  BSF    0A.3
1336:  BCF    03.6
1337:  CALL   56E
1338:  BSF    0A.4
1339:  BCF    0A.3
133A:  BTFSC  03.0
133B:  GOTO   33E
133C:  BTFSS  03.2
133D:  GOTO   393
....................             nuevaLinea(t); //Dibujamos la nueva linea en el grafico. 
133E:  MOVF   31,W
133F:  BSF    03.6
1340:  MOVWF  2A
1341:  BCF    03.6
1342:  MOVF   30,W
1343:  BSF    03.6
1344:  MOVWF  29
1345:  BCF    03.6
1346:  MOVF   2F,W
1347:  BSF    03.6
1348:  MOVWF  28
1349:  BCF    03.6
134A:  MOVF   2E,W
134B:  BSF    03.6
134C:  MOVWF  27
134D:  BCF    0A.4
134E:  BSF    0A.3
134F:  BCF    03.6
1350:  GOTO   6F5
1351:  BSF    0A.4
1352:  BCF    0A.3
....................             glcd_text57(3, 0, (char*)"T>50", 1, OFF); //ocultamos la notificacion de t>50 
1353:  MOVLW  54
1354:  BSF    03.6
1355:  MOVWF  1A
1356:  MOVLW  3E
1357:  MOVWF  1B
1358:  MOVLW  35
1359:  MOVWF  1C
135A:  MOVLW  30
135B:  MOVWF  1D
135C:  CLRF   1E
135D:  BCF    03.6
135E:  CLRF   27
135F:  BTFSC  0B.7
1360:  BSF    27.7
1361:  BCF    0B.7
1362:  MOVLW  03
1363:  BSF    03.6
1364:  MOVWF  67
1365:  CLRF   68
1366:  MOVLW  01
1367:  MOVWF  6A
1368:  MOVLW  1A
1369:  MOVWF  69
136A:  MOVLW  01
136B:  MOVWF  6B
136C:  CLRF   6C
136D:  BCF    0A.4
136E:  BCF    03.6
136F:  CALL   636
1370:  BSF    0A.4
1371:  BTFSC  27.7
1372:  BSF    0B.7
....................             glcd_text57(3, 0, (char*)"T<28", 1, OFF); //ocultamos la notificacion de t>50 
1373:  MOVLW  54
1374:  BSF    03.6
1375:  MOVWF  1A
1376:  MOVLW  3C
1377:  MOVWF  1B
1378:  MOVLW  32
1379:  MOVWF  1C
137A:  MOVLW  38
137B:  MOVWF  1D
137C:  CLRF   1E
137D:  BCF    03.6
137E:  CLRF   27
137F:  BTFSC  0B.7
1380:  BSF    27.7
1381:  BCF    0B.7
1382:  MOVLW  03
1383:  BSF    03.6
1384:  MOVWF  67
1385:  CLRF   68
1386:  MOVLW  01
1387:  MOVWF  6A
1388:  MOVLW  1A
1389:  MOVWF  69
138A:  MOVLW  01
138B:  MOVWF  6B
138C:  CLRF   6C
138D:  BCF    0A.4
138E:  BCF    03.6
138F:  CALL   636
1390:  BSF    0A.4
1391:  BTFSC  27.7
1392:  BSF    0B.7
....................          } 
....................          if(t>50){ 
1393:  BSF    03.6
1394:  CLRF   2A
1395:  CLRF   29
1396:  MOVLW  48
1397:  MOVWF  28
1398:  MOVLW  84
1399:  MOVWF  27
139A:  BCF    03.6
139B:  MOVF   31,W
139C:  BSF    03.6
139D:  MOVWF  2E
139E:  BCF    03.6
139F:  MOVF   30,W
13A0:  BSF    03.6
13A1:  MOVWF  2D
13A2:  BCF    03.6
13A3:  MOVF   2F,W
13A4:  BSF    03.6
13A5:  MOVWF  2C
13A6:  BCF    03.6
13A7:  MOVF   2E,W
13A8:  BSF    03.6
13A9:  MOVWF  2B
13AA:  BCF    0A.4
13AB:  BSF    0A.3
13AC:  BCF    03.6
13AD:  CALL   56E
13AE:  BSF    0A.4
13AF:  BCF    0A.3
13B0:  BTFSS  03.0
13B1:  GOTO   3DA
....................             glcd_text57(3, 0, (char*)"T>50", 1, ON); //Esto significa que no graficamos temperaturas superiores a 50 
13B2:  MOVLW  54
13B3:  BSF    03.6
13B4:  MOVWF  1A
13B5:  MOVLW  3E
13B6:  MOVWF  1B
13B7:  MOVLW  35
13B8:  MOVWF  1C
13B9:  MOVLW  30
13BA:  MOVWF  1D
13BB:  CLRF   1E
13BC:  BCF    03.6
13BD:  CLRF   27
13BE:  BTFSC  0B.7
13BF:  BSF    27.7
13C0:  BCF    0B.7
13C1:  MOVLW  03
13C2:  BSF    03.6
13C3:  MOVWF  67
13C4:  CLRF   68
13C5:  MOVLW  01
13C6:  MOVWF  6A
13C7:  MOVLW  1A
13C8:  MOVWF  69
13C9:  MOVLW  01
13CA:  MOVWF  6B
13CB:  MOVWF  6C
13CC:  BCF    0A.4
13CD:  BCF    03.6
13CE:  CALL   636
13CF:  BSF    0A.4
13D0:  BTFSC  27.7
13D1:  BSF    0B.7
....................             y=t; //igualamos el dato anterior al valor de temperatura para no refrescar otra vez el valor de la temperatura 
13D2:  MOVF   31,W
13D3:  MOVWF  2D
13D4:  MOVF   30,W
13D5:  MOVWF  2C
13D6:  MOVF   2F,W
13D7:  MOVWF  2B
13D8:  MOVF   2E,W
13D9:  MOVWF  2A
....................          } 
....................          if(t<28){ 
13DA:  MOVF   31,W
13DB:  BSF    03.6
13DC:  MOVWF  2A
13DD:  BCF    03.6
13DE:  MOVF   30,W
13DF:  BSF    03.6
13E0:  MOVWF  29
13E1:  BCF    03.6
13E2:  MOVF   2F,W
13E3:  BSF    03.6
13E4:  MOVWF  28
13E5:  BCF    03.6
13E6:  MOVF   2E,W
13E7:  BSF    03.6
13E8:  MOVWF  27
13E9:  CLRF   2E
13EA:  CLRF   2D
13EB:  MOVLW  60
13EC:  MOVWF  2C
13ED:  MOVLW  83
13EE:  MOVWF  2B
13EF:  BCF    0A.4
13F0:  BSF    0A.3
13F1:  BCF    03.6
13F2:  CALL   56E
13F3:  BSF    0A.4
13F4:  BCF    0A.3
13F5:  BTFSS  03.0
13F6:  GOTO   41F
....................             glcd_text57(3, 0, (char*)"T<28", 1, ON); //Esto significa que no graficamos temperaturas superiores a 50 
13F7:  MOVLW  54
13F8:  BSF    03.6
13F9:  MOVWF  1A
13FA:  MOVLW  3C
13FB:  MOVWF  1B
13FC:  MOVLW  32
13FD:  MOVWF  1C
13FE:  MOVLW  38
13FF:  MOVWF  1D
1400:  CLRF   1E
1401:  BCF    03.6
1402:  CLRF   27
1403:  BTFSC  0B.7
1404:  BSF    27.7
1405:  BCF    0B.7
1406:  MOVLW  03
1407:  BSF    03.6
1408:  MOVWF  67
1409:  CLRF   68
140A:  MOVLW  01
140B:  MOVWF  6A
140C:  MOVLW  1A
140D:  MOVWF  69
140E:  MOVLW  01
140F:  MOVWF  6B
1410:  MOVWF  6C
1411:  BCF    0A.4
1412:  BCF    03.6
1413:  CALL   636
1414:  BSF    0A.4
1415:  BTFSC  27.7
1416:  BSF    0B.7
....................             y=t; //igualamos el dato anterior al valor de temperatura para no refrescar otra vez el valor de la temperatura 
1417:  MOVF   31,W
1418:  MOVWF  2D
1419:  MOVF   30,W
141A:  MOVWF  2C
141B:  MOVF   2F,W
141C:  MOVWF  2B
141D:  MOVF   2E,W
141E:  MOVWF  2A
....................          } 
....................          sprintf(str, "%4.2f", t); //Convertimos la temperatura float en un char* 
141F:  MOVLW  01
1420:  MOVWF  37
1421:  MOVLW  12
1422:  MOVWF  36
1423:  MOVLW  03
1424:  MOVWF  04
1425:  CLRF   27
1426:  BTFSC  0B.7
1427:  BSF    27.7
1428:  BCF    0B.7
1429:  MOVF   31,W
142A:  BSF    03.6
142B:  MOVWF  68
142C:  BCF    03.6
142D:  MOVF   30,W
142E:  BSF    03.6
142F:  MOVWF  67
1430:  BCF    03.6
1431:  MOVF   2F,W
1432:  BSF    03.6
1433:  MOVWF  66
1434:  BCF    03.6
1435:  MOVF   2E,W
1436:  BSF    03.6
1437:  MOVWF  65
1438:  MOVLW  02
1439:  MOVWF  69
143A:  BCF    0A.4
143B:  BSF    0A.3
143C:  BCF    03.6
143D:  CALL   000
143E:  BSF    0A.4
143F:  BCF    0A.3
1440:  BTFSC  27.7
1441:  BSF    0B.7
....................          puts(str); //Enviamos la temperatura por bluetooth 
1442:  MOVLW  12
1443:  MOVWF  04
1444:  BSF    03.7
1445:  BCF    0A.4
1446:  BSF    0A.3
1447:  GOTO   7D5
1448:  BSF    0A.4
1449:  BCF    0A.3
144A:  MOVLW  0D
144B:  BTFSS  0C.4
144C:  GOTO   44B
144D:  MOVWF  19
144E:  MOVLW  0A
144F:  BTFSS  0C.4
1450:  GOTO   44F
1451:  MOVWF  19
1452:  CLRF   27
1453:  BTFSC  0B.7
1454:  BSF    27.7
1455:  BCF    0B.7
....................          delay_ms(250); 
1456:  MOVLW  FA
1457:  BSF    03.6
1458:  MOVWF  47
1459:  BCF    0A.4
145A:  BCF    03.6
145B:  CALL   25F
145C:  BSF    0A.4
145D:  BTFSC  27.7
145E:  BSF    0B.7
....................       } 
145F:  GOTO   121
....................    } 
.................... } 
....................  
1460:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
