CCS PCM C Compiler, Version 5.076, 56587               03-nov.-20 11:45

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Proyecto Final\tp_final_edi2\Codigo\main.lst

               ROM used:   3472 words (42%)
                           Largest free fragment is 2048
               RAM used:   52 (14%) at main() level
                           120 (33%) worst case
               Stack used: 7 locations (3 in main + 4 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0B
0001:  MOVWF  0A
0002:  GOTO   3E8
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   032
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.5
001E:  GOTO   021
001F:  BTFSC  0C.5
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   457
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   4A0
.................... #include <main.h> 
.................... #include <16F877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0038:  BCF    0A.0
0039:  BCF    0A.1
003A:  BCF    0A.2
003B:  ADDLW  3F
003C:  BTFSC  03.0
003D:  INCF   0A,F
003E:  MOVWF  02
003F:  RETLW  00
0040:  RETLW  00
0041:  RETLW  00
0042:  RETLW  00
0043:  RETLW  00
0044:  RETLW  00
0045:  RETLW  00
0046:  RETLW  5F
0047:  RETLW  00
0048:  RETLW  00
0049:  RETLW  00
004A:  RETLW  03
004B:  RETLW  00
004C:  RETLW  03
004D:  RETLW  00
004E:  RETLW  14
004F:  RETLW  3E
0050:  RETLW  14
0051:  RETLW  3E
0052:  RETLW  14
0053:  RETLW  24
0054:  RETLW  2A
0055:  RETLW  7F
0056:  RETLW  2A
0057:  RETLW  12
0058:  RETLW  43
0059:  RETLW  33
005A:  RETLW  08
005B:  RETLW  66
005C:  RETLW  61
005D:  RETLW  36
005E:  RETLW  49
005F:  RETLW  55
0060:  RETLW  22
0061:  RETLW  50
0062:  RETLW  00
0063:  RETLW  05
0064:  RETLW  03
0065:  RETLW  00
0066:  RETLW  00
0067:  RETLW  00
0068:  RETLW  1C
0069:  RETLW  22
006A:  RETLW  41
006B:  RETLW  00
006C:  RETLW  00
006D:  RETLW  41
006E:  RETLW  22
006F:  RETLW  1C
0070:  RETLW  00
0071:  RETLW  14
0072:  RETLW  08
0073:  RETLW  3E
0074:  RETLW  08
0075:  RETLW  14
0076:  RETLW  08
0077:  RETLW  08
0078:  RETLW  3E
0079:  RETLW  08
007A:  RETLW  08
007B:  RETLW  00
007C:  RETLW  50
007D:  RETLW  30
007E:  RETLW  00
007F:  RETLW  00
0080:  RETLW  08
0081:  RETLW  08
0082:  RETLW  08
0083:  RETLW  08
0084:  RETLW  08
0085:  RETLW  00
0086:  RETLW  60
0087:  RETLW  60
0088:  RETLW  00
0089:  RETLW  00
008A:  RETLW  20
008B:  RETLW  10
008C:  RETLW  08
008D:  RETLW  04
008E:  RETLW  02
008F:  RETLW  3E
0090:  RETLW  51
0091:  RETLW  49
0092:  RETLW  45
0093:  RETLW  3E
0094:  RETLW  00
0095:  RETLW  04
0096:  RETLW  02
0097:  RETLW  7F
0098:  RETLW  00
0099:  RETLW  42
009A:  RETLW  61
009B:  RETLW  51
009C:  RETLW  49
009D:  RETLW  46
009E:  RETLW  22
009F:  RETLW  41
00A0:  RETLW  49
00A1:  RETLW  49
00A2:  RETLW  36
00A3:  RETLW  18
00A4:  RETLW  14
00A5:  RETLW  12
00A6:  RETLW  7F
00A7:  RETLW  10
00A8:  RETLW  27
00A9:  RETLW  45
00AA:  RETLW  45
00AB:  RETLW  45
00AC:  RETLW  39
00AD:  RETLW  3E
00AE:  RETLW  49
00AF:  RETLW  49
00B0:  RETLW  49
00B1:  RETLW  32
00B2:  RETLW  01
00B3:  RETLW  01
00B4:  RETLW  71
00B5:  RETLW  09
00B6:  RETLW  07
00B7:  RETLW  36
00B8:  RETLW  49
00B9:  RETLW  49
00BA:  RETLW  49
00BB:  RETLW  36
00BC:  RETLW  26
00BD:  RETLW  49
00BE:  RETLW  49
00BF:  RETLW  49
00C0:  RETLW  3E
00C1:  RETLW  00
00C2:  RETLW  36
00C3:  RETLW  36
00C4:  RETLW  00
00C5:  RETLW  00
00C6:  RETLW  00
00C7:  RETLW  56
00C8:  RETLW  36
00C9:  RETLW  00
00CA:  RETLW  00
00CB:  RETLW  08
00CC:  RETLW  14
00CD:  RETLW  22
00CE:  RETLW  41
00CF:  RETLW  00
00D0:  RETLW  14
00D1:  RETLW  14
00D2:  RETLW  14
00D3:  RETLW  14
00D4:  RETLW  14
00D5:  RETLW  00
00D6:  RETLW  41
00D7:  RETLW  22
00D8:  RETLW  14
00D9:  RETLW  08
00DA:  RETLW  02
00DB:  RETLW  01
00DC:  RETLW  51
00DD:  RETLW  09
00DE:  RETLW  06
00DF:  RETLW  3E
00E0:  RETLW  41
00E1:  RETLW  59
00E2:  RETLW  55
00E3:  RETLW  5E
00E4:  RETLW  7E
00E5:  RETLW  09
00E6:  RETLW  09
00E7:  RETLW  09
00E8:  RETLW  7E
00E9:  RETLW  7F
00EA:  RETLW  49
00EB:  RETLW  49
00EC:  RETLW  49
00ED:  RETLW  36
00EE:  RETLW  3E
00EF:  RETLW  41
00F0:  RETLW  41
00F1:  RETLW  41
00F2:  RETLW  22
00F3:  RETLW  7F
00F4:  RETLW  41
00F5:  RETLW  41
00F6:  RETLW  41
00F7:  RETLW  3E
00F8:  RETLW  7F
00F9:  RETLW  49
00FA:  RETLW  49
00FB:  RETLW  49
00FC:  RETLW  41
00FD:  RETLW  7F
00FE:  RETLW  09
00FF:  RETLW  09
0100:  RETLW  09
0101:  RETLW  01
0102:  RETLW  3E
0103:  RETLW  41
0104:  RETLW  41
0105:  RETLW  49
0106:  RETLW  3A
0107:  RETLW  7F
0108:  RETLW  08
0109:  RETLW  08
010A:  RETLW  08
010B:  RETLW  7F
010C:  RETLW  00
010D:  RETLW  41
010E:  RETLW  7F
010F:  RETLW  41
0110:  RETLW  00
0111:  RETLW  30
0112:  RETLW  40
0113:  RETLW  40
0114:  RETLW  40
0115:  RETLW  3F
0116:  RETLW  7F
0117:  RETLW  08
0118:  RETLW  14
0119:  RETLW  22
011A:  RETLW  41
011B:  RETLW  7F
011C:  RETLW  40
011D:  RETLW  40
011E:  RETLW  40
011F:  RETLW  40
0120:  RETLW  7F
0121:  RETLW  02
0122:  RETLW  0C
0123:  RETLW  02
0124:  RETLW  7F
0125:  RETLW  7F
0126:  RETLW  02
0127:  RETLW  04
0128:  RETLW  08
0129:  RETLW  7F
012A:  RETLW  3E
012B:  RETLW  41
012C:  RETLW  41
012D:  RETLW  41
012E:  RETLW  3E
012F:  RETLW  7F
0130:  RETLW  09
0131:  RETLW  09
0132:  RETLW  09
0133:  RETLW  06
0134:  RETLW  1E
0135:  RETLW  21
0136:  RETLW  21
0137:  RETLW  21
0138:  RETLW  5E
0139:  RETLW  7F
013A:  RETLW  09
013B:  RETLW  09
013C:  RETLW  09
013D:  RETLW  76
013E:  BSF    0A.0
013F:  BCF    0A.1
0140:  BCF    0A.2
0141:  ADDLW  45
0142:  BTFSC  03.0
0143:  INCF   0A,F
0144:  MOVWF  02
0145:  RETLW  26
0146:  RETLW  49
0147:  RETLW  49
0148:  RETLW  49
0149:  RETLW  32
014A:  RETLW  01
014B:  RETLW  01
014C:  RETLW  7F
014D:  RETLW  01
014E:  RETLW  01
014F:  RETLW  3F
0150:  RETLW  40
0151:  RETLW  40
0152:  RETLW  40
0153:  RETLW  3F
0154:  RETLW  1F
0155:  RETLW  20
0156:  RETLW  40
0157:  RETLW  20
0158:  RETLW  1F
0159:  RETLW  7F
015A:  RETLW  20
015B:  RETLW  10
015C:  RETLW  20
015D:  RETLW  7F
015E:  RETLW  41
015F:  RETLW  22
0160:  RETLW  1C
0161:  RETLW  22
0162:  RETLW  41
0163:  RETLW  07
0164:  RETLW  08
0165:  RETLW  70
0166:  RETLW  08
0167:  RETLW  07
0168:  RETLW  61
0169:  RETLW  51
016A:  RETLW  49
016B:  RETLW  45
016C:  RETLW  43
016D:  RETLW  00
016E:  RETLW  7F
016F:  RETLW  41
0170:  RETLW  00
0171:  RETLW  00
0172:  RETLW  02
0173:  RETLW  04
0174:  RETLW  08
0175:  RETLW  10
0176:  RETLW  20
0177:  RETLW  00
0178:  RETLW  00
0179:  RETLW  41
017A:  RETLW  7F
017B:  RETLW  00
017C:  RETLW  04
017D:  RETLW  02
017E:  RETLW  01
017F:  RETLW  02
0180:  RETLW  04
0181:  RETLW  40
0182:  RETLW  40
0183:  RETLW  40
0184:  RETLW  40
0185:  RETLW  40
0186:  RETLW  00
0187:  RETLW  01
0188:  RETLW  02
0189:  RETLW  04
018A:  RETLW  00
018B:  RETLW  20
018C:  RETLW  54
018D:  RETLW  54
018E:  RETLW  54
018F:  RETLW  78
0190:  RETLW  7F
0191:  RETLW  44
0192:  RETLW  44
0193:  RETLW  44
0194:  RETLW  38
0195:  RETLW  38
0196:  RETLW  44
0197:  RETLW  44
0198:  RETLW  44
0199:  RETLW  44
019A:  RETLW  38
019B:  RETLW  44
019C:  RETLW  44
019D:  RETLW  44
019E:  RETLW  7F
019F:  RETLW  38
01A0:  RETLW  54
01A1:  RETLW  54
01A2:  RETLW  54
01A3:  RETLW  18
01A4:  RETLW  04
01A5:  RETLW  04
01A6:  RETLW  7E
01A7:  RETLW  05
01A8:  RETLW  05
01A9:  RETLW  08
01AA:  RETLW  54
01AB:  RETLW  54
01AC:  RETLW  54
01AD:  RETLW  3C
01AE:  RETLW  7F
01AF:  RETLW  08
01B0:  RETLW  04
01B1:  RETLW  04
01B2:  RETLW  78
01B3:  RETLW  00
01B4:  RETLW  44
01B5:  RETLW  7D
01B6:  RETLW  40
01B7:  RETLW  00
01B8:  RETLW  20
01B9:  RETLW  40
01BA:  RETLW  44
01BB:  RETLW  3D
01BC:  RETLW  00
01BD:  RETLW  7F
01BE:  RETLW  10
01BF:  RETLW  28
01C0:  RETLW  44
01C1:  RETLW  00
01C2:  RETLW  00
01C3:  RETLW  41
01C4:  RETLW  7F
01C5:  RETLW  40
01C6:  RETLW  00
01C7:  RETLW  7C
01C8:  RETLW  04
01C9:  RETLW  78
01CA:  RETLW  04
01CB:  RETLW  78
01CC:  RETLW  7C
01CD:  RETLW  08
01CE:  RETLW  04
01CF:  RETLW  04
01D0:  RETLW  78
01D1:  RETLW  38
01D2:  RETLW  44
01D3:  RETLW  44
01D4:  RETLW  44
01D5:  RETLW  38
01D6:  RETLW  7C
01D7:  RETLW  14
01D8:  RETLW  14
01D9:  RETLW  14
01DA:  RETLW  08
01DB:  RETLW  08
01DC:  RETLW  14
01DD:  RETLW  14
01DE:  RETLW  14
01DF:  RETLW  7C
01E0:  RETLW  00
01E1:  RETLW  7C
01E2:  RETLW  08
01E3:  RETLW  04
01E4:  RETLW  04
01E5:  RETLW  48
01E6:  RETLW  54
01E7:  RETLW  54
01E8:  RETLW  54
01E9:  RETLW  20
01EA:  RETLW  04
01EB:  RETLW  04
01EC:  RETLW  3F
01ED:  RETLW  44
01EE:  RETLW  44
01EF:  RETLW  3C
01F0:  RETLW  40
01F1:  RETLW  40
01F2:  RETLW  20
01F3:  RETLW  7C
01F4:  RETLW  1C
01F5:  RETLW  20
01F6:  RETLW  40
01F7:  RETLW  20
01F8:  RETLW  1C
01F9:  RETLW  3C
01FA:  RETLW  40
01FB:  RETLW  30
01FC:  RETLW  40
01FD:  RETLW  3C
01FE:  RETLW  44
01FF:  RETLW  28
0200:  RETLW  10
0201:  RETLW  28
0202:  RETLW  44
0203:  RETLW  0C
0204:  RETLW  50
0205:  RETLW  50
0206:  RETLW  50
0207:  RETLW  3C
0208:  RETLW  44
0209:  RETLW  64
020A:  RETLW  54
020B:  RETLW  4C
020C:  RETLW  44
020D:  RETLW  00
020E:  RETLW  08
020F:  RETLW  36
0210:  RETLW  41
0211:  RETLW  41
0212:  RETLW  00
0213:  RETLW  00
0214:  RETLW  7F
0215:  RETLW  00
0216:  RETLW  00
0217:  RETLW  41
0218:  RETLW  41
0219:  RETLW  36
021A:  RETLW  08
021B:  RETLW  00
021C:  RETLW  02
021D:  RETLW  01
021E:  RETLW  02
021F:  RETLW  04
0220:  RETLW  02
0221:  BCF    0A.0
0222:  BSF    0A.1
0223:  BCF    0A.2
0224:  ADDWF  02,F
0225:  RETLW  43
0226:  RETLW  61
0227:  RETLW  70
0228:  RETLW  74
0229:  RETLW  75
022A:  RETLW  72
022B:  RETLW  61
022C:  RETLW  6E
022D:  RETLW  64
022E:  RETLW  6F
022F:  RETLW  00
0230:  BCF    0A.0
0231:  BSF    0A.1
0232:  BCF    0A.2
0233:  ADDWF  02,F
0234:  RETLW  54
0235:  RETLW  65
0236:  RETLW  6D
0237:  RETLW  70
0238:  RETLW  65
0239:  RETLW  72
023A:  RETLW  61
023B:  RETLW  74
023C:  RETLW  75
023D:  RETLW  72
023E:  RETLW  61
023F:  RETLW  3A
0240:  RETLW  00
0241:  CLRF   77
0242:  CLRF   78
0243:  BSF    03.5
0244:  MOVF   2F,W
0245:  BCF    03.0
0246:  BTFSC  30.0
0247:  ADDWF  77,F
0248:  RRF    77,F
0249:  RRF    78,F
024A:  BTFSC  30.1
024B:  ADDWF  77,F
024C:  RRF    77,F
024D:  RRF    78,F
024E:  BTFSC  30.2
024F:  ADDWF  77,F
0250:  RRF    77,F
0251:  RRF    78,F
0252:  BTFSC  30.3
0253:  ADDWF  77,F
0254:  RRF    77,F
0255:  RRF    78,F
0256:  BTFSC  30.4
0257:  ADDWF  77,F
0258:  RRF    77,F
0259:  RRF    78,F
025A:  BTFSC  30.5
025B:  ADDWF  77,F
025C:  RRF    77,F
025D:  RRF    78,F
025E:  BTFSC  30.6
025F:  ADDWF  77,F
0260:  RRF    77,F
0261:  RRF    78,F
0262:  BTFSC  30.7
0263:  ADDWF  77,F
0264:  RRF    77,F
0265:  RRF    78,F
0266:  BCF    03.5
0267:  RETURN
*
06CE:  MOVLW  8E
06CF:  MOVWF  77
06D0:  MOVF   4C,W
06D1:  MOVWF  78
06D2:  MOVF   4B,W
06D3:  MOVWF  79
06D4:  CLRF   7A
06D5:  MOVF   78,F
06D6:  BTFSS  03.2
06D7:  GOTO   6E2
06D8:  MOVF   79,W
06D9:  MOVWF  78
06DA:  CLRF   79
06DB:  MOVLW  08
06DC:  SUBWF  77,F
06DD:  MOVF   78,F
06DE:  BTFSS  03.2
06DF:  GOTO   6E2
06E0:  CLRF   77
06E1:  GOTO   6EA
06E2:  BCF    03.0
06E3:  BTFSC  78.7
06E4:  GOTO   6E9
06E5:  RLF    79,F
06E6:  RLF    78,F
06E7:  DECF   77,F
06E8:  GOTO   6E2
06E9:  BCF    78.7
06EA:  BSF    0A.3
06EB:  BCF    0A.4
06EC:  GOTO   472 (RETURN)
06ED:  MOVF   58,W
06EE:  BTFSC  03.2
06EF:  GOTO   75D
06F0:  MOVWF  60
06F1:  MOVF   5C,W
06F2:  BTFSC  03.2
06F3:  GOTO   75D
06F4:  ADDWF  60,F
06F5:  BTFSC  03.0
06F6:  GOTO   6FE
06F7:  MOVLW  7F
06F8:  SUBWF  60,F
06F9:  BTFSS  03.0
06FA:  GOTO   75D
06FB:  BTFSC  03.2
06FC:  GOTO   75D
06FD:  GOTO   702
06FE:  MOVLW  81
06FF:  ADDWF  60,F
0700:  BTFSC  03.0
0701:  GOTO   75D
0702:  MOVF   60,W
0703:  MOVWF  77
0704:  CLRF   78
0705:  CLRF   79
0706:  CLRF   7A
0707:  MOVF   59,W
0708:  MOVWF  64
0709:  BSF    64.7
070A:  MOVF   5A,W
070B:  MOVWF  63
070C:  MOVF   5B,W
070D:  MOVWF  62
070E:  MOVLW  18
070F:  MOVWF  60
0710:  CLRF   61
0711:  BTFSS  62.0
0712:  GOTO   72B
0713:  MOVF   5F,W
0714:  ADDWF  7A,F
0715:  BTFSS  03.0
0716:  GOTO   71D
0717:  INCF   79,F
0718:  BTFSS  03.2
0719:  GOTO   71D
071A:  INCF   78,F
071B:  BTFSC  03.2
071C:  BSF    61.7
071D:  MOVF   5E,W
071E:  ADDWF  79,F
071F:  BTFSS  03.0
0720:  GOTO   724
0721:  INCF   78,F
0722:  BTFSC  03.2
0723:  BSF    61.7
0724:  MOVF   5D,W
0725:  MOVWF  5A
0726:  BSF    5A.7
0727:  MOVF   5A,W
0728:  ADDWF  78,F
0729:  BTFSC  03.0
072A:  BSF    61.7
072B:  RLF    61,F
072C:  RRF    78,F
072D:  RRF    79,F
072E:  RRF    7A,F
072F:  RRF    64,F
0730:  RRF    63,F
0731:  RRF    62,F
0732:  BCF    03.0
0733:  DECFSZ 60,F
0734:  GOTO   710
0735:  MOVLW  01
0736:  ADDWF  77,F
0737:  BTFSC  03.0
0738:  GOTO   75D
0739:  BTFSC  78.7
073A:  GOTO   742
073B:  RLF    64,F
073C:  RLF    7A,F
073D:  RLF    79,F
073E:  RLF    78,F
073F:  DECF   77,F
0740:  BTFSC  03.2
0741:  GOTO   75D
0742:  BTFSS  64.7
0743:  GOTO   753
0744:  INCF   7A,F
0745:  BTFSS  03.2
0746:  GOTO   753
0747:  INCF   79,F
0748:  BTFSS  03.2
0749:  GOTO   753
074A:  INCF   78,F
074B:  BTFSS  03.2
074C:  GOTO   753
074D:  RRF    78,F
074E:  RRF    79,F
074F:  RRF    7A,F
0750:  INCF   77,F
0751:  BTFSC  03.2
0752:  GOTO   75D
0753:  MOVF   59,W
0754:  MOVWF  61
0755:  MOVF   5D,W
0756:  XORWF  61,F
0757:  BTFSS  61.7
0758:  GOTO   75B
0759:  BSF    78.7
075A:  GOTO   761
075B:  BCF    78.7
075C:  GOTO   761
075D:  CLRF   77
075E:  CLRF   78
075F:  CLRF   79
0760:  CLRF   7A
0761:  RETURN
0762:  MOVF   4C,W
0763:  MOVWF  53
0764:  MOVF   50,W
0765:  XORWF  53,F
0766:  BTFSS  53.7
0767:  GOTO   76D
0768:  BCF    03.2
0769:  BCF    03.0
076A:  BTFSC  4C.7
076B:  BSF    03.0
076C:  GOTO   7A0
076D:  MOVF   4C,W
076E:  MOVWF  53
076F:  MOVF   4F,W
0770:  MOVWF  54
0771:  MOVF   4B,W
0772:  SUBWF  54,F
0773:  BTFSC  03.2
0774:  GOTO   77B
0775:  BTFSS  53.7
0776:  GOTO   7A0
0777:  MOVF   03,W
0778:  XORLW  01
0779:  MOVWF  03
077A:  GOTO   7A0
077B:  MOVF   50,W
077C:  MOVWF  54
077D:  MOVF   4C,W
077E:  SUBWF  54,F
077F:  BTFSC  03.2
0780:  GOTO   787
0781:  BTFSS  53.7
0782:  GOTO   7A0
0783:  MOVF   03,W
0784:  XORLW  01
0785:  MOVWF  03
0786:  GOTO   7A0
0787:  MOVF   51,W
0788:  MOVWF  54
0789:  MOVF   4D,W
078A:  SUBWF  54,F
078B:  BTFSC  03.2
078C:  GOTO   793
078D:  BTFSS  53.7
078E:  GOTO   7A0
078F:  MOVF   03,W
0790:  XORLW  01
0791:  MOVWF  03
0792:  GOTO   7A0
0793:  MOVF   52,W
0794:  MOVWF  54
0795:  MOVF   4E,W
0796:  SUBWF  54,F
0797:  BTFSC  03.2
0798:  GOTO   79F
0799:  BTFSS  53.7
079A:  GOTO   7A0
079B:  MOVF   03,W
079C:  XORLW  01
079D:  MOVWF  03
079E:  GOTO   7A0
079F:  BCF    03.0
07A0:  RETURN
07A1:  BTFSC  03.1
07A2:  GOTO   7A6
07A3:  MOVLW  60
07A4:  MOVWF  04
07A5:  BCF    03.7
07A6:  CLRF   77
07A7:  CLRF   78
07A8:  CLRF   79
07A9:  CLRF   7A
07AA:  CLRF   60
07AB:  CLRF   61
07AC:  CLRF   62
07AD:  CLRF   63
07AE:  MOVF   5F,W
07AF:  IORWF  5E,W
07B0:  IORWF  5D,W
07B1:  IORWF  5C,W
07B2:  BTFSC  03.2
07B3:  GOTO   7E4
07B4:  MOVLW  20
07B5:  MOVWF  64
07B6:  BCF    03.0
07B7:  RLF    58,F
07B8:  RLF    59,F
07B9:  RLF    5A,F
07BA:  RLF    5B,F
07BB:  RLF    60,F
07BC:  RLF    61,F
07BD:  RLF    62,F
07BE:  RLF    63,F
07BF:  MOVF   5F,W
07C0:  SUBWF  63,W
07C1:  BTFSS  03.2
07C2:  GOTO   7CD
07C3:  MOVF   5E,W
07C4:  SUBWF  62,W
07C5:  BTFSS  03.2
07C6:  GOTO   7CD
07C7:  MOVF   5D,W
07C8:  SUBWF  61,W
07C9:  BTFSS  03.2
07CA:  GOTO   7CD
07CB:  MOVF   5C,W
07CC:  SUBWF  60,W
07CD:  BTFSS  03.0
07CE:  GOTO   7DE
07CF:  MOVF   5C,W
07D0:  SUBWF  60,F
07D1:  MOVF   5D,W
07D2:  BTFSS  03.0
07D3:  INCFSZ 5D,W
07D4:  SUBWF  61,F
07D5:  MOVF   5E,W
07D6:  BTFSS  03.0
07D7:  INCFSZ 5E,W
07D8:  SUBWF  62,F
07D9:  MOVF   5F,W
07DA:  BTFSS  03.0
07DB:  INCFSZ 5F,W
07DC:  SUBWF  63,F
07DD:  BSF    03.0
07DE:  RLF    77,F
07DF:  RLF    78,F
07E0:  RLF    79,F
07E1:  RLF    7A,F
07E2:  DECFSZ 64,F
07E3:  GOTO   7B6
07E4:  MOVF   60,W
07E5:  MOVWF  00
07E6:  INCF   04,F
07E7:  MOVF   61,W
07E8:  MOVWF  00
07E9:  INCF   04,F
07EA:  MOVF   62,W
07EB:  MOVWF  00
07EC:  INCF   04,F
07ED:  MOVF   63,W
07EE:  MOVWF  00
07EF:  RETURN
07F0:  MOVF   30,W
07F1:  MOVWF  04
07F2:  BCF    03.7
07F3:  BTFSC  31.0
07F4:  BSF    03.7
07F5:  MOVF   58,W
07F6:  MOVWF  00
07F7:  INCF   04,F
07F8:  CLRF   00
07F9:  INCF   30,F
07FA:  BTFSC  03.2
07FB:  INCF   31,F
07FC:  RETURN
*
0800:  MOVF   4F,W
0801:  BTFSC  03.2
0802:  GOTO   0C6
0803:  MOVWF  5B
0804:  MOVF   53,W
0805:  BTFSC  03.2
0806:  GOTO   0C6
0807:  SUBWF  5B,F
0808:  BTFSC  03.0
0809:  GOTO   00B
080A:  GOTO   010
080B:  MOVLW  7F
080C:  ADDWF  5B,F
080D:  BTFSC  03.0
080E:  GOTO   0C6
080F:  GOTO   016
0810:  MOVLW  81
0811:  SUBWF  5B,F
0812:  BTFSS  03.0
0813:  GOTO   0C6
0814:  BTFSC  03.2
0815:  GOTO   0C6
0816:  MOVF   5B,W
0817:  MOVWF  77
0818:  CLRF   78
0819:  CLRF   79
081A:  CLRF   7A
081B:  CLRF   5A
081C:  MOVF   50,W
081D:  MOVWF  59
081E:  BSF    59.7
081F:  MOVF   51,W
0820:  MOVWF  58
0821:  MOVF   52,W
0822:  MOVWF  57
0823:  MOVLW  19
0824:  MOVWF  5B
0825:  MOVF   56,W
0826:  SUBWF  57,F
0827:  BTFSC  03.0
0828:  GOTO   039
0829:  MOVLW  01
082A:  SUBWF  58,F
082B:  BTFSC  03.0
082C:  GOTO   039
082D:  SUBWF  59,F
082E:  BTFSC  03.0
082F:  GOTO   039
0830:  SUBWF  5A,F
0831:  BTFSC  03.0
0832:  GOTO   039
0833:  INCF   5A,F
0834:  INCF   59,F
0835:  INCF   58,F
0836:  MOVF   56,W
0837:  ADDWF  57,F
0838:  GOTO   06B
0839:  MOVF   55,W
083A:  SUBWF  58,F
083B:  BTFSC  03.0
083C:  GOTO   054
083D:  MOVLW  01
083E:  SUBWF  59,F
083F:  BTFSC  03.0
0840:  GOTO   054
0841:  SUBWF  5A,F
0842:  BTFSC  03.0
0843:  GOTO   054
0844:  INCF   5A,F
0845:  INCF   59,F
0846:  MOVF   55,W
0847:  ADDWF  58,F
0848:  MOVF   56,W
0849:  ADDWF  57,F
084A:  BTFSS  03.0
084B:  GOTO   06B
084C:  INCF   58,F
084D:  BTFSS  03.2
084E:  GOTO   06B
084F:  INCF   59,F
0850:  BTFSS  03.2
0851:  GOTO   06B
0852:  INCF   5A,F
0853:  GOTO   06B
0854:  MOVF   54,W
0855:  IORLW  80
0856:  SUBWF  59,F
0857:  BTFSC  03.0
0858:  GOTO   06A
0859:  MOVLW  01
085A:  SUBWF  5A,F
085B:  BTFSC  03.0
085C:  GOTO   06A
085D:  INCF   5A,F
085E:  MOVF   54,W
085F:  IORLW  80
0860:  ADDWF  59,F
0861:  MOVF   55,W
0862:  ADDWF  58,F
0863:  BTFSS  03.0
0864:  GOTO   048
0865:  INCF   59,F
0866:  BTFSS  03.2
0867:  GOTO   048
0868:  INCF   5A,F
0869:  GOTO   048
086A:  BSF    7A.0
086B:  DECFSZ 5B,F
086C:  GOTO   06E
086D:  GOTO   079
086E:  BCF    03.0
086F:  RLF    57,F
0870:  RLF    58,F
0871:  RLF    59,F
0872:  RLF    5A,F
0873:  BCF    03.0
0874:  RLF    7A,F
0875:  RLF    79,F
0876:  RLF    78,F
0877:  RLF    5C,F
0878:  GOTO   025
0879:  BTFSS  5C.0
087A:  GOTO   081
087B:  BCF    03.0
087C:  RRF    78,F
087D:  RRF    79,F
087E:  RRF    7A,F
087F:  RRF    5C,F
0880:  GOTO   084
0881:  DECF   77,F
0882:  BTFSC  03.2
0883:  GOTO   0C6
0884:  BTFSC  5C.7
0885:  GOTO   0AD
0886:  BCF    03.0
0887:  RLF    57,F
0888:  RLF    58,F
0889:  RLF    59,F
088A:  RLF    5A,F
088B:  MOVF   56,W
088C:  SUBWF  57,F
088D:  BTFSC  03.0
088E:  GOTO   099
088F:  MOVLW  01
0890:  SUBWF  58,F
0891:  BTFSC  03.0
0892:  GOTO   099
0893:  SUBWF  59,F
0894:  BTFSC  03.0
0895:  GOTO   099
0896:  SUBWF  5A,F
0897:  BTFSS  03.0
0898:  GOTO   0BC
0899:  MOVF   55,W
089A:  SUBWF  58,F
089B:  BTFSC  03.0
089C:  GOTO   0A4
089D:  MOVLW  01
089E:  SUBWF  59,F
089F:  BTFSC  03.0
08A0:  GOTO   0A4
08A1:  SUBWF  5A,F
08A2:  BTFSS  03.0
08A3:  GOTO   0BC
08A4:  MOVF   54,W
08A5:  IORLW  80
08A6:  SUBWF  59,F
08A7:  BTFSC  03.0
08A8:  GOTO   0AD
08A9:  MOVLW  01
08AA:  SUBWF  5A,F
08AB:  BTFSS  03.0
08AC:  GOTO   0BC
08AD:  INCF   7A,F
08AE:  BTFSS  03.2
08AF:  GOTO   0BC
08B0:  INCF   79,F
08B1:  BTFSS  03.2
08B2:  GOTO   0BC
08B3:  INCF   78,F
08B4:  BTFSS  03.2
08B5:  GOTO   0BC
08B6:  INCF   77,F
08B7:  BTFSC  03.2
08B8:  GOTO   0C6
08B9:  RRF    78,F
08BA:  RRF    79,F
08BB:  RRF    7A,F
08BC:  MOVF   50,W
08BD:  MOVWF  5B
08BE:  MOVF   54,W
08BF:  XORWF  5B,F
08C0:  BTFSS  5B.7
08C1:  GOTO   0C4
08C2:  BSF    78.7
08C3:  GOTO   0CA
08C4:  BCF    78.7
08C5:  GOTO   0CA
08C6:  CLRF   77
08C7:  CLRF   78
08C8:  CLRF   79
08C9:  CLRF   7A
08CA:  BSF    0A.3
08CB:  BCF    0A.4
08CC:  GOTO   4B3 (RETURN)
08CD:  MOVF   04,W
08CE:  MOVWF  50
08CF:  MOVF   4F,W
08D0:  MOVWF  52
08D1:  BTFSC  03.2
08D2:  GOTO   0EE
08D3:  MOVF   4E,W
08D4:  MOVWF  5B
08D5:  MOVF   4D,W
08D6:  MOVWF  5A
08D7:  MOVF   4C,W
08D8:  MOVWF  59
08D9:  MOVF   4B,W
08DA:  MOVWF  58
08DB:  CLRF   5F
08DC:  CLRF   5E
08DD:  MOVLW  20
08DE:  MOVWF  5D
08DF:  MOVLW  82
08E0:  MOVWF  5C
08E1:  BCF    0A.3
08E2:  CALL   6ED
08E3:  BSF    0A.3
08E4:  MOVF   7A,W
08E5:  MOVWF  4E
08E6:  MOVF   79,W
08E7:  MOVWF  4D
08E8:  MOVF   78,W
08E9:  MOVWF  4C
08EA:  MOVF   77,W
08EB:  MOVWF  4B
08EC:  DECFSZ 52,F
08ED:  GOTO   0D3
08EE:  MOVF   4E,W
08EF:  MOVWF  5B
08F0:  MOVF   4D,W
08F1:  MOVWF  5A
08F2:  MOVF   4C,W
08F3:  MOVWF  59
08F4:  MOVF   4B,W
08F5:  MOVWF  58
08F6:  MOVF   58,W
08F7:  SUBLW  B6
08F8:  MOVWF  58
08F9:  CLRF   7A
08FA:  MOVF   59,W
08FB:  MOVWF  5C
08FC:  BSF    59.7
08FD:  BCF    03.0
08FE:  RRF    59,F
08FF:  RRF    5A,F
0900:  RRF    5B,F
0901:  RRF    7A,F
0902:  RRF    79,F
0903:  RRF    78,F
0904:  RRF    77,F
0905:  DECFSZ 58,F
0906:  GOTO   0FD
0907:  BTFSS  5C.7
0908:  GOTO   114
0909:  COMF   77,F
090A:  COMF   78,F
090B:  COMF   79,F
090C:  COMF   7A,F
090D:  INCF   77,F
090E:  BTFSC  03.2
090F:  INCF   78,F
0910:  BTFSC  03.2
0911:  INCF   79,F
0912:  BTFSC  03.2
0913:  INCF   7A,F
0914:  MOVF   7A,W
0915:  MOVWF  4E
0916:  MOVF   79,W
0917:  MOVWF  4D
0918:  MOVF   78,W
0919:  MOVWF  4C
091A:  MOVF   77,W
091B:  MOVWF  4B
091C:  BTFSS  4E.7
091D:  GOTO   12B
091E:  DECF   50,F
091F:  BSF    50.5
0920:  COMF   4B,F
0921:  COMF   4C,F
0922:  COMF   4D,F
0923:  COMF   4E,F
0924:  INCF   4B,F
0925:  BTFSC  03.2
0926:  INCF   4C,F
0927:  BTFSC  03.2
0928:  INCF   4D,F
0929:  BTFSC  03.2
092A:  INCF   4E,F
092B:  MOVLW  3B
092C:  MOVWF  57
092D:  MOVLW  9A
092E:  MOVWF  56
092F:  MOVLW  CA
0930:  MOVWF  55
0931:  CLRF   54
0932:  MOVLW  0A
0933:  MOVWF  52
0934:  MOVF   4F,W
0935:  BTFSC  03.2
0936:  INCF   50,F
0937:  BSF    03.1
0938:  MOVLW  4B
0939:  MOVWF  04
093A:  BCF    03.7
093B:  MOVF   4E,W
093C:  MOVWF  5B
093D:  MOVF   4D,W
093E:  MOVWF  5A
093F:  MOVF   4C,W
0940:  MOVWF  59
0941:  MOVF   4B,W
0942:  MOVWF  58
0943:  MOVF   57,W
0944:  MOVWF  5F
0945:  MOVF   56,W
0946:  MOVWF  5E
0947:  MOVF   55,W
0948:  MOVWF  5D
0949:  MOVF   54,W
094A:  MOVWF  5C
094B:  BCF    0A.3
094C:  CALL   7A1
094D:  BSF    0A.3
094E:  MOVF   78,W
094F:  MOVF   77,F
0950:  BTFSS  03.2
0951:  GOTO   165
0952:  INCF   4F,W
0953:  SUBWF  52,W
0954:  BTFSC  03.2
0955:  GOTO   165
0956:  MOVF   50,W
0957:  BTFSC  03.2
0958:  GOTO   167
0959:  ANDLW  0F
095A:  SUBWF  52,W
095B:  BTFSC  03.2
095C:  GOTO   15F
095D:  BTFSC  03.0
095E:  GOTO   19F
095F:  BTFSC  50.7
0960:  GOTO   19F
0961:  BTFSC  50.6
0962:  GOTO   167
0963:  MOVLW  20
0964:  GOTO   199
0965:  MOVLW  20
0966:  ANDWF  50,F
0967:  BTFSS  50.5
0968:  GOTO   177
0969:  BCF    50.5
096A:  MOVF   4F,W
096B:  BTFSS  03.2
096C:  DECF   50,F
096D:  MOVF   77,W
096E:  MOVWF  50
096F:  MOVLW  2D
0970:  MOVWF  58
0971:  BCF    0A.3
0972:  CALL   7F0
0973:  BSF    0A.3
0974:  MOVF   50,W
0975:  MOVWF  77
0976:  CLRF   50
0977:  MOVF   4F,W
0978:  SUBWF  52,W
0979:  BTFSS  03.2
097A:  GOTO   187
097B:  MOVF   77,W
097C:  MOVWF  50
097D:  MOVLW  2E
097E:  MOVWF  58
097F:  BCF    0A.3
0980:  CALL   7F0
0981:  BSF    0A.3
0982:  MOVF   50,W
0983:  MOVWF  77
0984:  MOVLW  20
0985:  ANDWF  50,F
0986:  MOVLW  00
0987:  MOVLW  30
0988:  BTFSS  50.5
0989:  GOTO   199
098A:  BCF    50.5
098B:  MOVF   4F,W
098C:  BTFSS  03.2
098D:  DECF   50,F
098E:  MOVF   77,W
098F:  MOVWF  50
0990:  MOVLW  2D
0991:  MOVWF  58
0992:  BCF    0A.3
0993:  CALL   7F0
0994:  BSF    0A.3
0995:  MOVF   50,W
0996:  MOVWF  77
0997:  CLRF   50
0998:  MOVLW  30
0999:  ADDWF  77,F
099A:  MOVF   77,W
099B:  MOVWF  58
099C:  BCF    0A.3
099D:  CALL   7F0
099E:  BSF    0A.3
099F:  BCF    03.1
09A0:  MOVF   57,W
09A1:  MOVWF  5B
09A2:  MOVF   56,W
09A3:  MOVWF  5A
09A4:  MOVF   55,W
09A5:  MOVWF  59
09A6:  MOVF   54,W
09A7:  MOVWF  58
09A8:  CLRF   5F
09A9:  CLRF   5E
09AA:  CLRF   5D
09AB:  MOVLW  0A
09AC:  MOVWF  5C
09AD:  BCF    0A.3
09AE:  CALL   7A1
09AF:  BSF    0A.3
09B0:  MOVF   7A,W
09B1:  MOVWF  57
09B2:  MOVF   79,W
09B3:  MOVWF  56
09B4:  MOVF   78,W
09B5:  MOVWF  55
09B6:  MOVF   77,W
09B7:  MOVWF  54
09B8:  DECFSZ 52,F
09B9:  GOTO   137
09BA:  RETURN
09BB:  MOVLW  80
09BC:  BTFSC  03.1
09BD:  XORWF  5A,F
09BE:  CLRF   5F
09BF:  CLRF   60
09C0:  MOVF   56,W
09C1:  MOVWF  5E
09C2:  MOVF   5A,W
09C3:  XORWF  5E,F
09C4:  MOVF   55,W
09C5:  BTFSC  03.2
09C6:  GOTO   2AB
09C7:  MOVWF  5D
09C8:  MOVWF  77
09C9:  MOVF   59,W
09CA:  BTFSC  03.2
09CB:  GOTO   2B4
09CC:  SUBWF  5D,F
09CD:  BTFSC  03.2
09CE:  GOTO   250
09CF:  BTFSS  03.0
09D0:  GOTO   20E
09D1:  MOVF   5A,W
09D2:  MOVWF  63
09D3:  BSF    63.7
09D4:  MOVF   5B,W
09D5:  MOVWF  62
09D6:  MOVF   5C,W
09D7:  MOVWF  61
09D8:  CLRF   60
09D9:  BCF    03.0
09DA:  RRF    63,F
09DB:  RRF    62,F
09DC:  RRF    61,F
09DD:  RRF    60,F
09DE:  DECFSZ 5D,F
09DF:  GOTO   1D8
09E0:  BTFSS  5E.7
09E1:  GOTO   1E5
09E2:  BSF    5F.0
09E3:  GOTO   2C8
09E4:  BCF    5F.0
09E5:  BCF    5D.0
09E6:  BSF    5F.4
09E7:  MOVLW  58
09E8:  MOVWF  04
09E9:  BCF    03.7
09EA:  GOTO   2DD
09EB:  BCF    5F.4
09EC:  BTFSC  5E.7
09ED:  GOTO   1F8
09EE:  BTFSS  5D.0
09EF:  GOTO   203
09F0:  RRF    63,F
09F1:  RRF    62,F
09F2:  RRF    61,F
09F3:  RRF    60,F
09F4:  INCF   77,F
09F5:  BTFSC  03.2
09F6:  GOTO   2C3
09F7:  GOTO   203
09F8:  BTFSC  63.7
09F9:  GOTO   206
09FA:  BCF    03.0
09FB:  RLF    60,F
09FC:  RLF    61,F
09FD:  RLF    62,F
09FE:  RLF    63,F
09FF:  DECF   77,F
0A00:  BTFSC  03.2
0A01:  GOTO   2C3
0A02:  GOTO   1F8
0A03:  BSF    5F.6
0A04:  GOTO   270
0A05:  BCF    5F.6
0A06:  MOVF   56,W
0A07:  MOVWF  5E
0A08:  BTFSS  5E.7
0A09:  GOTO   20C
0A0A:  BSF    63.7
0A0B:  GOTO   2BC
0A0C:  BCF    63.7
0A0D:  GOTO   2BC
0A0E:  MOVF   59,W
0A0F:  MOVWF  5D
0A10:  MOVWF  77
0A11:  MOVF   55,W
0A12:  SUBWF  5D,F
0A13:  MOVF   56,W
0A14:  MOVWF  63
0A15:  BSF    63.7
0A16:  MOVF   57,W
0A17:  MOVWF  62
0A18:  MOVF   58,W
0A19:  MOVWF  61
0A1A:  CLRF   60
0A1B:  BCF    03.0
0A1C:  RRF    63,F
0A1D:  RRF    62,F
0A1E:  RRF    61,F
0A1F:  RRF    60,F
0A20:  DECFSZ 5D,F
0A21:  GOTO   21A
0A22:  BTFSS  5E.7
0A23:  GOTO   227
0A24:  BSF    5F.1
0A25:  GOTO   2C8
0A26:  BCF    5F.1
0A27:  BCF    5D.0
0A28:  BSF    5F.5
0A29:  MOVLW  5C
0A2A:  MOVWF  04
0A2B:  BCF    03.7
0A2C:  GOTO   2DD
0A2D:  BCF    5F.5
0A2E:  BTFSC  5E.7
0A2F:  GOTO   23A
0A30:  BTFSS  5D.0
0A31:  GOTO   245
0A32:  RRF    63,F
0A33:  RRF    62,F
0A34:  RRF    61,F
0A35:  RRF    60,F
0A36:  INCF   77,F
0A37:  BTFSC  03.2
0A38:  GOTO   2C3
0A39:  GOTO   245
0A3A:  BTFSC  63.7
0A3B:  GOTO   248
0A3C:  BCF    03.0
0A3D:  RLF    60,F
0A3E:  RLF    61,F
0A3F:  RLF    62,F
0A40:  RLF    63,F
0A41:  DECF   77,F
0A42:  BTFSC  03.2
0A43:  GOTO   2C3
0A44:  GOTO   23A
0A45:  BSF    5F.7
0A46:  GOTO   270
0A47:  BCF    5F.7
0A48:  MOVF   5A,W
0A49:  MOVWF  5E
0A4A:  BTFSS  5E.7
0A4B:  GOTO   24E
0A4C:  BSF    63.7
0A4D:  GOTO   2BC
0A4E:  BCF    63.7
0A4F:  GOTO   2BC
0A50:  MOVF   5A,W
0A51:  MOVWF  63
0A52:  BSF    63.7
0A53:  MOVF   5B,W
0A54:  MOVWF  62
0A55:  MOVF   5C,W
0A56:  MOVWF  61
0A57:  BTFSS  5E.7
0A58:  GOTO   25D
0A59:  BCF    63.7
0A5A:  BSF    5F.2
0A5B:  GOTO   2C8
0A5C:  BCF    5F.2
0A5D:  CLRF   60
0A5E:  BCF    5D.0
0A5F:  MOVLW  58
0A60:  MOVWF  04
0A61:  BCF    03.7
0A62:  GOTO   2DD
0A63:  BTFSC  5E.7
0A64:  GOTO   286
0A65:  MOVF   56,W
0A66:  MOVWF  5E
0A67:  BTFSS  5D.0
0A68:  GOTO   270
0A69:  RRF    63,F
0A6A:  RRF    62,F
0A6B:  RRF    61,F
0A6C:  RRF    60,F
0A6D:  INCF   77,F
0A6E:  BTFSC  03.2
0A6F:  GOTO   2C3
0A70:  BTFSS  60.7
0A71:  GOTO   281
0A72:  INCF   61,F
0A73:  BTFSS  03.2
0A74:  GOTO   281
0A75:  INCF   62,F
0A76:  BTFSS  03.2
0A77:  GOTO   281
0A78:  INCF   63,F
0A79:  BTFSS  03.2
0A7A:  GOTO   281
0A7B:  RRF    63,F
0A7C:  RRF    62,F
0A7D:  RRF    61,F
0A7E:  INCF   77,F
0A7F:  BTFSC  03.2
0A80:  GOTO   2C3
0A81:  BTFSC  5F.6
0A82:  GOTO   205
0A83:  BTFSC  5F.7
0A84:  GOTO   247
0A85:  GOTO   2A5
0A86:  MOVLW  80
0A87:  XORWF  63,F
0A88:  BTFSS  63.7
0A89:  GOTO   28E
0A8A:  GOTO   2C8
0A8B:  MOVF   5A,W
0A8C:  MOVWF  5E
0A8D:  GOTO   29B
0A8E:  MOVF   56,W
0A8F:  MOVWF  5E
0A90:  MOVF   63,F
0A91:  BTFSS  03.2
0A92:  GOTO   29B
0A93:  MOVF   62,F
0A94:  BTFSS  03.2
0A95:  GOTO   29B
0A96:  MOVF   61,F
0A97:  BTFSS  03.2
0A98:  GOTO   29B
0A99:  CLRF   77
0A9A:  GOTO   2BC
0A9B:  BTFSC  63.7
0A9C:  GOTO   2A5
0A9D:  BCF    03.0
0A9E:  RLF    60,F
0A9F:  RLF    61,F
0AA0:  RLF    62,F
0AA1:  RLF    63,F
0AA2:  DECFSZ 77,F
0AA3:  GOTO   29B
0AA4:  GOTO   2C3
0AA5:  BTFSS  5E.7
0AA6:  GOTO   2A9
0AA7:  BSF    63.7
0AA8:  GOTO   2BC
0AA9:  BCF    63.7
0AAA:  GOTO   2BC
0AAB:  MOVF   59,W
0AAC:  MOVWF  77
0AAD:  MOVF   5A,W
0AAE:  MOVWF  63
0AAF:  MOVF   5B,W
0AB0:  MOVWF  62
0AB1:  MOVF   5C,W
0AB2:  MOVWF  61
0AB3:  GOTO   2BC
0AB4:  MOVF   55,W
0AB5:  MOVWF  77
0AB6:  MOVF   56,W
0AB7:  MOVWF  63
0AB8:  MOVF   57,W
0AB9:  MOVWF  62
0ABA:  MOVF   58,W
0ABB:  MOVWF  61
0ABC:  MOVF   63,W
0ABD:  MOVWF  78
0ABE:  MOVF   62,W
0ABF:  MOVWF  79
0AC0:  MOVF   61,W
0AC1:  MOVWF  7A
0AC2:  GOTO   2FB
0AC3:  CLRF   77
0AC4:  CLRF   78
0AC5:  CLRF   79
0AC6:  CLRF   7A
0AC7:  GOTO   2FB
0AC8:  CLRF   60
0AC9:  COMF   61,F
0ACA:  COMF   62,F
0ACB:  COMF   63,F
0ACC:  COMF   60,F
0ACD:  INCF   60,F
0ACE:  BTFSS  03.2
0ACF:  GOTO   2D6
0AD0:  INCF   61,F
0AD1:  BTFSS  03.2
0AD2:  GOTO   2D6
0AD3:  INCF   62,F
0AD4:  BTFSC  03.2
0AD5:  INCF   63,F
0AD6:  BTFSC  5F.0
0AD7:  GOTO   1E4
0AD8:  BTFSC  5F.1
0AD9:  GOTO   226
0ADA:  BTFSC  5F.2
0ADB:  GOTO   25C
0ADC:  GOTO   28B
0ADD:  MOVF   00,W
0ADE:  ADDWF  61,F
0ADF:  BTFSS  03.0
0AE0:  GOTO   2E7
0AE1:  INCF   62,F
0AE2:  BTFSS  03.2
0AE3:  GOTO   2E7
0AE4:  INCF   63,F
0AE5:  BTFSC  03.2
0AE6:  BSF    5D.0
0AE7:  DECF   04,F
0AE8:  MOVF   00,W
0AE9:  ADDWF  62,F
0AEA:  BTFSS  03.0
0AEB:  GOTO   2EF
0AEC:  INCF   63,F
0AED:  BTFSC  03.2
0AEE:  BSF    5D.0
0AEF:  DECF   04,F
0AF0:  MOVF   00,W
0AF1:  BTFSS  00.7
0AF2:  XORLW  80
0AF3:  ADDWF  63,F
0AF4:  BTFSC  03.0
0AF5:  BSF    5D.0
0AF6:  BTFSC  5F.4
0AF7:  GOTO   1EB
0AF8:  BTFSC  5F.5
0AF9:  GOTO   22D
0AFA:  GOTO   263
0AFB:  RETURN
0AFC:  MOVLW  8E
0AFD:  MOVWF  77
0AFE:  MOVF   51,W
0AFF:  SUBWF  77,F
0B00:  MOVF   52,W
0B01:  MOVWF  79
0B02:  MOVF   53,W
0B03:  MOVWF  78
0B04:  BSF    79.7
0B05:  MOVF   77,F
0B06:  BTFSC  03.2
0B07:  GOTO   313
0B08:  BCF    03.0
0B09:  MOVF   79,F
0B0A:  BTFSS  03.2
0B0B:  GOTO   30F
0B0C:  MOVF   78,F
0B0D:  BTFSC  03.2
0B0E:  GOTO   313
0B0F:  RRF    79,F
0B10:  RRF    78,F
0B11:  DECFSZ 77,F
0B12:  GOTO   308
0B13:  BTFSS  52.7
0B14:  GOTO   31A
0B15:  COMF   78,F
0B16:  COMF   79,F
0B17:  INCF   78,F
0B18:  BTFSC  03.2
0B19:  INCF   79,F
0B1A:  RETURN
*
0BB9:  MOVF   00,F
0BBA:  BTFSC  03.2
0BBB:  GOTO   3CF
0BBC:  CLRF   4C
0BBD:  MOVF   04,W
0BBE:  MOVWF  4B
0BBF:  BCF    4C.0
0BC0:  BTFSC  03.7
0BC1:  BSF    4C.0
0BC2:  MOVF   00,W
0BC3:  BTFSS  0C.4
0BC4:  GOTO   3C3
0BC5:  MOVWF  19
0BC6:  MOVF   4B,W
0BC7:  MOVWF  04
0BC8:  BCF    03.7
0BC9:  BTFSC  4C.0
0BCA:  BSF    03.7
0BCB:  INCF   04,F
0BCC:  BTFSC  03.2
0BCD:  INCF   05,F
0BCE:  GOTO   3B9
0BCF:  BSF    0A.3
0BD0:  BCF    0A.4
0BD1:  GOTO   586 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=8000000) 
0BD2:  MOVLW  4B
0BD3:  MOVWF  04
0BD4:  BCF    03.7
0BD5:  MOVF   00,W
0BD6:  BTFSC  03.2
0BD7:  GOTO   3E5
0BD8:  MOVLW  02
0BD9:  MOVWF  78
0BDA:  CLRF   77
0BDB:  DECFSZ 77,F
0BDC:  GOTO   3DB
0BDD:  DECFSZ 78,F
0BDE:  GOTO   3DA
0BDF:  MOVLW  97
0BE0:  MOVWF  77
0BE1:  DECFSZ 77,F
0BE2:  GOTO   3E1
0BE3:  DECFSZ 00,F
0BE4:  GOTO   3D8
0BE5:  BSF    0A.3
0BE6:  BCF    0A.4
0BE7:  GOTO   591 (RETURN)
.................... #use rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7, bits=8, parity=N) 
....................  
.................... #fuses XT, NOWDT,NOPROTECT,NOLVP 
.................... #include <HDM64GS12.c> //Manejo del display gráfico 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B0   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B1   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B2   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B4   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B5   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C0   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    unsigned int8 left[512]; 
....................    unsigned int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
04D5:  BCF    28.0
04D6:  MOVF   28,W
04D7:  BSF    03.5
04D8:  MOVWF  07
04D9:  BCF    03.5
04DA:  BSF    07.0
....................    output_low(GLCD_E); 
04DB:  BSF    03.5
04DC:  BCF    06.5
04DD:  BCF    03.5
04DE:  BCF    06.5
....................    output_low(GLCD_CS1); 
04DF:  BSF    03.5
04E0:  BCF    06.0
04E1:  BCF    03.5
04E2:  BCF    06.0
....................    output_low(GLCD_CS2); 
04E3:  BSF    03.5
04E4:  BCF    06.1
04E5:  BCF    03.5
04E6:  BCF    06.1
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
04E7:  BSF    03.5
04E8:  BCF    06.2
04E9:  BCF    03.5
04EA:  BCF    06.2
04EB:  CLRF   27
04EC:  BTFSC  0B.7
04ED:  BSF    27.7
04EE:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
04EF:  BSF    03.5
04F0:  CLRF   36
04F1:  MOVLW  C0
04F2:  MOVWF  37
04F3:  BCF    03.5
04F4:  CALL   268
04F5:  BTFSC  27.7
04F6:  BSF    0B.7
04F7:  CLRF   27
04F8:  BTFSC  0B.7
04F9:  BSF    27.7
04FA:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
04FB:  MOVLW  01
04FC:  BSF    03.5
04FD:  MOVWF  36
04FE:  MOVLW  C0
04FF:  MOVWF  37
0500:  BCF    03.5
0501:  CALL   268
0502:  BTFSC  27.7
0503:  BSF    0B.7
0504:  CLRF   27
0505:  BTFSC  0B.7
0506:  BSF    27.7
0507:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
0508:  BSF    03.5
0509:  CLRF   36
050A:  MOVLW  40
050B:  MOVWF  37
050C:  BCF    03.5
050D:  CALL   268
050E:  BTFSC  27.7
050F:  BSF    0B.7
0510:  CLRF   27
0511:  BTFSC  0B.7
0512:  BSF    27.7
0513:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
0514:  MOVLW  01
0515:  BSF    03.5
0516:  MOVWF  36
0517:  MOVLW  40
0518:  MOVWF  37
0519:  BCF    03.5
051A:  CALL   268
051B:  BTFSC  27.7
051C:  BSF    0B.7
051D:  CLRF   27
051E:  BTFSC  0B.7
051F:  BSF    27.7
0520:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
0521:  BSF    03.5
0522:  CLRF   36
0523:  MOVLW  B8
0524:  MOVWF  37
0525:  BCF    03.5
0526:  CALL   268
0527:  BTFSC  27.7
0528:  BSF    0B.7
0529:  CLRF   27
052A:  BTFSC  0B.7
052B:  BSF    27.7
052C:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
052D:  MOVLW  01
052E:  BSF    03.5
052F:  MOVWF  36
0530:  MOVLW  B8
0531:  MOVWF  37
0532:  BCF    03.5
0533:  CALL   268
0534:  BTFSC  27.7
0535:  BSF    0B.7
....................  
....................    if(mode == ON) 
0536:  DECFSZ 4B,W
0537:  GOTO   552
0538:  CLRF   27
0539:  BTFSC  0B.7
053A:  BSF    27.7
053B:  BCF    0B.7
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
053C:  BSF    03.5
053D:  CLRF   36
053E:  MOVLW  3F
053F:  MOVWF  37
0540:  BCF    03.5
0541:  CALL   268
0542:  BTFSC  27.7
0543:  BSF    0B.7
0544:  CLRF   27
0545:  BTFSC  0B.7
0546:  BSF    27.7
0547:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
0548:  MOVLW  01
0549:  BSF    03.5
054A:  MOVWF  36
054B:  MOVLW  3F
054C:  MOVWF  37
054D:  BCF    03.5
054E:  CALL   268
054F:  BTFSC  27.7
0550:  BSF    0B.7
....................    } 
0551:  GOTO   56B
0552:  CLRF   27
0553:  BTFSC  0B.7
0554:  BSF    27.7
0555:  BCF    0B.7
....................    else 
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
0556:  BSF    03.5
0557:  CLRF   36
0558:  MOVLW  3E
0559:  MOVWF  37
055A:  BCF    03.5
055B:  CALL   268
055C:  BTFSC  27.7
055D:  BSF    0B.7
055E:  CLRF   27
055F:  BTFSC  0B.7
0560:  BSF    27.7
0561:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
0562:  MOVLW  01
0563:  BSF    03.5
0564:  MOVWF  36
0565:  MOVLW  3E
0566:  MOVWF  37
0567:  BCF    03.5
0568:  CALL   268
0569:  BTFSC  27.7
056A:  BSF    0B.7
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
056B:  CLRF   4C
....................  
....................    #ifdef FAST_GLCD 
*
05FD:  BSF    0A.3
05FE:  BCF    0A.4
05FF:  GOTO   413 (RETURN)
....................    glcd_update(); 
....................    #endif 
.................... } 
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    unsigned int8 i, j; 
....................    unsigned int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
*
02C2:  BSF    03.5
02C3:  BCF    33.0
.................... { 
....................    unsigned int8* p; 
....................    unsigned int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
02C4:  MOVF   2F,W
02C5:  SUBLW  3F
02C6:  BTFSC  03.0
02C7:  GOTO   2CB
....................    { 
....................       x -= 64; 
02C8:  MOVLW  40
02C9:  SUBWF  2F,F
....................       side = GLCD_RIGHT; 
02CA:  BSF    33.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
02CB:  BCF    06.2
02CC:  BCF    03.5
02CD:  BCF    06.2
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
02CE:  BSF    03.5
02CF:  BCF    2F.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
02D0:  BSF    2F.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
02D1:  MOVLW  00
02D2:  BTFSC  33.0
02D3:  MOVLW  01
02D4:  MOVWF  34
02D5:  MOVWF  36
02D6:  MOVF   2F,W
02D7:  MOVWF  37
02D8:  BCF    03.5
02D9:  CALL   268
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
02DA:  MOVLW  00
02DB:  BSF    03.5
02DC:  BTFSC  33.0
02DD:  MOVLW  01
02DE:  MOVWF  34
02DF:  RRF    30,W
02E0:  MOVWF  77
02E1:  RRF    77,F
02E2:  RRF    77,F
02E3:  MOVLW  1F
02E4:  ANDWF  77,F
02E5:  MOVF   77,W
02E6:  ANDLW  BF
02E7:  IORLW  B8
02E8:  MOVWF  35
02E9:  MOVF   34,W
02EA:  MOVWF  36
02EB:  MOVF   35,W
02EC:  MOVWF  37
02ED:  BCF    03.5
02EE:  CALL   268
....................    output_high(GLCD_DI);                        // Set for data 
02EF:  BSF    03.5
02F0:  BCF    06.2
02F1:  BCF    03.5
02F2:  BSF    06.2
....................    glcd_readByte(side);                         // Need two reads to get data 
02F3:  MOVLW  00
02F4:  BSF    03.5
02F5:  BTFSC  33.0
02F6:  MOVLW  01
02F7:  MOVWF  34
02F8:  MOVWF  35
02F9:  BCF    03.5
02FA:  CALL   293
....................    data = glcd_readByte(side);                  //  at new address 
02FB:  MOVLW  00
02FC:  BSF    03.5
02FD:  BTFSC  33.0
02FE:  MOVLW  01
02FF:  MOVWF  34
0300:  MOVWF  35
0301:  BCF    03.5
0302:  CALL   293
0303:  MOVF   78,W
0304:  BSF    03.5
0305:  MOVWF  32
....................  
....................    if(color == ON) 
0306:  DECFSZ 31,W
0307:  GOTO   318
....................       bit_set(data, y%8);        // Turn the pixel on 
0308:  MOVF   30,W
0309:  ANDLW  07
030A:  MOVWF  34
030B:  MOVLW  01
030C:  MOVWF  77
030D:  MOVF   34,W
030E:  MOVWF  78
030F:  BTFSC  03.2
0310:  GOTO   315
0311:  BCF    03.0
0312:  RLF    77,F
0313:  DECFSZ 78,F
0314:  GOTO   311
0315:  MOVF   77,W
0316:  IORWF  32,F
0317:  GOTO   328
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
0318:  MOVF   30,W
0319:  ANDLW  07
031A:  MOVWF  34
031B:  MOVLW  01
031C:  MOVWF  77
031D:  MOVF   34,W
031E:  MOVWF  78
031F:  BTFSC  03.2
0320:  GOTO   325
0321:  BCF    03.0
0322:  RLF    77,F
0323:  DECFSZ 78,F
0324:  GOTO   321
0325:  MOVF   77,W
0326:  XORLW  FF
0327:  ANDWF  32,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
0328:  BCF    06.2
0329:  BCF    03.5
032A:  BCF    06.2
....................    glcd_writeByte(side, x);      // Set the horizontal address 
032B:  MOVLW  00
032C:  BSF    03.5
032D:  BTFSC  33.0
032E:  MOVLW  01
032F:  MOVWF  34
0330:  MOVWF  36
0331:  MOVF   2F,W
0332:  MOVWF  37
0333:  BCF    03.5
0334:  CALL   268
....................    output_high(GLCD_DI);         // Set for data 
0335:  BSF    03.5
0336:  BCF    06.2
0337:  BCF    03.5
0338:  BSF    06.2
....................    glcd_writeByte(side, data);   // Write the pixel data 
0339:  MOVLW  00
033A:  BSF    03.5
033B:  BTFSC  33.0
033C:  MOVLW  01
033D:  MOVWF  34
033E:  MOVWF  36
033F:  MOVF   32,W
0340:  MOVWF  37
0341:  BCF    03.5
0342:  CALL   268
0343:  RETURN
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    unsigned int8  data; 
....................    unsigned int8  *p1, *p2; 
....................    unsigned int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................    	*p1++ = data; 
....................    	*p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    unsigned int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
056C:  CLRF   4D
056D:  MOVF   4D,W
056E:  SUBLW  07
056F:  BTFSS  03.0
0570:  GOTO   5FD
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
0571:  BSF    03.5
0572:  BCF    06.2
0573:  BCF    03.5
0574:  BCF    06.2
0575:  CLRF   27
0576:  BTFSC  0B.7
0577:  BSF    27.7
0578:  BCF    0B.7
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
0579:  BSF    03.5
057A:  CLRF   36
057B:  MOVLW  40
057C:  MOVWF  37
057D:  BCF    03.5
057E:  CALL   268
057F:  BTFSC  27.7
0580:  BSF    0B.7
0581:  CLRF   27
0582:  BTFSC  0B.7
0583:  BSF    27.7
0584:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
0585:  MOVLW  01
0586:  BSF    03.5
0587:  MOVWF  36
0588:  MOVLW  40
0589:  MOVWF  37
058A:  BCF    03.5
058B:  CALL   268
058C:  BTFSC  27.7
058D:  BSF    0B.7
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
058E:  MOVF   4D,W
058F:  IORLW  B8
0590:  MOVWF  4F
0591:  CLRF   27
0592:  BTFSC  0B.7
0593:  BSF    27.7
0594:  BCF    0B.7
0595:  BSF    03.5
0596:  CLRF   36
0597:  BCF    03.5
0598:  MOVF   4F,W
0599:  BSF    03.5
059A:  MOVWF  37
059B:  BCF    03.5
059C:  CALL   268
059D:  BTFSC  27.7
059E:  BSF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
059F:  MOVF   4D,W
05A0:  IORLW  B8
05A1:  MOVWF  4F
05A2:  CLRF   27
05A3:  BTFSC  0B.7
05A4:  BSF    27.7
05A5:  BCF    0B.7
05A6:  MOVLW  01
05A7:  BSF    03.5
05A8:  MOVWF  36
05A9:  BCF    03.5
05AA:  MOVF   4F,W
05AB:  BSF    03.5
05AC:  MOVWF  37
05AD:  BCF    03.5
05AE:  CALL   268
05AF:  BTFSC  27.7
05B0:  BSF    0B.7
....................       output_high(GLCD_DI);                     // Set for data 
05B1:  BSF    03.5
05B2:  BCF    06.2
05B3:  BCF    03.5
05B4:  BSF    06.2
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
05B5:  CLRF   4E
05B6:  MOVF   4E,W
05B7:  SUBLW  3F
05B8:  BTFSS  03.0
05B9:  GOTO   5FB
05BA:  CLRF   27
05BB:  BTFSC  0B.7
05BC:  BSF    27.7
05BD:  BCF    0B.7
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
05BE:  MOVLW  FF
05BF:  BSF    03.5
05C0:  MOVWF  2F
05C1:  BCF    03.5
05C2:  MOVF   4C,W
05C3:  BSF    03.5
05C4:  MOVWF  30
05C5:  BCF    03.5
05C6:  CALL   241
05C7:  BTFSC  27.7
05C8:  BSF    0B.7
05C9:  MOVF   78,W
05CA:  MOVWF  4F
05CB:  CLRF   27
05CC:  BTFSC  0B.7
05CD:  BSF    27.7
05CE:  BCF    0B.7
05CF:  BSF    03.5
05D0:  CLRF   36
05D1:  BCF    03.5
05D2:  MOVF   78,W
05D3:  BSF    03.5
05D4:  MOVWF  37
05D5:  BCF    03.5
05D6:  CALL   268
05D7:  BTFSC  27.7
05D8:  BSF    0B.7
05D9:  CLRF   27
05DA:  BTFSC  0B.7
05DB:  BSF    27.7
05DC:  BCF    0B.7
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
05DD:  MOVLW  FF
05DE:  BSF    03.5
05DF:  MOVWF  2F
05E0:  BCF    03.5
05E1:  MOVF   4C,W
05E2:  BSF    03.5
05E3:  MOVWF  30
05E4:  BCF    03.5
05E5:  CALL   241
05E6:  BTFSC  27.7
05E7:  BSF    0B.7
05E8:  MOVF   78,W
05E9:  MOVWF  4F
05EA:  CLRF   27
05EB:  BTFSC  0B.7
05EC:  BSF    27.7
05ED:  BCF    0B.7
05EE:  MOVLW  01
05EF:  BSF    03.5
05F0:  MOVWF  36
05F1:  BCF    03.5
05F2:  MOVF   78,W
05F3:  BSF    03.5
05F4:  MOVWF  37
05F5:  BCF    03.5
05F6:  CALL   268
05F7:  BTFSC  27.7
05F8:  BSF    0B.7
05F9:  INCF   4E,F
05FA:  GOTO   5B6
....................       } 
05FB:  INCF   4D,F
05FC:  GOTO   56D
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    set_tris_d(0x00); 
*
0268:  MOVLW  00
0269:  BSF    03.5
026A:  MOVWF  08
....................     
....................    output_low(GLCD_RW);       // Set for writing 
026B:  BCF    06.4
026C:  BCF    03.5
026D:  BCF    06.4
....................  
.................... 	 if(side)                   // Choose which side to write to 
026E:  BSF    03.5
026F:  MOVF   36,F
0270:  BTFSC  03.2
0271:  GOTO   277
....................       output_high(GLCD_CS2); 
0272:  BCF    06.1
0273:  BCF    03.5
0274:  BSF    06.1
0275:  GOTO   27A
0276:  BSF    03.5
....................    else 
....................       output_high(GLCD_CS1); 
0277:  BCF    06.0
0278:  BCF    03.5
0279:  BSF    06.0
....................  
.................... 	 delay_us(1); 
027A:  GOTO   27B
....................  
....................    output_d(data);            // Put the data on the port 
027B:  BSF    03.5
027C:  CLRF   08
027D:  MOVF   37,W
027E:  BCF    03.5
027F:  MOVWF  08
....................    delay_us(1); 
0280:  GOTO   281
....................    output_high(GLCD_E);       // Pulse the enable pin 
0281:  BSF    03.5
0282:  BCF    06.5
0283:  BCF    03.5
0284:  BSF    06.5
....................    delay_us(1); 
0285:  GOTO   286
....................    output_low(GLCD_E); 
0286:  BSF    03.5
0287:  BCF    06.5
0288:  BCF    03.5
0289:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
028A:  BSF    03.5
028B:  BCF    06.0
028C:  BCF    03.5
028D:  BCF    06.0
....................    output_low(GLCD_CS2); 
028E:  BSF    03.5
028F:  BCF    06.1
0290:  BCF    03.5
0291:  BCF    06.1
0292:  RETURN
.................... } 
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
0293:  MOVLW  FF
0294:  BSF    03.5
0295:  MOVWF  08
....................    output_high(GLCD_RW);      // Set for reading 
0296:  BCF    06.4
0297:  BCF    03.5
0298:  BSF    06.4
....................  
....................    if(side)                   // Choose which side to write to 
0299:  BSF    03.5
029A:  MOVF   35,F
029B:  BTFSC  03.2
029C:  GOTO   2A2
....................       output_high(GLCD_CS2); 
029D:  BCF    06.1
029E:  BCF    03.5
029F:  BSF    06.1
02A0:  GOTO   2A5
02A1:  BSF    03.5
....................    else 
....................       output_high(GLCD_CS1); 
02A2:  BCF    06.0
02A3:  BCF    03.5
02A4:  BSF    06.0
....................  
....................    delay_us(1); 
02A5:  GOTO   2A6
....................    output_high(GLCD_E);       // Pulse the enable pin 
02A6:  BSF    03.5
02A7:  BCF    06.5
02A8:  BCF    03.5
02A9:  BSF    06.5
....................    delay_us(1); 
02AA:  GOTO   2AB
....................    data = input_d();          // Get the data from the display's output register 
02AB:  MOVLW  FF
02AC:  BSF    03.5
02AD:  MOVWF  08
02AE:  BCF    03.5
02AF:  MOVF   08,W
02B0:  BSF    03.5
02B1:  MOVWF  36
....................    output_low(GLCD_E); 
02B2:  BCF    06.5
02B3:  BCF    03.5
02B4:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
02B5:  BSF    03.5
02B6:  BCF    06.0
02B7:  BCF    03.5
02B8:  BCF    06.0
....................    output_low(GLCD_CS2); 
02B9:  BSF    03.5
02BA:  BCF    06.1
02BB:  BCF    03.5
02BC:  BCF    06.1
....................    return data;               // Return the read data 
02BD:  BSF    03.5
02BE:  MOVF   36,W
02BF:  MOVWF  78
02C0:  BCF    03.5
02C1:  RETURN
.................... } 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> //Funciones para dibujar y escribir en el display 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
0600:  MOVLW  01
0601:  MOVWF  5B
0602:  MOVWF  5C
0603:  CLRF   61
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0604:  MOVF   52,W
0605:  SUBWF  54,W
0606:  MOVWF  62
0607:  MOVF   62,W
0608:  BTFSS  62.7
0609:  GOTO   60C
060A:  MOVF   62,W
060B:  SUBLW  00
060C:  CLRF   7A
060D:  MOVWF  59
060E:  MOVF   7A,W
060F:  MOVWF  5A
....................    dy = abs((signed int8)(y2 - y1)); 
0610:  MOVF   53,W
0611:  SUBWF  55,W
0612:  MOVWF  62
0613:  MOVF   62,W
0614:  BTFSS  62.7
0615:  GOTO   618
0616:  MOVF   62,W
0617:  SUBLW  00
0618:  CLRF   7A
0619:  MOVWF  57
061A:  MOVF   7A,W
061B:  MOVWF  58
....................    #endif 
....................  
....................    if(x1 > x2) 
061C:  MOVF   52,W
061D:  SUBWF  54,W
061E:  BTFSC  03.0
061F:  GOTO   622
....................       addx = -1; 
0620:  MOVLW  FF
0621:  MOVWF  5B
....................    if(y1 > y2) 
0622:  MOVF   53,W
0623:  SUBWF  55,W
0624:  BTFSC  03.0
0625:  GOTO   628
....................       addy = -1; 
0626:  MOVLW  FF
0627:  MOVWF  5C
....................  
....................    if(dx >= dy) 
0628:  MOVF   58,W
0629:  SUBWF  5A,W
062A:  BTFSS  03.0
062B:  GOTO   680
062C:  BTFSS  03.2
062D:  GOTO   632
062E:  MOVF   57,W
062F:  SUBWF  59,W
0630:  BTFSS  03.0
0631:  GOTO   680
....................    { 
....................       dy *= 2; 
0632:  BCF    03.0
0633:  RLF    57,F
0634:  RLF    58,F
....................       P = dy - dx; 
0635:  MOVF   59,W
0636:  SUBWF  57,W
0637:  MOVWF  77
0638:  MOVF   58,W
0639:  MOVWF  7A
063A:  MOVF   5A,W
063B:  BTFSS  03.0
063C:  INCFSZ 5A,W
063D:  SUBWF  7A,F
063E:  MOVF   77,W
063F:  MOVWF  5D
0640:  MOVF   7A,W
0641:  MOVWF  5E
....................       diff = P - dx; 
0642:  MOVF   59,W
0643:  SUBWF  5D,W
0644:  MOVWF  5F
0645:  MOVF   5E,W
0646:  MOVWF  60
0647:  MOVF   5A,W
0648:  BTFSS  03.0
0649:  INCFSZ 5A,W
064A:  SUBWF  60,F
....................  
....................       for(; i<=dx; ++i) 
064B:  MOVF   5A,F
064C:  BTFSS  03.2
064D:  GOTO   652
064E:  MOVF   61,W
064F:  SUBWF  59,W
0650:  BTFSS  03.0
0651:  GOTO   67F
0652:  CLRF   27
0653:  BTFSC  0B.7
0654:  BSF    27.7
0655:  BCF    0B.7
....................       { 
....................          glcd_pixel(x1, y1, color); 
0656:  MOVF   52,W
0657:  BSF    03.5
0658:  MOVWF  2F
0659:  BCF    03.5
065A:  MOVF   53,W
065B:  BSF    03.5
065C:  MOVWF  30
065D:  BCF    03.5
065E:  MOVF   56,W
065F:  BSF    03.5
0660:  MOVWF  31
0661:  BCF    03.5
0662:  CALL   2C2
0663:  BTFSC  27.7
0664:  BSF    0B.7
....................  
....................          if(P < 0) 
0665:  BTFSS  5E.7
0666:  GOTO   671
....................          { 
....................             P  += dy; 
0667:  MOVF   57,W
0668:  ADDWF  5D,F
0669:  MOVF   58,W
066A:  BTFSC  03.0
066B:  INCFSZ 58,W
066C:  ADDWF  5E,F
....................             x1 += addx; 
066D:  MOVF   5B,W
066E:  ADDWF  52,W
066F:  MOVWF  52
....................          } 
0670:  GOTO   67D
....................          else 
....................          { 
....................             P  += diff; 
0671:  MOVF   5F,W
0672:  ADDWF  5D,F
0673:  MOVF   60,W
0674:  BTFSC  03.0
0675:  INCFSZ 60,W
0676:  ADDWF  5E,F
....................             x1 += addx; 
0677:  MOVF   5B,W
0678:  ADDWF  52,W
0679:  MOVWF  52
....................             y1 += addy; 
067A:  MOVF   5C,W
067B:  ADDWF  53,W
067C:  MOVWF  53
....................          } 
067D:  INCF   61,F
067E:  GOTO   64B
....................       } 
....................    } 
067F:  GOTO   6CD
....................    else 
....................    { 
....................       dx *= 2; 
0680:  BCF    03.0
0681:  RLF    59,F
0682:  RLF    5A,F
....................       P = dx - dy; 
0683:  MOVF   57,W
0684:  SUBWF  59,W
0685:  MOVWF  77
0686:  MOVF   5A,W
0687:  MOVWF  7A
0688:  MOVF   58,W
0689:  BTFSS  03.0
068A:  INCFSZ 58,W
068B:  SUBWF  7A,F
068C:  MOVF   77,W
068D:  MOVWF  5D
068E:  MOVF   7A,W
068F:  MOVWF  5E
....................       diff = P - dy; 
0690:  MOVF   57,W
0691:  SUBWF  5D,W
0692:  MOVWF  5F
0693:  MOVF   5E,W
0694:  MOVWF  60
0695:  MOVF   58,W
0696:  BTFSS  03.0
0697:  INCFSZ 58,W
0698:  SUBWF  60,F
....................  
....................       for(; i<=dy; ++i) 
0699:  MOVF   58,F
069A:  BTFSS  03.2
069B:  GOTO   6A0
069C:  MOVF   61,W
069D:  SUBWF  57,W
069E:  BTFSS  03.0
069F:  GOTO   6CD
06A0:  CLRF   27
06A1:  BTFSC  0B.7
06A2:  BSF    27.7
06A3:  BCF    0B.7
....................       { 
....................          glcd_pixel(x1, y1, color); 
06A4:  MOVF   52,W
06A5:  BSF    03.5
06A6:  MOVWF  2F
06A7:  BCF    03.5
06A8:  MOVF   53,W
06A9:  BSF    03.5
06AA:  MOVWF  30
06AB:  BCF    03.5
06AC:  MOVF   56,W
06AD:  BSF    03.5
06AE:  MOVWF  31
06AF:  BCF    03.5
06B0:  CALL   2C2
06B1:  BTFSC  27.7
06B2:  BSF    0B.7
....................  
....................          if(P < 0) 
06B3:  BTFSS  5E.7
06B4:  GOTO   6BF
....................          { 
....................             P  += dx; 
06B5:  MOVF   59,W
06B6:  ADDWF  5D,F
06B7:  MOVF   5A,W
06B8:  BTFSC  03.0
06B9:  INCFSZ 5A,W
06BA:  ADDWF  5E,F
....................             y1 += addy; 
06BB:  MOVF   5C,W
06BC:  ADDWF  53,W
06BD:  MOVWF  53
....................          } 
06BE:  GOTO   6CB
....................          else 
....................          { 
....................             P  += diff; 
06BF:  MOVF   5F,W
06C0:  ADDWF  5D,F
06C1:  MOVF   60,W
06C2:  BTFSC  03.0
06C3:  INCFSZ 60,W
06C4:  ADDWF  5E,F
....................             x1 += addx; 
06C5:  MOVF   5B,W
06C6:  ADDWF  52,W
06C7:  MOVWF  52
....................             y1 += addy; 
06C8:  MOVF   5C,W
06C9:  ADDWF  53,W
06CA:  MOVWF  53
....................          } 
06CB:  INCF   61,F
06CC:  GOTO   699
....................       } 
....................    } 
06CD:  RETURN
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
0344:  BSF    03.5
0345:  MOVF   21,W
0346:  MOVWF  7A
0347:  MOVF   20,W
0348:  MOVWF  04
0349:  BCF    03.7
034A:  BTFSC  7A.0
034B:  BSF    03.7
034C:  MOVF   00,F
034D:  BTFSC  03.2
034E:  GOTO   438
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
034F:  MOVF   21,W
0350:  MOVWF  7A
0351:  MOVF   20,W
0352:  MOVWF  04
0353:  BCF    03.7
0354:  BTFSC  7A.0
0355:  BSF    03.7
0356:  MOVF   00,W
0357:  SUBLW  52
0358:  BTFSS  03.0
0359:  GOTO   37F
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
035A:  MOVF   21,W
035B:  MOVWF  7A
035C:  MOVF   20,W
035D:  MOVWF  04
035E:  BCF    03.7
035F:  BTFSC  7A.0
0360:  BSF    03.7
0361:  MOVLW  20
0362:  SUBWF  00,W
0363:  MOVWF  2E
0364:  MOVWF  2F
0365:  MOVLW  05
0366:  MOVWF  30
0367:  BCF    03.5
0368:  CALL   241
0369:  MOVF   78,W
036A:  BSF    03.5
036B:  MOVWF  2D
036C:  MOVWF  78
036D:  MOVLW  05
036E:  MOVWF  77
036F:  MOVLW  A8
0370:  MOVWF  04
0371:  BCF    03.7
0372:  MOVF   78,W
0373:  BCF    03.5
0374:  CALL   038
0375:  MOVWF  00
0376:  INCF   78,F
0377:  INCF   04,F
0378:  DECFSZ 77,F
0379:  GOTO   37B
037A:  GOTO   37D
037B:  BSF    03.5
037C:  GOTO   372
037D:  GOTO   3B5
037E:  BSF    03.5
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
037F:  MOVF   21,W
0380:  MOVWF  7A
0381:  MOVF   20,W
0382:  MOVWF  04
0383:  BCF    03.7
0384:  BTFSC  7A.0
0385:  BSF    03.7
0386:  MOVF   00,W
0387:  SUBLW  7E
0388:  BTFSS  03.0
0389:  GOTO   3AF
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
038A:  MOVF   21,W
038B:  MOVWF  7A
038C:  MOVF   20,W
038D:  MOVWF  04
038E:  BCF    03.7
038F:  BTFSC  7A.0
0390:  BSF    03.7
0391:  MOVLW  53
0392:  SUBWF  00,W
0393:  MOVWF  2E
0394:  MOVWF  2F
0395:  MOVLW  05
0396:  MOVWF  30
0397:  BCF    03.5
0398:  CALL   241
0399:  MOVF   78,W
039A:  BSF    03.5
039B:  MOVWF  2D
039C:  MOVWF  78
039D:  MOVLW  05
039E:  MOVWF  77
039F:  MOVLW  A8
03A0:  MOVWF  04
03A1:  BCF    03.7
03A2:  MOVF   78,W
03A3:  BCF    03.5
03A4:  CALL   13E
03A5:  MOVWF  00
03A6:  INCF   78,F
03A7:  INCF   04,F
03A8:  DECFSZ 77,F
03A9:  GOTO   3AB
03AA:  GOTO   3AD
03AB:  BSF    03.5
03AC:  GOTO   3A2
03AD:  GOTO   3B5
03AE:  BSF    03.5
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
03AF:  CLRF   28
03B0:  CLRF   29
03B1:  CLRF   2A
03B2:  CLRF   2B
03B3:  CLRF   2C
03B4:  BCF    03.5
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
03B5:  BSF    03.5
03B6:  MOVF   21,W
03B7:  MOVWF  7A
03B8:  MOVF   20,W
03B9:  MOVWF  04
03BA:  BCF    03.7
03BB:  BTFSC  7A.0
03BC:  BSF    03.7
03BD:  MOVF   00,W
03BE:  XORLW  0A
03BF:  BCF    03.5
03C0:  BTFSC  03.2
03C1:  GOTO   3C6
03C2:  XORLW  07
03C3:  BTFSC  03.2
03C4:  GOTO   3D1
03C5:  GOTO   3D3
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
03C6:  MOVLW  07
03C7:  BSF    03.5
03C8:  MOVWF  2F
03C9:  MOVF   22,W
03CA:  MOVWF  30
03CB:  BCF    03.5
03CC:  CALL   241
03CD:  MOVLW  01
03CE:  ADDWF  78,W
03CF:  ADDWF  7E,F
....................             continue; 
03D0:  GOTO   432
....................          case '\r': 
....................             x = 0; 
03D1:  CLRF   7D
....................             continue; 
03D2:  GOTO   432
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
03D3:  MOVLW  05
03D4:  BSF    03.5
03D5:  MOVWF  2F
03D6:  MOVF   22,W
03D7:  MOVWF  30
03D8:  BCF    03.5
03D9:  CALL   241
03DA:  MOVF   78,W
03DB:  ADDWF  7D,W
03DC:  SUBLW  7F
03DD:  BTFSC  03.0
03DE:  GOTO   3EA
....................       { 
....................          x = 0;                           // Set x at far left position 
03DF:  CLRF   7D
....................          y += 7*size + 1;                 // Set y at next position down 
03E0:  MOVLW  07
03E1:  BSF    03.5
03E2:  MOVWF  2F
03E3:  MOVF   22,W
03E4:  MOVWF  30
03E5:  BCF    03.5
03E6:  CALL   241
03E7:  MOVLW  01
03E8:  ADDWF  78,W
03E9:  ADDWF  7E,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
03EA:  BSF    03.5
03EB:  CLRF   24
03EC:  MOVF   24,W
03ED:  SUBLW  04
03EE:  BTFSS  03.0
03EF:  GOTO   431
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
03F0:  CLRF   25
03F1:  MOVF   25,W
03F2:  SUBLW  06
03F3:  BTFSS  03.0
03F4:  GOTO   42D
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
03F5:  MOVLW  A8
03F6:  ADDWF  24,W
03F7:  MOVWF  04
03F8:  BCF    03.7
03F9:  MOVF   00,W
03FA:  MOVWF  2D
03FB:  MOVWF  77
03FC:  MOVF   25,W
03FD:  MOVWF  78
03FE:  BTFSC  03.2
03FF:  GOTO   404
0400:  BCF    03.0
0401:  RRF    77,F
0402:  DECFSZ 78,F
0403:  GOTO   400
0404:  BTFSS  77.0
0405:  GOTO   42B
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
0406:  CLRF   26
0407:  MOVF   22,W
0408:  SUBWF  26,W
0409:  BTFSC  03.0
040A:  GOTO   42B
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
040B:  CLRF   27
040C:  MOVF   22,W
040D:  SUBWF  27,W
040E:  BTFSC  03.0
040F:  GOTO   429
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
0410:  MOVF   27,W
0411:  ADDWF  7D,W
0412:  MOVWF  2D
0413:  MOVF   25,W
0414:  MOVWF  2F
0415:  MOVF   22,W
0416:  MOVWF  30
0417:  BCF    03.5
0418:  CALL   241
0419:  MOVF   78,W
041A:  ADDWF  7E,W
041B:  BSF    03.5
041C:  ADDWF  26,W
041D:  MOVWF  2E
041E:  MOVF   2D,W
041F:  MOVWF  2F
0420:  MOVF   2E,W
0421:  MOVWF  30
0422:  MOVF   23,W
0423:  MOVWF  31
0424:  BCF    03.5
0425:  CALL   2C2
0426:  BSF    03.5
0427:  INCF   27,F
0428:  GOTO   40C
....................                   } 
0429:  INCF   26,F
042A:  GOTO   407
....................                } 
....................             } 
042B:  INCF   25,F
042C:  GOTO   3F1
....................          } 
042D:  INCF   24,F
042E:  MOVF   22,W
042F:  ADDWF  7D,F
0430:  GOTO   3EC
0431:  BCF    03.5
....................       } 
0432:  BSF    03.5
0433:  INCF   20,F
0434:  BTFSC  03.2
0435:  INCF   21,F
0436:  INCF   7D,F
0437:  GOTO   345
....................    } 
0438:  BCF    03.5
0439:  RETURN
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #byte trisb=0x86 
....................  
.................... ///Defines 
....................  
.................... #define escala -0.6 //Escala negativa para que crezca hacia arriba. 
.................... #define limpiarGrafico limpiarPorcion(0,20,128,44) //Limpia el area del grafico 
.................... #define offset 52 //es el offset para la altura de la grafica 
....................  
.................... ///Fin Defines 
....................  
.................... ///Variables Globales 
....................  
.................... int x=0; //Posicion inicial de x para graficar la temperatura 
.................... float y=0; //Posicion inicial de y (Vamos a tener que cambiarla a la primer temperatura leida) para graficar la temperatura 
.................... int1 habilitarLectura=0; //Variable para habilitar o deshabilitar la captura de datos del sensor 
.................... char received = '\0'; 
....................  
.................... ///Fin Variables Globales 
....................  
.................... ///Funciones 
....................  
.................... void limpiarPorcion(int x1, int y1, int x2, int y2){ //(x1, y1) = posición del primer pixel. (x2, y2) = cantididad de pixeles hacia la derecha y hacia abajo 
....................    for(int i=x1;i<x1+x2;i++){ 
043A:  MOVF   7B,W
043B:  BSF    03.5
043C:  MOVWF  20
043D:  MOVF   7D,W
043E:  ADDWF  7B,W
043F:  SUBWF  20,W
0440:  BTFSC  03.0
0441:  GOTO   455
....................       for(int j=y1;j<y1+y2;j++){ 
0442:  MOVF   7C,W
0443:  MOVWF  21
0444:  MOVF   7E,W
0445:  ADDWF  7C,W
0446:  SUBWF  21,W
0447:  BTFSC  03.0
0448:  GOTO   453
....................          glcd_pixel(i, j, OFF); //Apagamos el pixel. 
0449:  MOVF   20,W
044A:  MOVWF  2F
044B:  MOVF   21,W
044C:  MOVWF  30
044D:  CLRF   31
044E:  BCF    03.5
044F:  CALL   2C2
0450:  BSF    03.5
0451:  INCF   21,F
0452:  GOTO   444
....................       } 
0453:  INCF   20,F
0454:  GOTO   43D
....................    } 
0455:  BCF    03.5
0456:  RETURN
.................... } 
....................  
.................... void nuevaLinea(float temp){ //Funcion para graficar las nuevas lineas de temperatura 
*
0B1B:  MOVLW  01
0B1C:  ADDWF  29,W
0B1D:  MOVWF  4F
....................    int x1=x+1; 
....................    if(x1>128){ //Revisamos si sobrepasamos el tamaño de la pantalla 
0B1E:  MOVF   4F,W
0B1F:  SUBLW  80
0B20:  BTFSC  03.0
0B21:  GOTO   335
0B22:  CLRF   27
0B23:  BTFSC  0B.7
0B24:  BSF    27.7
0B25:  BCF    0B.7
....................       limpiarGrafico; //Limpiamos el area del grafico 
0B26:  CLRF   7B
0B27:  MOVLW  14
0B28:  MOVWF  7C
0B29:  MOVLW  80
0B2A:  MOVWF  7D
0B2B:  MOVLW  2C
0B2C:  MOVWF  7E
0B2D:  BCF    0A.3
0B2E:  CALL   43A
0B2F:  BSF    0A.3
0B30:  BTFSC  27.7
0B31:  BSF    0B.7
....................       x=0; 
0B32:  CLRF   29
....................       x1=1; 
0B33:  MOVLW  01
0B34:  MOVWF  4F
....................    } 
....................    glcd_line(x, (y*escala)+offset, x1, (temp*escala)+offset, ON); //multiplicamos por la escala para que la grafica entre en el area del grafico. El offset esta explicado arriba 
0B35:  MOVF   2D,W
0B36:  MOVWF  5B
0B37:  MOVF   2C,W
0B38:  MOVWF  5A
0B39:  MOVF   2B,W
0B3A:  MOVWF  59
0B3B:  MOVF   2A,W
0B3C:  MOVWF  58
0B3D:  MOVLW  9A
0B3E:  MOVWF  5F
0B3F:  MOVLW  99
0B40:  MOVWF  5E
0B41:  MOVWF  5D
0B42:  MOVLW  7E
0B43:  MOVWF  5C
0B44:  BCF    0A.3
0B45:  CALL   6ED
0B46:  BSF    0A.3
0B47:  MOVF   7A,W
0B48:  MOVWF  53
0B49:  MOVF   79,W
0B4A:  MOVWF  52
0B4B:  MOVF   78,W
0B4C:  MOVWF  51
0B4D:  MOVF   77,W
0B4E:  MOVWF  50
0B4F:  BCF    03.1
0B50:  MOVF   7A,W
0B51:  MOVWF  58
0B52:  MOVF   79,W
0B53:  MOVWF  57
0B54:  MOVF   78,W
0B55:  MOVWF  56
0B56:  MOVF   77,W
0B57:  MOVWF  55
0B58:  CLRF   5C
0B59:  CLRF   5B
0B5A:  MOVLW  50
0B5B:  MOVWF  5A
0B5C:  MOVLW  84
0B5D:  MOVWF  59
0B5E:  CALL   1BB
0B5F:  MOVF   7A,W
0B60:  MOVWF  54
0B61:  MOVF   79,W
0B62:  MOVWF  53
0B63:  MOVF   78,W
0B64:  MOVWF  52
0B65:  MOVF   77,W
0B66:  MOVWF  51
0B67:  CALL   2FC
0B68:  MOVF   78,W
0B69:  MOVWF  50
0B6A:  MOVF   4E,W
0B6B:  MOVWF  5B
0B6C:  MOVF   4D,W
0B6D:  MOVWF  5A
0B6E:  MOVF   4C,W
0B6F:  MOVWF  59
0B70:  MOVF   4B,W
0B71:  MOVWF  58
0B72:  MOVLW  9A
0B73:  MOVWF  5F
0B74:  MOVLW  99
0B75:  MOVWF  5E
0B76:  MOVWF  5D
0B77:  MOVLW  7E
0B78:  MOVWF  5C
0B79:  BCF    0A.3
0B7A:  CALL   6ED
0B7B:  BSF    0A.3
0B7C:  MOVF   7A,W
0B7D:  MOVWF  54
0B7E:  MOVF   79,W
0B7F:  MOVWF  53
0B80:  MOVF   78,W
0B81:  MOVWF  52
0B82:  MOVF   77,W
0B83:  MOVWF  51
0B84:  BCF    03.1
0B85:  MOVF   7A,W
0B86:  MOVWF  58
0B87:  MOVF   79,W
0B88:  MOVWF  57
0B89:  MOVF   78,W
0B8A:  MOVWF  56
0B8B:  MOVF   77,W
0B8C:  MOVWF  55
0B8D:  CLRF   5C
0B8E:  CLRF   5B
0B8F:  MOVLW  50
0B90:  MOVWF  5A
0B91:  MOVLW  84
0B92:  MOVWF  59
0B93:  CALL   1BB
0B94:  MOVF   7A,W
0B95:  MOVWF  54
0B96:  MOVF   79,W
0B97:  MOVWF  53
0B98:  MOVF   78,W
0B99:  MOVWF  52
0B9A:  MOVF   77,W
0B9B:  MOVWF  51
0B9C:  CALL   2FC
0B9D:  MOVF   78,W
0B9E:  MOVWF  51
0B9F:  MOVF   29,W
0BA0:  MOVWF  52
0BA1:  MOVF   50,W
0BA2:  MOVWF  53
0BA3:  MOVF   4F,W
0BA4:  MOVWF  54
0BA5:  MOVF   78,W
0BA6:  MOVWF  55
0BA7:  MOVLW  01
0BA8:  MOVWF  56
0BA9:  BCF    0A.3
0BAA:  CALL   600
0BAB:  BSF    0A.3
....................    y=temp; 
0BAC:  MOVF   4E,W
0BAD:  MOVWF  2D
0BAE:  MOVF   4D,W
0BAF:  MOVWF  2C
0BB0:  MOVF   4C,W
0BB1:  MOVWF  2B
0BB2:  MOVF   4B,W
0BB3:  MOVWF  2A
....................    x=x1; 
0BB4:  MOVF   4F,W
0BB5:  MOVWF  29
0BB6:  BSF    0A.3
0BB7:  BCF    0A.4
0BB8:  GOTO   52F (RETURN)
.................... } 
....................  
.................... ///Fin Funciones 
....................  
.................... ///Interrupciones 
....................  
.................... #INT_RB 
.................... void RB_isr(){ //Prueba de interrupciones 
....................    if(input(pin_b6)){ //Habilita o deshabilita la captura de datos 
*
0457:  BSF    03.5
0458:  BSF    06.6
0459:  BCF    03.5
045A:  BTFSS  06.6
045B:  GOTO   49C
....................       habilitarLectura=~habilitarLectura; 
045C:  MOVLW  01
045D:  XORWF  2E,F
....................       if(habilitarLectura) 
045E:  BTFSS  2E.0
045F:  GOTO   47A
....................          glcd_text57(128/2-30, 0, (char*)"Capturando", 1, ON); 
0460:  CLRF   78
0461:  MOVLW  0B
0462:  MOVWF  77
0463:  MOVLW  6B
0464:  MOVWF  04
0465:  BCF    03.7
0466:  MOVF   78,W
0467:  CALL   221
0468:  MOVWF  00
0469:  INCF   78,F
046A:  INCF   04,F
046B:  DECFSZ 77,F
046C:  GOTO   466
046D:  MOVLW  22
046E:  MOVWF  7D
046F:  CLRF   7E
0470:  BSF    03.5
0471:  CLRF   21
0472:  MOVLW  6B
0473:  MOVWF  20
0474:  MOVLW  01
0475:  MOVWF  22
0476:  MOVWF  23
0477:  BCF    03.5
0478:  CALL   344
0479:  GOTO   49C
....................       else { 
....................          glcd_text57(128/2-30, 0, (char*)"Capturando", 1, OFF); 
047A:  CLRF   78
047B:  MOVLW  0B
047C:  MOVWF  77
047D:  MOVLW  6B
047E:  MOVWF  04
047F:  BCF    03.7
0480:  MOVF   78,W
0481:  CALL   221
0482:  MOVWF  00
0483:  INCF   78,F
0484:  INCF   04,F
0485:  DECFSZ 77,F
0486:  GOTO   480
0487:  MOVLW  22
0488:  MOVWF  7D
0489:  CLRF   7E
048A:  BSF    03.5
048B:  CLRF   21
048C:  MOVLW  6B
048D:  MOVWF  20
048E:  MOVLW  01
048F:  MOVWF  22
0490:  CLRF   23
0491:  BCF    03.5
0492:  CALL   344
....................          limpiarGrafico; 
0493:  CLRF   7B
0494:  MOVLW  14
0495:  MOVWF  7C
0496:  MOVLW  80
0497:  MOVWF  7D
0498:  MOVLW  2C
0499:  MOVWF  7E
049A:  CALL   43A
....................          x=0; 
049B:  CLRF   29
....................       } 
....................    } 
.................... } 
....................  
049C:  BCF    0B.0
049D:  BCF    0A.3
049E:  BCF    0A.4
049F:  GOTO   021
.................... #int_rda 
.................... void serial_interrupt() { 
....................    disable_interrupts(int_rda); 
04A0:  BSF    03.5
04A1:  BCF    0C.5
....................    received = getc(); 
04A2:  BCF    03.5
04A3:  BTFSS  0C.5
04A4:  GOTO   4A3
04A5:  MOVF   1A,W
04A6:  MOVWF  2F
....................    if(received == 'a') { 
04A7:  MOVF   2F,W
04A8:  SUBLW  61
04A9:  BTFSS  03.2
04AA:  GOTO   4BD
....................       glcd_text57(110,0,(char*)"BT",1,ON); //Mostramos BT 
04AB:  MOVLW  42
04AC:  MOVWF  6B
04AD:  MOVLW  54
04AE:  MOVWF  6C
04AF:  CLRF   6D
04B0:  MOVLW  6E
04B1:  MOVWF  7D
04B2:  CLRF   7E
04B3:  BSF    03.5
04B4:  CLRF   21
04B5:  MOVLW  6B
04B6:  MOVWF  20
04B7:  MOVLW  01
04B8:  MOVWF  22
04B9:  MOVWF  23
04BA:  BCF    03.5
04BB:  CALL   344
....................    } else if(received == 'b') { 
04BC:  GOTO   4D1
04BD:  MOVF   2F,W
04BE:  SUBLW  62
04BF:  BTFSS  03.2
04C0:  GOTO   4D1
....................       glcd_text57(110,0,(char*)"BT",1,OFF); //Mostramos BT 
04C1:  MOVLW  42
04C2:  MOVWF  6E
04C3:  MOVLW  54
04C4:  MOVWF  6F
04C5:  CLRF   70
04C6:  MOVLW  6E
04C7:  MOVWF  7D
04C8:  CLRF   7E
04C9:  BSF    03.5
04CA:  CLRF   21
04CB:  MOVWF  20
04CC:  MOVLW  01
04CD:  MOVWF  22
04CE:  CLRF   23
04CF:  BCF    03.5
04D0:  CALL   344
....................    } 
04D1:  BCF    0C.5
04D2:  BCF    0A.3
04D3:  BCF    0A.4
04D4:  GOTO   021
.................... } 
....................  
.................... ///Fin Interrupciones 
....................  
.................... void main() 
*
0BE8:  MOVF   03,W
0BE9:  ANDLW  1F
0BEA:  MOVWF  03
0BEB:  MOVLW  0C
0BEC:  BSF    03.5
0BED:  MOVWF  19
0BEE:  MOVLW  A2
0BEF:  MOVWF  18
0BF0:  MOVLW  90
0BF1:  BCF    03.5
0BF2:  MOVWF  18
0BF3:  MOVLW  FF
0BF4:  MOVWF  28
0BF5:  CLRF   29
0BF6:  CLRF   2D
0BF7:  CLRF   2C
0BF8:  CLRF   2B
0BF9:  CLRF   2A
0BFA:  BCF    2E.0
0BFB:  CLRF   2F
0BFC:  CLRF   31
0BFD:  CLRF   30
0BFE:  BSF    03.5
0BFF:  BSF    1F.0
0C00:  BSF    1F.1
0C01:  BSF    1F.2
0C02:  BCF    1F.3
0C03:  BCF    03.7
.................... { 
....................    int16 iAn; 
....................    float t; 
....................    char str[6]; 
....................     
....................    setup_adc_ports(AN0); //seteamos el pin A0 como analogico 
0C04:  BCF    1F.0
0C05:  BSF    1F.1
0C06:  BSF    1F.2
0C07:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); //Establecemos el reloj interno 
0C08:  BCF    03.5
0C09:  BSF    1F.6
0C0A:  BSF    1F.7
0C0B:  BSF    03.5
0C0C:  BSF    1F.7
0C0D:  BCF    03.5
0C0E:  BSF    1F.0
....................    glcd_init(on); //Inicializamos el lcd 
0C0F:  MOVLW  01
0C10:  MOVWF  4B
0C11:  BCF    0A.3
0C12:  GOTO   4D5
0C13:  BSF    0A.3
....................    enable_interrupts(INT_RB); //Habilitamos las interrupciones del RB4-7 
0C14:  BSF    0B.3
....................    enable_interrupts(GLOBAL); //Habilitamos las interrupciones globales 
0C15:  MOVLW  C0
0C16:  IORWF  0B,F
....................  
....................    glcd_text57(0,10,(char*)"Temperatura:",1,ON); //Escribimos el texto "Tempreatura:" en la posicion 0,10 
0C17:  CLRF   78
0C18:  MOVLW  0D
0C19:  MOVWF  77
0C1A:  MOVLW  3E
0C1B:  MOVWF  04
0C1C:  BCF    03.7
0C1D:  MOVF   78,W
0C1E:  BCF    0A.3
0C1F:  CALL   230
0C20:  BSF    0A.3
0C21:  MOVWF  00
0C22:  INCF   78,F
0C23:  INCF   04,F
0C24:  DECFSZ 77,F
0C25:  GOTO   41D
0C26:  CLRF   27
0C27:  BTFSC  0B.7
0C28:  BSF    27.7
0C29:  BCF    0B.7
0C2A:  CLRF   7D
0C2B:  MOVLW  0A
0C2C:  MOVWF  7E
0C2D:  BSF    03.5
0C2E:  CLRF   21
0C2F:  MOVLW  3E
0C30:  MOVWF  20
0C31:  MOVLW  01
0C32:  MOVWF  22
0C33:  MOVWF  23
0C34:  BCF    0A.3
0C35:  BCF    03.5
0C36:  CALL   344
0C37:  BSF    0A.3
0C38:  BTFSC  27.7
0C39:  BSF    0B.7
....................    glcd_line(0, 8, 128, 8, ON); //Pintamos una linea por debajo del barra de notificaciones 
0C3A:  CLRF   52
0C3B:  MOVLW  08
0C3C:  MOVWF  53
0C3D:  MOVLW  80
0C3E:  MOVWF  54
0C3F:  MOVLW  08
0C40:  MOVWF  55
0C41:  MOVLW  01
0C42:  MOVWF  56
0C43:  BCF    0A.3
0C44:  CALL   600
0C45:  BSF    0A.3
....................    glcd_line(0, 19, 128, 19, ON); //Pintamos una linea por debajo de la temperatura 
0C46:  CLRF   52
0C47:  MOVLW  13
0C48:  MOVWF  53
0C49:  MOVLW  80
0C4A:  MOVWF  54
0C4B:  MOVLW  13
0C4C:  MOVWF  55
0C4D:  MOVLW  01
0C4E:  MOVWF  56
0C4F:  BCF    0A.3
0C50:  CALL   600
0C51:  BSF    0A.3
....................     
....................    while(TRUE){ 
....................       trisb|=0b01000000; 
0C52:  BSF    03.5
0C53:  BSF    06.6
....................       //turn_on_bt(); 
....................       enable_interrupts(int_rda); 
0C54:  BSF    0C.5
....................       if(habilitarLectura){ 
0C55:  BCF    03.5
0C56:  BTFSS  2E.0
0C57:  GOTO   591
....................          set_adc_channel(0); //Seteamos el canal que vamos a leer 
0C58:  MOVLW  00
0C59:  MOVWF  78
0C5A:  MOVF   1F,W
0C5B:  ANDLW  C7
0C5C:  IORWF  78,W
0C5D:  MOVWF  1F
....................          delay_us(10); //Esperamos 10 us 
0C5E:  MOVLW  06
0C5F:  MOVWF  77
0C60:  DECFSZ 77,F
0C61:  GOTO   460
0C62:  NOP
....................          iAn=read_adc(); //Levantamos el dato 
0C63:  BSF    1F.2
0C64:  BTFSC  1F.2
0C65:  GOTO   464
0C66:  BSF    03.5
0C67:  MOVF   1E,W
0C68:  BCF    03.5
0C69:  MOVWF  32
0C6A:  MOVF   1E,W
0C6B:  MOVWF  33
....................          t=(5.0*iAn*100.0)/1024.0; //Lo convertemos a temperatura 
0C6C:  MOVF   33,W
0C6D:  MOVWF  4C
0C6E:  MOVF   32,W
0C6F:  MOVWF  4B
0C70:  BCF    0A.3
0C71:  GOTO   6CE
0C72:  BSF    0A.3
0C73:  CLRF   5B
0C74:  CLRF   5A
0C75:  MOVLW  20
0C76:  MOVWF  59
0C77:  MOVLW  81
0C78:  MOVWF  58
0C79:  MOVF   7A,W
0C7A:  MOVWF  5F
0C7B:  MOVF   79,W
0C7C:  MOVWF  5E
0C7D:  MOVF   78,W
0C7E:  MOVWF  5D
0C7F:  MOVF   77,W
0C80:  MOVWF  5C
0C81:  BCF    0A.3
0C82:  CALL   6ED
0C83:  BSF    0A.3
0C84:  MOVF   7A,W
0C85:  MOVWF  4E
0C86:  MOVF   79,W
0C87:  MOVWF  4D
0C88:  MOVF   78,W
0C89:  MOVWF  4C
0C8A:  MOVF   77,W
0C8B:  MOVWF  4B
0C8C:  MOVF   7A,W
0C8D:  MOVWF  5B
0C8E:  MOVF   79,W
0C8F:  MOVWF  5A
0C90:  MOVF   78,W
0C91:  MOVWF  59
0C92:  MOVF   77,W
0C93:  MOVWF  58
0C94:  CLRF   5F
0C95:  CLRF   5E
0C96:  MOVLW  48
0C97:  MOVWF  5D
0C98:  MOVLW  85
0C99:  MOVWF  5C
0C9A:  BCF    0A.3
0C9B:  CALL   6ED
0C9C:  BSF    0A.3
0C9D:  MOVF   7A,W
0C9E:  MOVWF  4E
0C9F:  MOVF   79,W
0CA0:  MOVWF  4D
0CA1:  MOVF   78,W
0CA2:  MOVWF  4C
0CA3:  MOVF   77,W
0CA4:  MOVWF  4B
0CA5:  MOVF   7A,W
0CA6:  MOVWF  52
0CA7:  MOVF   79,W
0CA8:  MOVWF  51
0CA9:  MOVF   78,W
0CAA:  MOVWF  50
0CAB:  MOVF   77,W
0CAC:  MOVWF  4F
0CAD:  CLRF   56
0CAE:  CLRF   55
0CAF:  CLRF   54
0CB0:  MOVLW  89
0CB1:  MOVWF  53
0CB2:  GOTO   000
0CB3:  MOVF   7A,W
0CB4:  MOVWF  37
0CB5:  MOVF   79,W
0CB6:  MOVWF  36
0CB7:  MOVF   78,W
0CB8:  MOVWF  35
0CB9:  MOVF   77,W
0CBA:  MOVWF  34
....................             
....................          if(t!=y){ //Si t es != al dato anterior refrescamos la temperatura y la enviamos al bluetooth 
0CBB:  MOVF   37,W
0CBC:  MOVWF  4E
0CBD:  MOVF   36,W
0CBE:  MOVWF  4D
0CBF:  MOVF   35,W
0CC0:  MOVWF  4C
0CC1:  MOVF   34,W
0CC2:  MOVWF  4B
0CC3:  MOVF   2D,W
0CC4:  MOVWF  52
0CC5:  MOVF   2C,W
0CC6:  MOVWF  51
0CC7:  MOVF   2B,W
0CC8:  MOVWF  50
0CC9:  MOVF   2A,W
0CCA:  MOVWF  4F
0CCB:  BCF    0A.3
0CCC:  CALL   762
0CCD:  BSF    0A.3
0CCE:  BTFSC  03.2
0CCF:  GOTO   511
....................             str[0] = '\0'; 
0CD0:  CLRF   38
....................             sprintf(str, "%4.2f°C", t); //Convertimos la temperatura float en un char* 
0CD1:  CLRF   31
0CD2:  MOVLW  38
0CD3:  MOVWF  30
0CD4:  MOVLW  03
0CD5:  MOVWF  04
0CD6:  MOVF   37,W
0CD7:  MOVWF  4E
0CD8:  MOVF   36,W
0CD9:  MOVWF  4D
0CDA:  MOVF   35,W
0CDB:  MOVWF  4C
0CDC:  MOVF   34,W
0CDD:  MOVWF  4B
0CDE:  MOVLW  02
0CDF:  MOVWF  4F
0CE0:  CALL   0CD
0CE1:  MOVLW  B0
0CE2:  MOVWF  58
0CE3:  BCF    0A.3
0CE4:  CALL   7F0
0CE5:  BSF    0A.3
0CE6:  MOVLW  43
0CE7:  MOVWF  58
0CE8:  BCF    0A.3
0CE9:  CALL   7F0
0CEA:  BSF    0A.3
0CEB:  CLRF   27
0CEC:  BTFSC  0B.7
0CED:  BSF    27.7
0CEE:  BCF    0B.7
....................             limpiarPorcion(12*6, 10, 9*6, 7); //Limpiamos la porcion de pantalla que tiene el valor de la temperatura. 12 es la cantiad de caracteres de "temperatura:" 
0CEF:  MOVLW  48
0CF0:  MOVWF  7B
0CF1:  MOVLW  0A
0CF2:  MOVWF  7C
0CF3:  MOVLW  36
0CF4:  MOVWF  7D
0CF5:  MOVLW  07
0CF6:  MOVWF  7E
0CF7:  BCF    0A.3
0CF8:  CALL   43A
0CF9:  BSF    0A.3
0CFA:  BTFSC  27.7
0CFB:  BSF    0B.7
0CFC:  CLRF   27
0CFD:  BTFSC  0B.7
0CFE:  BSF    27.7
0CFF:  BCF    0B.7
....................             glcd_text57(12*6, 10, str, 1, ON); //Escribimos la temperatura. 
0D00:  MOVLW  48
0D01:  MOVWF  7D
0D02:  MOVLW  0A
0D03:  MOVWF  7E
0D04:  BSF    03.5
0D05:  CLRF   21
0D06:  MOVLW  38
0D07:  MOVWF  20
0D08:  MOVLW  01
0D09:  MOVWF  22
0D0A:  MOVWF  23
0D0B:  BCF    0A.3
0D0C:  BCF    03.5
0D0D:  CALL   344
0D0E:  BSF    0A.3
0D0F:  BTFSC  27.7
0D10:  BSF    0B.7
....................          } 
....................          if(t<=50){ //Si t es menor o igual a 50 la agregamos al grafico 
0D11:  MOVF   37,W
0D12:  MOVWF  4E
0D13:  MOVF   36,W
0D14:  MOVWF  4D
0D15:  MOVF   35,W
0D16:  MOVWF  4C
0D17:  MOVF   34,W
0D18:  MOVWF  4B
0D19:  CLRF   52
0D1A:  CLRF   51
0D1B:  MOVLW  48
0D1C:  MOVWF  50
0D1D:  MOVLW  84
0D1E:  MOVWF  4F
0D1F:  BCF    0A.3
0D20:  CALL   762
0D21:  BSF    0A.3
0D22:  BTFSC  03.0
0D23:  GOTO   526
0D24:  BTFSS  03.2
0D25:  GOTO   54D
....................             nuevaLinea(t); //Dibujamos la nueva linea en el grafico. 
0D26:  MOVF   37,W
0D27:  MOVWF  4E
0D28:  MOVF   36,W
0D29:  MOVWF  4D
0D2A:  MOVF   35,W
0D2B:  MOVWF  4C
0D2C:  MOVF   34,W
0D2D:  MOVWF  4B
0D2E:  GOTO   31B
....................             glcd_text57(3, 0, (char*)"T>50", 1, OFF); //ocultamos la notificacion de t>50 
0D2F:  MOVLW  54
0D30:  MOVWF  3E
0D31:  MOVLW  3E
0D32:  MOVWF  3F
0D33:  MOVLW  35
0D34:  MOVWF  40
0D35:  MOVLW  30
0D36:  MOVWF  41
0D37:  CLRF   42
0D38:  CLRF   27
0D39:  BTFSC  0B.7
0D3A:  BSF    27.7
0D3B:  BCF    0B.7
0D3C:  MOVLW  03
0D3D:  MOVWF  7D
0D3E:  CLRF   7E
0D3F:  BSF    03.5
0D40:  CLRF   21
0D41:  MOVLW  3E
0D42:  MOVWF  20
0D43:  MOVLW  01
0D44:  MOVWF  22
0D45:  CLRF   23
0D46:  BCF    0A.3
0D47:  BCF    03.5
0D48:  CALL   344
0D49:  BSF    0A.3
0D4A:  BTFSC  27.7
0D4B:  BSF    0B.7
....................          } 
0D4C:  GOTO   572
....................          else{ 
....................             glcd_text57(3, 0, (char*)"T>50", 1, ON); //Esto significa que no graficamos temperaturas superiores a 50 
0D4D:  MOVLW  54
0D4E:  MOVWF  3E
0D4F:  MOVLW  3E
0D50:  MOVWF  3F
0D51:  MOVLW  35
0D52:  MOVWF  40
0D53:  MOVLW  30
0D54:  MOVWF  41
0D55:  CLRF   42
0D56:  CLRF   27
0D57:  BTFSC  0B.7
0D58:  BSF    27.7
0D59:  BCF    0B.7
0D5A:  MOVLW  03
0D5B:  MOVWF  7D
0D5C:  CLRF   7E
0D5D:  BSF    03.5
0D5E:  CLRF   21
0D5F:  MOVLW  3E
0D60:  MOVWF  20
0D61:  MOVLW  01
0D62:  MOVWF  22
0D63:  MOVWF  23
0D64:  BCF    0A.3
0D65:  BCF    03.5
0D66:  CALL   344
0D67:  BSF    0A.3
0D68:  BTFSC  27.7
0D69:  BSF    0B.7
....................             y=t; //igualamos el dato anterior al valor de temperatura para no refrescar otra vez el valor de la temperatura 
0D6A:  MOVF   37,W
0D6B:  MOVWF  2D
0D6C:  MOVF   36,W
0D6D:  MOVWF  2C
0D6E:  MOVF   35,W
0D6F:  MOVWF  2B
0D70:  MOVF   34,W
0D71:  MOVWF  2A
....................          } 
....................          sprintf(str, "%4.2f", t); //Convertimos la temperatura float en un char* 
0D72:  CLRF   31
0D73:  MOVLW  38
0D74:  MOVWF  30
0D75:  MOVLW  03
0D76:  MOVWF  04
0D77:  MOVF   37,W
0D78:  MOVWF  4E
0D79:  MOVF   36,W
0D7A:  MOVWF  4D
0D7B:  MOVF   35,W
0D7C:  MOVWF  4C
0D7D:  MOVF   34,W
0D7E:  MOVWF  4B
0D7F:  MOVLW  02
0D80:  MOVWF  4F
0D81:  CALL   0CD
....................          puts(str); //Enviamos la temperatura por bluetooth 
0D82:  MOVLW  38
0D83:  MOVWF  04
0D84:  BCF    03.7
0D85:  GOTO   3B9
0D86:  MOVLW  0D
0D87:  BTFSS  0C.4
0D88:  GOTO   587
0D89:  MOVWF  19
0D8A:  MOVLW  0A
0D8B:  BTFSS  0C.4
0D8C:  GOTO   58B
0D8D:  MOVWF  19
....................          delay_ms(250); 
0D8E:  MOVLW  FA
0D8F:  MOVWF  4B
0D90:  GOTO   3D2
....................       } 
0D91:  GOTO   452
....................    } 
.................... } 
....................  
0D92:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
