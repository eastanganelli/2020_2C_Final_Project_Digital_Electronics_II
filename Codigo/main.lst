CCS PCM C Compiler, Version 5.076, 56587               17-nov.-20 16:42

               Filename:   C:\Users\Francisco\Documents\!Facultad - UF\Electrónica Digital II\Proyecto Final\tp_final_edi2\Codigo\main.lst

               ROM used:   5994 words (73%)
                           Largest free fragment is 1135
               RAM used:   136 (37%) at main() level
                           244 (66%) worst case
               Stack used: 9 locations (4 in main + 5 for interrupts)
               Stack size: 8

*
0000:  MOVLW  18
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   03C
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.5
001E:  GOTO   021
001F:  BTFSC  0C.5
0020:  GOTO   03F
0021:  MOVLW  8C
0022:  MOVWF  04
0023:  BTFSS  00.0
0024:  GOTO   027
0025:  BTFSC  0C.0
0026:  GOTO   042
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   045
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   20,W
0036:  MOVWF  0A
0037:  SWAPF  21,W
0038:  MOVWF  03
0039:  SWAPF  7F,F
003A:  SWAPF  7F,W
003B:  RETFIE
003C:  BCF    0A.3
003D:  BSF    0A.4
003E:  GOTO   000
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   7A2
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   299
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   282
.................... #include <main.h> 
.................... #include <16F877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0048:  BCF    0A.0
0049:  BCF    0A.1
004A:  BCF    0A.2
004B:  ADDLW  4F
004C:  BTFSC  03.0
004D:  INCF   0A,F
004E:  MOVWF  02
004F:  RETLW  00
0050:  RETLW  00
0051:  RETLW  00
0052:  RETLW  00
0053:  RETLW  00
0054:  RETLW  00
0055:  RETLW  00
0056:  RETLW  5F
0057:  RETLW  00
0058:  RETLW  00
0059:  RETLW  00
005A:  RETLW  03
005B:  RETLW  00
005C:  RETLW  03
005D:  RETLW  00
005E:  RETLW  14
005F:  RETLW  3E
0060:  RETLW  14
0061:  RETLW  3E
0062:  RETLW  14
0063:  RETLW  24
0064:  RETLW  2A
0065:  RETLW  7F
0066:  RETLW  2A
0067:  RETLW  12
0068:  RETLW  43
0069:  RETLW  33
006A:  RETLW  08
006B:  RETLW  66
006C:  RETLW  61
006D:  RETLW  36
006E:  RETLW  49
006F:  RETLW  55
0070:  RETLW  22
0071:  RETLW  50
0072:  RETLW  00
0073:  RETLW  05
0074:  RETLW  03
0075:  RETLW  00
0076:  RETLW  00
0077:  RETLW  00
0078:  RETLW  1C
0079:  RETLW  22
007A:  RETLW  41
007B:  RETLW  00
007C:  RETLW  00
007D:  RETLW  41
007E:  RETLW  22
007F:  RETLW  1C
0080:  RETLW  00
0081:  RETLW  14
0082:  RETLW  08
0083:  RETLW  3E
0084:  RETLW  08
0085:  RETLW  14
0086:  RETLW  08
0087:  RETLW  08
0088:  RETLW  3E
0089:  RETLW  08
008A:  RETLW  08
008B:  RETLW  00
008C:  RETLW  50
008D:  RETLW  30
008E:  RETLW  00
008F:  RETLW  00
0090:  RETLW  08
0091:  RETLW  08
0092:  RETLW  08
0093:  RETLW  08
0094:  RETLW  08
0095:  RETLW  00
0096:  RETLW  60
0097:  RETLW  60
0098:  RETLW  00
0099:  RETLW  00
009A:  RETLW  20
009B:  RETLW  10
009C:  RETLW  08
009D:  RETLW  04
009E:  RETLW  02
009F:  RETLW  3E
00A0:  RETLW  51
00A1:  RETLW  49
00A2:  RETLW  45
00A3:  RETLW  3E
00A4:  RETLW  00
00A5:  RETLW  04
00A6:  RETLW  02
00A7:  RETLW  7F
00A8:  RETLW  00
00A9:  RETLW  42
00AA:  RETLW  61
00AB:  RETLW  51
00AC:  RETLW  49
00AD:  RETLW  46
00AE:  RETLW  22
00AF:  RETLW  41
00B0:  RETLW  49
00B1:  RETLW  49
00B2:  RETLW  36
00B3:  RETLW  18
00B4:  RETLW  14
00B5:  RETLW  12
00B6:  RETLW  7F
00B7:  RETLW  10
00B8:  RETLW  27
00B9:  RETLW  45
00BA:  RETLW  45
00BB:  RETLW  45
00BC:  RETLW  39
00BD:  RETLW  3E
00BE:  RETLW  49
00BF:  RETLW  49
00C0:  RETLW  49
00C1:  RETLW  32
00C2:  RETLW  01
00C3:  RETLW  01
00C4:  RETLW  71
00C5:  RETLW  09
00C6:  RETLW  07
00C7:  RETLW  36
00C8:  RETLW  49
00C9:  RETLW  49
00CA:  RETLW  49
00CB:  RETLW  36
00CC:  RETLW  26
00CD:  RETLW  49
00CE:  RETLW  49
00CF:  RETLW  49
00D0:  RETLW  3E
00D1:  RETLW  00
00D2:  RETLW  36
00D3:  RETLW  36
00D4:  RETLW  00
00D5:  RETLW  00
00D6:  RETLW  00
00D7:  RETLW  56
00D8:  RETLW  36
00D9:  RETLW  00
00DA:  RETLW  00
00DB:  RETLW  08
00DC:  RETLW  14
00DD:  RETLW  22
00DE:  RETLW  41
00DF:  RETLW  00
00E0:  RETLW  14
00E1:  RETLW  14
00E2:  RETLW  14
00E3:  RETLW  14
00E4:  RETLW  14
00E5:  RETLW  00
00E6:  RETLW  41
00E7:  RETLW  22
00E8:  RETLW  14
00E9:  RETLW  08
00EA:  RETLW  02
00EB:  RETLW  01
00EC:  RETLW  51
00ED:  RETLW  09
00EE:  RETLW  06
00EF:  RETLW  3E
00F0:  RETLW  41
00F1:  RETLW  59
00F2:  RETLW  55
00F3:  RETLW  5E
00F4:  RETLW  7E
00F5:  RETLW  09
00F6:  RETLW  09
00F7:  RETLW  09
00F8:  RETLW  7E
00F9:  RETLW  7F
00FA:  RETLW  49
00FB:  RETLW  49
00FC:  RETLW  49
00FD:  RETLW  36
00FE:  RETLW  3E
00FF:  RETLW  41
0100:  RETLW  41
0101:  RETLW  41
0102:  RETLW  22
0103:  RETLW  7F
0104:  RETLW  41
0105:  RETLW  41
0106:  RETLW  41
0107:  RETLW  3E
0108:  RETLW  7F
0109:  RETLW  49
010A:  RETLW  49
010B:  RETLW  49
010C:  RETLW  41
010D:  RETLW  7F
010E:  RETLW  09
010F:  RETLW  09
0110:  RETLW  09
0111:  RETLW  01
0112:  RETLW  3E
0113:  RETLW  41
0114:  RETLW  41
0115:  RETLW  49
0116:  RETLW  3A
0117:  RETLW  7F
0118:  RETLW  08
0119:  RETLW  08
011A:  RETLW  08
011B:  RETLW  7F
011C:  RETLW  00
011D:  RETLW  41
011E:  RETLW  7F
011F:  RETLW  41
0120:  RETLW  00
0121:  RETLW  30
0122:  RETLW  40
0123:  RETLW  40
0124:  RETLW  40
0125:  RETLW  3F
0126:  RETLW  7F
0127:  RETLW  08
0128:  RETLW  14
0129:  RETLW  22
012A:  RETLW  41
012B:  RETLW  7F
012C:  RETLW  40
012D:  RETLW  40
012E:  RETLW  40
012F:  RETLW  40
0130:  RETLW  7F
0131:  RETLW  02
0132:  RETLW  0C
0133:  RETLW  02
0134:  RETLW  7F
0135:  RETLW  7F
0136:  RETLW  02
0137:  RETLW  04
0138:  RETLW  08
0139:  RETLW  7F
013A:  RETLW  3E
013B:  RETLW  41
013C:  RETLW  41
013D:  RETLW  41
013E:  RETLW  3E
013F:  RETLW  7F
0140:  RETLW  09
0141:  RETLW  09
0142:  RETLW  09
0143:  RETLW  06
0144:  RETLW  1E
0145:  RETLW  21
0146:  RETLW  21
0147:  RETLW  21
0148:  RETLW  5E
0149:  RETLW  7F
014A:  RETLW  09
014B:  RETLW  09
014C:  RETLW  09
014D:  RETLW  76
014E:  BSF    0A.0
014F:  BCF    0A.1
0150:  BCF    0A.2
0151:  ADDLW  55
0152:  BTFSC  03.0
0153:  INCF   0A,F
0154:  MOVWF  02
0155:  RETLW  26
0156:  RETLW  49
0157:  RETLW  49
0158:  RETLW  49
0159:  RETLW  32
015A:  RETLW  01
015B:  RETLW  01
015C:  RETLW  7F
015D:  RETLW  01
015E:  RETLW  01
015F:  RETLW  3F
0160:  RETLW  40
0161:  RETLW  40
0162:  RETLW  40
0163:  RETLW  3F
0164:  RETLW  1F
0165:  RETLW  20
0166:  RETLW  40
0167:  RETLW  20
0168:  RETLW  1F
0169:  RETLW  7F
016A:  RETLW  20
016B:  RETLW  10
016C:  RETLW  20
016D:  RETLW  7F
016E:  RETLW  41
016F:  RETLW  22
0170:  RETLW  1C
0171:  RETLW  22
0172:  RETLW  41
0173:  RETLW  07
0174:  RETLW  08
0175:  RETLW  70
0176:  RETLW  08
0177:  RETLW  07
0178:  RETLW  61
0179:  RETLW  51
017A:  RETLW  49
017B:  RETLW  45
017C:  RETLW  43
017D:  RETLW  00
017E:  RETLW  7F
017F:  RETLW  41
0180:  RETLW  00
0181:  RETLW  00
0182:  RETLW  02
0183:  RETLW  04
0184:  RETLW  08
0185:  RETLW  10
0186:  RETLW  20
0187:  RETLW  00
0188:  RETLW  00
0189:  RETLW  41
018A:  RETLW  7F
018B:  RETLW  00
018C:  RETLW  04
018D:  RETLW  02
018E:  RETLW  01
018F:  RETLW  02
0190:  RETLW  04
0191:  RETLW  40
0192:  RETLW  40
0193:  RETLW  40
0194:  RETLW  40
0195:  RETLW  40
0196:  RETLW  00
0197:  RETLW  01
0198:  RETLW  02
0199:  RETLW  04
019A:  RETLW  00
019B:  RETLW  20
019C:  RETLW  54
019D:  RETLW  54
019E:  RETLW  54
019F:  RETLW  78
01A0:  RETLW  7F
01A1:  RETLW  44
01A2:  RETLW  44
01A3:  RETLW  44
01A4:  RETLW  38
01A5:  RETLW  38
01A6:  RETLW  44
01A7:  RETLW  44
01A8:  RETLW  44
01A9:  RETLW  44
01AA:  RETLW  38
01AB:  RETLW  44
01AC:  RETLW  44
01AD:  RETLW  44
01AE:  RETLW  7F
01AF:  RETLW  38
01B0:  RETLW  54
01B1:  RETLW  54
01B2:  RETLW  54
01B3:  RETLW  18
01B4:  RETLW  04
01B5:  RETLW  04
01B6:  RETLW  7E
01B7:  RETLW  05
01B8:  RETLW  05
01B9:  RETLW  08
01BA:  RETLW  54
01BB:  RETLW  54
01BC:  RETLW  54
01BD:  RETLW  3C
01BE:  RETLW  7F
01BF:  RETLW  08
01C0:  RETLW  04
01C1:  RETLW  04
01C2:  RETLW  78
01C3:  RETLW  00
01C4:  RETLW  44
01C5:  RETLW  7D
01C6:  RETLW  40
01C7:  RETLW  00
01C8:  RETLW  20
01C9:  RETLW  40
01CA:  RETLW  44
01CB:  RETLW  3D
01CC:  RETLW  00
01CD:  RETLW  7F
01CE:  RETLW  10
01CF:  RETLW  28
01D0:  RETLW  44
01D1:  RETLW  00
01D2:  RETLW  00
01D3:  RETLW  41
01D4:  RETLW  7F
01D5:  RETLW  40
01D6:  RETLW  00
01D7:  RETLW  7C
01D8:  RETLW  04
01D9:  RETLW  78
01DA:  RETLW  04
01DB:  RETLW  78
01DC:  RETLW  7C
01DD:  RETLW  08
01DE:  RETLW  04
01DF:  RETLW  04
01E0:  RETLW  78
01E1:  RETLW  38
01E2:  RETLW  44
01E3:  RETLW  44
01E4:  RETLW  44
01E5:  RETLW  38
01E6:  RETLW  7C
01E7:  RETLW  14
01E8:  RETLW  14
01E9:  RETLW  14
01EA:  RETLW  08
01EB:  RETLW  08
01EC:  RETLW  14
01ED:  RETLW  14
01EE:  RETLW  14
01EF:  RETLW  7C
01F0:  RETLW  00
01F1:  RETLW  7C
01F2:  RETLW  08
01F3:  RETLW  04
01F4:  RETLW  04
01F5:  RETLW  48
01F6:  RETLW  54
01F7:  RETLW  54
01F8:  RETLW  54
01F9:  RETLW  20
01FA:  RETLW  04
01FB:  RETLW  04
01FC:  RETLW  3F
01FD:  RETLW  44
01FE:  RETLW  44
01FF:  RETLW  3C
0200:  RETLW  40
0201:  RETLW  40
0202:  RETLW  20
0203:  RETLW  7C
0204:  RETLW  1C
0205:  RETLW  20
0206:  RETLW  40
0207:  RETLW  20
0208:  RETLW  1C
0209:  RETLW  3C
020A:  RETLW  40
020B:  RETLW  30
020C:  RETLW  40
020D:  RETLW  3C
020E:  RETLW  44
020F:  RETLW  28
0210:  RETLW  10
0211:  RETLW  28
0212:  RETLW  44
0213:  RETLW  0C
0214:  RETLW  50
0215:  RETLW  50
0216:  RETLW  50
0217:  RETLW  3C
0218:  RETLW  44
0219:  RETLW  64
021A:  RETLW  54
021B:  RETLW  4C
021C:  RETLW  44
021D:  RETLW  00
021E:  RETLW  08
021F:  RETLW  36
0220:  RETLW  41
0221:  RETLW  41
0222:  RETLW  00
0223:  RETLW  00
0224:  RETLW  7F
0225:  RETLW  00
0226:  RETLW  00
0227:  RETLW  41
0228:  RETLW  41
0229:  RETLW  36
022A:  RETLW  08
022B:  RETLW  00
022C:  RETLW  02
022D:  RETLW  01
022E:  RETLW  02
022F:  RETLW  04
0230:  RETLW  02
0231:  BCF    0A.0
0232:  BSF    0A.1
0233:  BCF    0A.2
0234:  ADDWF  02,F
0235:  RETLW  43
0236:  RETLW  61
0237:  RETLW  70
0238:  RETLW  74
0239:  RETLW  75
023A:  RETLW  72
023B:  RETLW  61
023C:  RETLW  6E
023D:  RETLW  64
023E:  RETLW  6F
023F:  RETLW  00
0240:  BCF    0A.0
0241:  BSF    0A.1
0242:  BCF    0A.2
0243:  ADDWF  02,F
0244:  RETLW  4C
0245:  RETLW  69
0246:  RETLW  6D
0247:  RETLW  70
0248:  RETLW  69
0249:  RETLW  61
024A:  RETLW  6E
024B:  RETLW  64
024C:  RETLW  6F
024D:  RETLW  00
024E:  BCF    0A.0
024F:  BSF    0A.1
0250:  BCF    0A.2
0251:  ADDWF  02,F
0252:  RETLW  47
0253:  RETLW  75
0254:  RETLW  61
0255:  RETLW  72
0256:  RETLW  64
0257:  RETLW  61
0258:  RETLW  6E
0259:  RETLW  64
025A:  RETLW  6F
025B:  RETLW  00
025C:  BCF    0A.0
025D:  BSF    0A.1
025E:  BCF    0A.2
025F:  ADDWF  02,F
0260:  RETLW  54
0261:  RETLW  65
0262:  RETLW  6D
0263:  RETLW  70
0264:  RETLW  65
0265:  RETLW  72
0266:  RETLW  61
0267:  RETLW  74
0268:  RETLW  75
0269:  RETLW  72
026A:  RETLW  61
026B:  RETLW  3A
026C:  RETLW  00
*
02CB:  CLRF   77
02CC:  CLRF   78
02CD:  BSF    03.5
02CE:  BSF    03.6
02CF:  MOVF   28,W
02D0:  BCF    03.0
02D1:  BTFSC  29.0
02D2:  ADDWF  77,F
02D3:  RRF    77,F
02D4:  RRF    78,F
02D5:  BTFSC  29.1
02D6:  ADDWF  77,F
02D7:  RRF    77,F
02D8:  RRF    78,F
02D9:  BTFSC  29.2
02DA:  ADDWF  77,F
02DB:  RRF    77,F
02DC:  RRF    78,F
02DD:  BTFSC  29.3
02DE:  ADDWF  77,F
02DF:  RRF    77,F
02E0:  RRF    78,F
02E1:  BTFSC  29.4
02E2:  ADDWF  77,F
02E3:  RRF    77,F
02E4:  RRF    78,F
02E5:  BTFSC  29.5
02E6:  ADDWF  77,F
02E7:  RRF    77,F
02E8:  RRF    78,F
02E9:  BTFSC  29.6
02EA:  ADDWF  77,F
02EB:  RRF    77,F
02EC:  RRF    78,F
02ED:  BTFSC  29.7
02EE:  ADDWF  77,F
02EF:  RRF    77,F
02F0:  RRF    78,F
02F1:  BCF    03.5
02F2:  BCF    03.6
02F3:  RETURN
*
052D:  BSF    03.5
052E:  BSF    03.6
052F:  MOVF   22,W
0530:  BTFSC  03.2
0531:  GOTO   59F
0532:  MOVWF  2A
0533:  MOVF   26,W
0534:  BTFSC  03.2
0535:  GOTO   59F
0536:  ADDWF  2A,F
0537:  BTFSC  03.0
0538:  GOTO   540
0539:  MOVLW  7F
053A:  SUBWF  2A,F
053B:  BTFSS  03.0
053C:  GOTO   59F
053D:  BTFSC  03.2
053E:  GOTO   59F
053F:  GOTO   544
0540:  MOVLW  81
0541:  ADDWF  2A,F
0542:  BTFSC  03.0
0543:  GOTO   59F
0544:  MOVF   2A,W
0545:  MOVWF  77
0546:  CLRF   78
0547:  CLRF   79
0548:  CLRF   7A
0549:  MOVF   23,W
054A:  MOVWF  2E
054B:  BSF    2E.7
054C:  MOVF   24,W
054D:  MOVWF  2D
054E:  MOVF   25,W
054F:  MOVWF  2C
0550:  MOVLW  18
0551:  MOVWF  2A
0552:  CLRF   2B
0553:  BTFSS  2C.0
0554:  GOTO   56D
0555:  MOVF   29,W
0556:  ADDWF  7A,F
0557:  BTFSS  03.0
0558:  GOTO   55F
0559:  INCF   79,F
055A:  BTFSS  03.2
055B:  GOTO   55F
055C:  INCF   78,F
055D:  BTFSC  03.2
055E:  BSF    2B.7
055F:  MOVF   28,W
0560:  ADDWF  79,F
0561:  BTFSS  03.0
0562:  GOTO   566
0563:  INCF   78,F
0564:  BTFSC  03.2
0565:  BSF    2B.7
0566:  MOVF   27,W
0567:  MOVWF  24
0568:  BSF    24.7
0569:  MOVF   24,W
056A:  ADDWF  78,F
056B:  BTFSC  03.0
056C:  BSF    2B.7
056D:  RLF    2B,F
056E:  RRF    78,F
056F:  RRF    79,F
0570:  RRF    7A,F
0571:  RRF    2E,F
0572:  RRF    2D,F
0573:  RRF    2C,F
0574:  BCF    03.0
0575:  DECFSZ 2A,F
0576:  GOTO   552
0577:  MOVLW  01
0578:  ADDWF  77,F
0579:  BTFSC  03.0
057A:  GOTO   59F
057B:  BTFSC  78.7
057C:  GOTO   584
057D:  RLF    2E,F
057E:  RLF    7A,F
057F:  RLF    79,F
0580:  RLF    78,F
0581:  DECF   77,F
0582:  BTFSC  03.2
0583:  GOTO   59F
0584:  BTFSS  2E.7
0585:  GOTO   595
0586:  INCF   7A,F
0587:  BTFSS  03.2
0588:  GOTO   595
0589:  INCF   79,F
058A:  BTFSS  03.2
058B:  GOTO   595
058C:  INCF   78,F
058D:  BTFSS  03.2
058E:  GOTO   595
058F:  RRF    78,F
0590:  RRF    79,F
0591:  RRF    7A,F
0592:  INCF   77,F
0593:  BTFSC  03.2
0594:  GOTO   59F
0595:  MOVF   23,W
0596:  MOVWF  2B
0597:  MOVF   27,W
0598:  XORWF  2B,F
0599:  BTFSS  2B.7
059A:  GOTO   59D
059B:  BSF    78.7
059C:  GOTO   5A3
059D:  BCF    78.7
059E:  GOTO   5A3
059F:  CLRF   77
05A0:  CLRF   78
05A1:  CLRF   79
05A2:  CLRF   7A
05A3:  BCF    03.5
05A4:  BCF    03.6
05A5:  RETURN
05A6:  BSF    03.5
05A7:  BSF    03.6
05A8:  MOVF   22,W
05A9:  SUBLW  B6
05AA:  MOVWF  22
05AB:  CLRF   7A
05AC:  MOVF   23,W
05AD:  MOVWF  26
05AE:  BSF    23.7
05AF:  BCF    03.0
05B0:  RRF    23,F
05B1:  RRF    24,F
05B2:  RRF    25,F
05B3:  RRF    7A,F
05B4:  RRF    79,F
05B5:  RRF    78,F
05B6:  RRF    77,F
05B7:  DECFSZ 22,F
05B8:  GOTO   5AF
05B9:  BTFSS  26.7
05BA:  GOTO   5C6
05BB:  COMF   77,F
05BC:  COMF   78,F
05BD:  COMF   79,F
05BE:  COMF   7A,F
05BF:  INCF   77,F
05C0:  BTFSC  03.2
05C1:  INCF   78,F
05C2:  BTFSC  03.2
05C3:  INCF   79,F
05C4:  BTFSC  03.2
05C5:  INCF   7A,F
05C6:  BCF    03.5
05C7:  BCF    03.6
05C8:  RETURN
05C9:  BTFSC  03.1
05CA:  GOTO   5CE
05CB:  MOVLW  AA
05CC:  MOVWF  04
05CD:  BSF    03.7
05CE:  CLRF   77
05CF:  CLRF   78
05D0:  CLRF   79
05D1:  CLRF   7A
05D2:  BSF    03.5
05D3:  BSF    03.6
05D4:  CLRF   2A
05D5:  CLRF   2B
05D6:  CLRF   2C
05D7:  CLRF   2D
05D8:  MOVF   29,W
05D9:  IORWF  28,W
05DA:  IORWF  27,W
05DB:  IORWF  26,W
05DC:  BTFSC  03.2
05DD:  GOTO   60E
05DE:  MOVLW  20
05DF:  MOVWF  2E
05E0:  BCF    03.0
05E1:  RLF    22,F
05E2:  RLF    23,F
05E3:  RLF    24,F
05E4:  RLF    25,F
05E5:  RLF    2A,F
05E6:  RLF    2B,F
05E7:  RLF    2C,F
05E8:  RLF    2D,F
05E9:  MOVF   29,W
05EA:  SUBWF  2D,W
05EB:  BTFSS  03.2
05EC:  GOTO   5F7
05ED:  MOVF   28,W
05EE:  SUBWF  2C,W
05EF:  BTFSS  03.2
05F0:  GOTO   5F7
05F1:  MOVF   27,W
05F2:  SUBWF  2B,W
05F3:  BTFSS  03.2
05F4:  GOTO   5F7
05F5:  MOVF   26,W
05F6:  SUBWF  2A,W
05F7:  BTFSS  03.0
05F8:  GOTO   608
05F9:  MOVF   26,W
05FA:  SUBWF  2A,F
05FB:  MOVF   27,W
05FC:  BTFSS  03.0
05FD:  INCFSZ 27,W
05FE:  SUBWF  2B,F
05FF:  MOVF   28,W
0600:  BTFSS  03.0
0601:  INCFSZ 28,W
0602:  SUBWF  2C,F
0603:  MOVF   29,W
0604:  BTFSS  03.0
0605:  INCFSZ 29,W
0606:  SUBWF  2D,F
0607:  BSF    03.0
0608:  RLF    77,F
0609:  RLF    78,F
060A:  RLF    79,F
060B:  RLF    7A,F
060C:  DECFSZ 2E,F
060D:  GOTO   5E0
060E:  MOVF   2A,W
060F:  MOVWF  00
0610:  INCF   04,F
0611:  MOVF   2B,W
0612:  MOVWF  00
0613:  INCF   04,F
0614:  MOVF   2C,W
0615:  MOVWF  00
0616:  INCF   04,F
0617:  MOVF   2D,W
0618:  MOVWF  00
0619:  BCF    03.5
061A:  BCF    03.6
061B:  RETURN
061C:  MOVF   38,W
061D:  MOVWF  04
061E:  BCF    03.7
061F:  BTFSC  39.0
0620:  BSF    03.7
0621:  BSF    03.5
0622:  BSF    03.6
0623:  MOVF   22,W
0624:  MOVWF  00
0625:  INCF   04,F
0626:  CLRF   00
0627:  BCF    03.5
0628:  BCF    03.6
0629:  INCF   38,F
062A:  BTFSC  03.2
062B:  INCF   39,F
062C:  RETURN
062D:  MOVF   04,W
062E:  BSF    03.5
062F:  BSF    03.6
0630:  MOVWF  1A
0631:  MOVF   19,W
0632:  MOVWF  1C
0633:  BTFSC  03.2
0634:  GOTO   652
0635:  MOVF   18,W
0636:  MOVWF  25
0637:  MOVF   17,W
0638:  MOVWF  24
0639:  MOVF   16,W
063A:  MOVWF  23
063B:  MOVF   15,W
063C:  MOVWF  22
063D:  CLRF   29
063E:  CLRF   28
063F:  MOVLW  20
0640:  MOVWF  27
0641:  MOVLW  82
0642:  MOVWF  26
0643:  BCF    03.5
0644:  BCF    03.6
0645:  CALL   52D
0646:  MOVF   7A,W
0647:  BSF    03.5
0648:  BSF    03.6
0649:  MOVWF  18
064A:  MOVF   79,W
064B:  MOVWF  17
064C:  MOVF   78,W
064D:  MOVWF  16
064E:  MOVF   77,W
064F:  MOVWF  15
0650:  DECFSZ 1C,F
0651:  GOTO   635
0652:  MOVF   18,W
0653:  MOVWF  25
0654:  MOVF   17,W
0655:  MOVWF  24
0656:  MOVF   16,W
0657:  MOVWF  23
0658:  MOVF   15,W
0659:  MOVWF  22
065A:  BCF    03.5
065B:  BCF    03.6
065C:  CALL   5A6
065D:  MOVF   7A,W
065E:  BSF    03.5
065F:  BSF    03.6
0660:  MOVWF  18
0661:  MOVF   79,W
0662:  MOVWF  17
0663:  MOVF   78,W
0664:  MOVWF  16
0665:  MOVF   77,W
0666:  MOVWF  15
0667:  BTFSS  18.7
0668:  GOTO   676
0669:  DECF   1A,F
066A:  BSF    1A.5
066B:  COMF   15,F
066C:  COMF   16,F
066D:  COMF   17,F
066E:  COMF   18,F
066F:  INCF   15,F
0670:  BTFSC  03.2
0671:  INCF   16,F
0672:  BTFSC  03.2
0673:  INCF   17,F
0674:  BTFSC  03.2
0675:  INCF   18,F
0676:  MOVLW  3B
0677:  MOVWF  21
0678:  MOVLW  9A
0679:  MOVWF  20
067A:  MOVLW  CA
067B:  MOVWF  1F
067C:  CLRF   1E
067D:  MOVLW  0A
067E:  MOVWF  1C
067F:  MOVF   19,W
0680:  BTFSC  03.2
0681:  INCF   1A,F
0682:  BSF    03.1
0683:  MOVLW  95
0684:  MOVWF  04
0685:  BSF    03.7
0686:  MOVF   18,W
0687:  MOVWF  25
0688:  MOVF   17,W
0689:  MOVWF  24
068A:  MOVF   16,W
068B:  MOVWF  23
068C:  MOVF   15,W
068D:  MOVWF  22
068E:  MOVF   21,W
068F:  MOVWF  29
0690:  MOVF   20,W
0691:  MOVWF  28
0692:  MOVF   1F,W
0693:  MOVWF  27
0694:  MOVF   1E,W
0695:  MOVWF  26
0696:  BCF    03.5
0697:  BCF    03.6
0698:  CALL   5C9
0699:  MOVF   78,W
069A:  MOVF   77,F
069B:  BTFSS  03.2
069C:  GOTO   6B7
069D:  BSF    03.5
069E:  BSF    03.6
069F:  INCF   19,W
06A0:  SUBWF  1C,W
06A1:  BTFSS  03.2
06A2:  GOTO   6A6
06A3:  BCF    03.5
06A4:  BCF    03.6
06A5:  GOTO   6B7
06A6:  MOVF   1A,W
06A7:  BTFSC  03.2
06A8:  GOTO   6BB
06A9:  ANDLW  0F
06AA:  SUBWF  1C,W
06AB:  BTFSC  03.2
06AC:  GOTO   6AF
06AD:  BTFSC  03.0
06AE:  GOTO   6FB
06AF:  BTFSC  1A.7
06B0:  GOTO   6FB
06B1:  BTFSC  1A.6
06B2:  GOTO   6BB
06B3:  MOVLW  20
06B4:  GOTO   6F3
06B5:  BCF    03.5
06B6:  BCF    03.6
06B7:  MOVLW  20
06B8:  BSF    03.5
06B9:  BSF    03.6
06BA:  ANDWF  1A,F
06BB:  BTFSS  1A.5
06BC:  GOTO   6CD
06BD:  BCF    1A.5
06BE:  MOVF   19,W
06BF:  BTFSS  03.2
06C0:  DECF   1A,F
06C1:  MOVF   77,W
06C2:  MOVWF  1A
06C3:  MOVLW  2D
06C4:  MOVWF  22
06C5:  BCF    03.5
06C6:  BCF    03.6
06C7:  CALL   61C
06C8:  BSF    03.5
06C9:  BSF    03.6
06CA:  MOVF   1A,W
06CB:  MOVWF  77
06CC:  CLRF   1A
06CD:  MOVF   19,W
06CE:  SUBWF  1C,W
06CF:  BTFSS  03.2
06D0:  GOTO   6DF
06D1:  MOVF   77,W
06D2:  MOVWF  1A
06D3:  MOVLW  2E
06D4:  MOVWF  22
06D5:  BCF    03.5
06D6:  BCF    03.6
06D7:  CALL   61C
06D8:  BSF    03.5
06D9:  BSF    03.6
06DA:  MOVF   1A,W
06DB:  MOVWF  77
06DC:  MOVLW  20
06DD:  ANDWF  1A,F
06DE:  MOVLW  00
06DF:  MOVLW  30
06E0:  BTFSS  1A.5
06E1:  GOTO   6F3
06E2:  BCF    1A.5
06E3:  MOVF   19,W
06E4:  BTFSS  03.2
06E5:  DECF   1A,F
06E6:  MOVF   77,W
06E7:  MOVWF  1A
06E8:  MOVLW  2D
06E9:  MOVWF  22
06EA:  BCF    03.5
06EB:  BCF    03.6
06EC:  CALL   61C
06ED:  BSF    03.5
06EE:  BSF    03.6
06EF:  MOVF   1A,W
06F0:  MOVWF  77
06F1:  CLRF   1A
06F2:  MOVLW  30
06F3:  ADDWF  77,F
06F4:  MOVF   77,W
06F5:  MOVWF  22
06F6:  BCF    03.5
06F7:  BCF    03.6
06F8:  CALL   61C
06F9:  BSF    03.5
06FA:  BSF    03.6
06FB:  BCF    03.1
06FC:  MOVF   21,W
06FD:  MOVWF  25
06FE:  MOVF   20,W
06FF:  MOVWF  24
0700:  MOVF   1F,W
0701:  MOVWF  23
0702:  MOVF   1E,W
0703:  MOVWF  22
0704:  CLRF   29
0705:  CLRF   28
0706:  CLRF   27
0707:  MOVLW  0A
0708:  MOVWF  26
0709:  BCF    03.5
070A:  BCF    03.6
070B:  CALL   5C9
070C:  MOVF   7A,W
070D:  BSF    03.5
070E:  BSF    03.6
070F:  MOVWF  21
0710:  MOVF   79,W
0711:  MOVWF  20
0712:  MOVF   78,W
0713:  MOVWF  1F
0714:  MOVF   77,W
0715:  MOVWF  1E
0716:  DECFSZ 1C,F
0717:  GOTO   682
0718:  BCF    03.5
0719:  BCF    03.6
071A:  RETURN
071B:  MOVLW  8E
071C:  MOVWF  77
071D:  BSF    03.5
071E:  BSF    03.6
071F:  MOVF   16,W
0720:  MOVWF  78
0721:  MOVF   15,W
0722:  MOVWF  79
0723:  CLRF   7A
0724:  MOVF   78,F
0725:  BTFSS  03.2
0726:  GOTO   731
0727:  MOVF   79,W
0728:  MOVWF  78
0729:  CLRF   79
072A:  MOVLW  08
072B:  SUBWF  77,F
072C:  MOVF   78,F
072D:  BTFSS  03.2
072E:  GOTO   731
072F:  CLRF   77
0730:  GOTO   739
0731:  BCF    03.0
0732:  BTFSC  78.7
0733:  GOTO   738
0734:  RLF    79,F
0735:  RLF    78,F
0736:  DECF   77,F
0737:  GOTO   731
0738:  BCF    78.7
0739:  BCF    03.5
073A:  BCF    03.6
073B:  RETURN
073C:  BSF    03.5
073D:  BSF    03.6
073E:  MOVF   16,W
073F:  MOVWF  1D
0740:  MOVF   1A,W
0741:  XORWF  1D,F
0742:  BTFSS  1D.7
0743:  GOTO   749
0744:  BCF    03.2
0745:  BCF    03.0
0746:  BTFSC  16.7
0747:  BSF    03.0
0748:  GOTO   77C
0749:  MOVF   16,W
074A:  MOVWF  1D
074B:  MOVF   19,W
074C:  MOVWF  1E
074D:  MOVF   15,W
074E:  SUBWF  1E,F
074F:  BTFSC  03.2
0750:  GOTO   757
0751:  BTFSS  1D.7
0752:  GOTO   77C
0753:  MOVF   03,W
0754:  XORLW  01
0755:  MOVWF  03
0756:  GOTO   77C
0757:  MOVF   1A,W
0758:  MOVWF  1E
0759:  MOVF   16,W
075A:  SUBWF  1E,F
075B:  BTFSC  03.2
075C:  GOTO   763
075D:  BTFSS  1D.7
075E:  GOTO   77C
075F:  MOVF   03,W
0760:  XORLW  01
0761:  MOVWF  03
0762:  GOTO   77C
0763:  MOVF   1B,W
0764:  MOVWF  1E
0765:  MOVF   17,W
0766:  SUBWF  1E,F
0767:  BTFSC  03.2
0768:  GOTO   76F
0769:  BTFSS  1D.7
076A:  GOTO   77C
076B:  MOVF   03,W
076C:  XORLW  01
076D:  MOVWF  03
076E:  GOTO   77C
076F:  MOVF   1C,W
0770:  MOVWF  1E
0771:  MOVF   18,W
0772:  SUBWF  1E,F
0773:  BTFSC  03.2
0774:  GOTO   77B
0775:  BTFSS  1D.7
0776:  GOTO   77C
0777:  MOVF   03,W
0778:  XORLW  01
0779:  MOVWF  03
077A:  GOTO   77C
077B:  BCF    03.0
077C:  BCF    03.5
077D:  BCF    03.6
077E:  RETURN
077F:  MOVLW  8E
0780:  MOVWF  77
0781:  BSF    03.5
0782:  BSF    03.6
0783:  MOVF   1B,W
0784:  SUBWF  77,F
0785:  MOVF   1C,W
0786:  MOVWF  79
0787:  MOVF   1D,W
0788:  MOVWF  78
0789:  BSF    79.7
078A:  MOVF   77,F
078B:  BTFSC  03.2
078C:  GOTO   798
078D:  BCF    03.0
078E:  MOVF   79,F
078F:  BTFSS  03.2
0790:  GOTO   794
0791:  MOVF   78,F
0792:  BTFSC  03.2
0793:  GOTO   798
0794:  RRF    79,F
0795:  RRF    78,F
0796:  DECFSZ 77,F
0797:  GOTO   78D
0798:  BTFSS  1C.7
0799:  GOTO   79F
079A:  COMF   78,F
079B:  COMF   79,F
079C:  INCF   78,F
079D:  BTFSC  03.2
079E:  INCF   79,F
079F:  BCF    03.5
07A0:  BCF    03.6
07A1:  RETURN
*
07DB:  MOVF   00,F
07DC:  BTFSC  03.2
07DD:  GOTO   7F8
07DE:  BSF    03.6
07DF:  CLRF   26
07E0:  MOVF   04,W
07E1:  MOVWF  25
07E2:  BCF    26.0
07E3:  BTFSC  03.7
07E4:  BSF    26.0
07E5:  MOVF   00,W
07E6:  BCF    03.6
07E7:  BTFSS  0C.4
07E8:  GOTO   7E7
07E9:  MOVWF  19
07EA:  BSF    03.6
07EB:  MOVF   25,W
07EC:  MOVWF  04
07ED:  BCF    03.7
07EE:  BTFSC  26.0
07EF:  BSF    03.7
07F0:  INCF   04,F
07F1:  BTFSS  03.2
07F2:  GOTO   7F6
07F3:  BCF    03.6
07F4:  INCF   05,F
07F5:  BSF    03.6
07F6:  BCF    03.6
07F7:  GOTO   7DB
07F8:  BSF    0A.3
07F9:  BSF    0A.4
07FA:  GOTO   572 (RETURN)
*
0800:  BSF    03.5
0801:  BSF    03.6
0802:  MOVF   19,W
0803:  BTFSC  03.2
0804:  GOTO   0C8
0805:  MOVWF  25
0806:  MOVF   1D,W
0807:  BTFSC  03.2
0808:  GOTO   0C8
0809:  SUBWF  25,F
080A:  BTFSC  03.0
080B:  GOTO   00D
080C:  GOTO   012
080D:  MOVLW  7F
080E:  ADDWF  25,F
080F:  BTFSC  03.0
0810:  GOTO   0C8
0811:  GOTO   018
0812:  MOVLW  81
0813:  SUBWF  25,F
0814:  BTFSS  03.0
0815:  GOTO   0C8
0816:  BTFSC  03.2
0817:  GOTO   0C8
0818:  MOVF   25,W
0819:  MOVWF  77
081A:  CLRF   78
081B:  CLRF   79
081C:  CLRF   7A
081D:  CLRF   24
081E:  MOVF   1A,W
081F:  MOVWF  23
0820:  BSF    23.7
0821:  MOVF   1B,W
0822:  MOVWF  22
0823:  MOVF   1C,W
0824:  MOVWF  21
0825:  MOVLW  19
0826:  MOVWF  25
0827:  MOVF   20,W
0828:  SUBWF  21,F
0829:  BTFSC  03.0
082A:  GOTO   03B
082B:  MOVLW  01
082C:  SUBWF  22,F
082D:  BTFSC  03.0
082E:  GOTO   03B
082F:  SUBWF  23,F
0830:  BTFSC  03.0
0831:  GOTO   03B
0832:  SUBWF  24,F
0833:  BTFSC  03.0
0834:  GOTO   03B
0835:  INCF   24,F
0836:  INCF   23,F
0837:  INCF   22,F
0838:  MOVF   20,W
0839:  ADDWF  21,F
083A:  GOTO   06D
083B:  MOVF   1F,W
083C:  SUBWF  22,F
083D:  BTFSC  03.0
083E:  GOTO   056
083F:  MOVLW  01
0840:  SUBWF  23,F
0841:  BTFSC  03.0
0842:  GOTO   056
0843:  SUBWF  24,F
0844:  BTFSC  03.0
0845:  GOTO   056
0846:  INCF   24,F
0847:  INCF   23,F
0848:  MOVF   1F,W
0849:  ADDWF  22,F
084A:  MOVF   20,W
084B:  ADDWF  21,F
084C:  BTFSS  03.0
084D:  GOTO   06D
084E:  INCF   22,F
084F:  BTFSS  03.2
0850:  GOTO   06D
0851:  INCF   23,F
0852:  BTFSS  03.2
0853:  GOTO   06D
0854:  INCF   24,F
0855:  GOTO   06D
0856:  MOVF   1E,W
0857:  IORLW  80
0858:  SUBWF  23,F
0859:  BTFSC  03.0
085A:  GOTO   06C
085B:  MOVLW  01
085C:  SUBWF  24,F
085D:  BTFSC  03.0
085E:  GOTO   06C
085F:  INCF   24,F
0860:  MOVF   1E,W
0861:  IORLW  80
0862:  ADDWF  23,F
0863:  MOVF   1F,W
0864:  ADDWF  22,F
0865:  BTFSS  03.0
0866:  GOTO   04A
0867:  INCF   23,F
0868:  BTFSS  03.2
0869:  GOTO   04A
086A:  INCF   24,F
086B:  GOTO   04A
086C:  BSF    7A.0
086D:  DECFSZ 25,F
086E:  GOTO   070
086F:  GOTO   07B
0870:  BCF    03.0
0871:  RLF    21,F
0872:  RLF    22,F
0873:  RLF    23,F
0874:  RLF    24,F
0875:  BCF    03.0
0876:  RLF    7A,F
0877:  RLF    79,F
0878:  RLF    78,F
0879:  RLF    26,F
087A:  GOTO   027
087B:  BTFSS  26.0
087C:  GOTO   083
087D:  BCF    03.0
087E:  RRF    78,F
087F:  RRF    79,F
0880:  RRF    7A,F
0881:  RRF    26,F
0882:  GOTO   086
0883:  DECF   77,F
0884:  BTFSC  03.2
0885:  GOTO   0C8
0886:  BTFSC  26.7
0887:  GOTO   0AF
0888:  BCF    03.0
0889:  RLF    21,F
088A:  RLF    22,F
088B:  RLF    23,F
088C:  RLF    24,F
088D:  MOVF   20,W
088E:  SUBWF  21,F
088F:  BTFSC  03.0
0890:  GOTO   09B
0891:  MOVLW  01
0892:  SUBWF  22,F
0893:  BTFSC  03.0
0894:  GOTO   09B
0895:  SUBWF  23,F
0896:  BTFSC  03.0
0897:  GOTO   09B
0898:  SUBWF  24,F
0899:  BTFSS  03.0
089A:  GOTO   0BE
089B:  MOVF   1F,W
089C:  SUBWF  22,F
089D:  BTFSC  03.0
089E:  GOTO   0A6
089F:  MOVLW  01
08A0:  SUBWF  23,F
08A1:  BTFSC  03.0
08A2:  GOTO   0A6
08A3:  SUBWF  24,F
08A4:  BTFSS  03.0
08A5:  GOTO   0BE
08A6:  MOVF   1E,W
08A7:  IORLW  80
08A8:  SUBWF  23,F
08A9:  BTFSC  03.0
08AA:  GOTO   0AF
08AB:  MOVLW  01
08AC:  SUBWF  24,F
08AD:  BTFSS  03.0
08AE:  GOTO   0BE
08AF:  INCF   7A,F
08B0:  BTFSS  03.2
08B1:  GOTO   0BE
08B2:  INCF   79,F
08B3:  BTFSS  03.2
08B4:  GOTO   0BE
08B5:  INCF   78,F
08B6:  BTFSS  03.2
08B7:  GOTO   0BE
08B8:  INCF   77,F
08B9:  BTFSC  03.2
08BA:  GOTO   0C8
08BB:  RRF    78,F
08BC:  RRF    79,F
08BD:  RRF    7A,F
08BE:  MOVF   1A,W
08BF:  MOVWF  25
08C0:  MOVF   1E,W
08C1:  XORWF  25,F
08C2:  BTFSS  25.7
08C3:  GOTO   0C6
08C4:  BSF    78.7
08C5:  GOTO   0CC
08C6:  BCF    78.7
08C7:  GOTO   0CC
08C8:  CLRF   77
08C9:  CLRF   78
08CA:  CLRF   79
08CB:  CLRF   7A
08CC:  BCF    03.5
08CD:  BCF    03.6
08CE:  RETURN
08CF:  MOVF   04,W
08D0:  BSF    03.5
08D1:  BSF    03.6
08D2:  MOVWF  1A
08D3:  MOVF   19,W
08D4:  MOVWF  1C
08D5:  BTFSC  03.2
08D6:  GOTO   0F6
08D7:  MOVF   18,W
08D8:  MOVWF  25
08D9:  MOVF   17,W
08DA:  MOVWF  24
08DB:  MOVF   16,W
08DC:  MOVWF  23
08DD:  MOVF   15,W
08DE:  MOVWF  22
08DF:  CLRF   29
08E0:  CLRF   28
08E1:  MOVLW  20
08E2:  MOVWF  27
08E3:  MOVLW  82
08E4:  MOVWF  26
08E5:  BCF    0A.3
08E6:  BCF    03.5
08E7:  BCF    03.6
08E8:  CALL   52D
08E9:  BSF    0A.3
08EA:  MOVF   7A,W
08EB:  BSF    03.5
08EC:  BSF    03.6
08ED:  MOVWF  18
08EE:  MOVF   79,W
08EF:  MOVWF  17
08F0:  MOVF   78,W
08F1:  MOVWF  16
08F2:  MOVF   77,W
08F3:  MOVWF  15
08F4:  DECFSZ 1C,F
08F5:  GOTO   0D7
08F6:  MOVF   18,W
08F7:  MOVWF  25
08F8:  MOVF   17,W
08F9:  MOVWF  24
08FA:  MOVF   16,W
08FB:  MOVWF  23
08FC:  MOVF   15,W
08FD:  MOVWF  22
08FE:  BCF    0A.3
08FF:  BCF    03.5
0900:  BCF    03.6
0901:  CALL   5A6
0902:  BSF    0A.3
0903:  MOVF   7A,W
0904:  BSF    03.5
0905:  BSF    03.6
0906:  MOVWF  18
0907:  MOVF   79,W
0908:  MOVWF  17
0909:  MOVF   78,W
090A:  MOVWF  16
090B:  MOVF   77,W
090C:  MOVWF  15
090D:  BTFSS  18.7
090E:  GOTO   11C
090F:  DECF   1A,F
0910:  BSF    1A.5
0911:  COMF   15,F
0912:  COMF   16,F
0913:  COMF   17,F
0914:  COMF   18,F
0915:  INCF   15,F
0916:  BTFSC  03.2
0917:  INCF   16,F
0918:  BTFSC  03.2
0919:  INCF   17,F
091A:  BTFSC  03.2
091B:  INCF   18,F
091C:  MOVLW  3B
091D:  MOVWF  21
091E:  MOVLW  9A
091F:  MOVWF  20
0920:  MOVLW  CA
0921:  MOVWF  1F
0922:  CLRF   1E
0923:  MOVLW  0A
0924:  MOVWF  1C
0925:  MOVF   19,W
0926:  BTFSC  03.2
0927:  INCF   1A,F
0928:  BSF    03.1
0929:  MOVLW  95
092A:  MOVWF  04
092B:  BSF    03.7
092C:  MOVF   18,W
092D:  MOVWF  25
092E:  MOVF   17,W
092F:  MOVWF  24
0930:  MOVF   16,W
0931:  MOVWF  23
0932:  MOVF   15,W
0933:  MOVWF  22
0934:  MOVF   21,W
0935:  MOVWF  29
0936:  MOVF   20,W
0937:  MOVWF  28
0938:  MOVF   1F,W
0939:  MOVWF  27
093A:  MOVF   1E,W
093B:  MOVWF  26
093C:  BCF    0A.3
093D:  BCF    03.5
093E:  BCF    03.6
093F:  CALL   5C9
0940:  BSF    0A.3
0941:  MOVF   78,W
0942:  MOVF   77,F
0943:  BTFSS  03.2
0944:  GOTO   15F
0945:  BSF    03.5
0946:  BSF    03.6
0947:  INCF   19,W
0948:  SUBWF  1C,W
0949:  BTFSS  03.2
094A:  GOTO   14E
094B:  BCF    03.5
094C:  BCF    03.6
094D:  GOTO   15F
094E:  MOVF   1A,W
094F:  BTFSC  03.2
0950:  GOTO   163
0951:  ANDLW  0F
0952:  SUBWF  1C,W
0953:  BTFSC  03.2
0954:  GOTO   157
0955:  BTFSC  03.0
0956:  GOTO   1A7
0957:  BTFSC  1A.7
0958:  GOTO   1A7
0959:  BTFSC  1A.6
095A:  GOTO   163
095B:  MOVLW  20
095C:  GOTO   19E
095D:  BCF    03.5
095E:  BCF    03.6
095F:  MOVLW  20
0960:  BSF    03.5
0961:  BSF    03.6
0962:  ANDWF  1A,F
0963:  BTFSS  1A.5
0964:  GOTO   176
0965:  BCF    1A.5
0966:  MOVF   19,W
0967:  BTFSS  03.2
0968:  DECF   1A,F
0969:  MOVF   77,W
096A:  MOVWF  1A
096B:  MOVLW  2D
096C:  BCF    03.5
096D:  BCF    03.6
096E:  BTFSS  0C.4
096F:  GOTO   16E
0970:  MOVWF  19
0971:  BSF    03.5
0972:  BSF    03.6
0973:  MOVF   1A,W
0974:  MOVWF  77
0975:  CLRF   1A
0976:  MOVF   19,W
0977:  SUBWF  1C,W
0978:  BTFSS  03.2
0979:  GOTO   189
097A:  MOVF   77,W
097B:  MOVWF  1A
097C:  MOVLW  2E
097D:  BCF    03.5
097E:  BCF    03.6
097F:  BTFSS  0C.4
0980:  GOTO   17F
0981:  MOVWF  19
0982:  BSF    03.5
0983:  BSF    03.6
0984:  MOVF   1A,W
0985:  MOVWF  77
0986:  MOVLW  20
0987:  ANDWF  1A,F
0988:  MOVLW  00
0989:  MOVLW  30
098A:  BTFSS  1A.5
098B:  GOTO   19E
098C:  BCF    1A.5
098D:  MOVF   19,W
098E:  BTFSS  03.2
098F:  DECF   1A,F
0990:  MOVF   77,W
0991:  MOVWF  1A
0992:  MOVLW  2D
0993:  BCF    03.5
0994:  BCF    03.6
0995:  BTFSS  0C.4
0996:  GOTO   195
0997:  MOVWF  19
0998:  BSF    03.5
0999:  BSF    03.6
099A:  MOVF   1A,W
099B:  MOVWF  77
099C:  CLRF   1A
099D:  MOVLW  30
099E:  ADDWF  77,F
099F:  MOVF   77,W
09A0:  BCF    03.5
09A1:  BCF    03.6
09A2:  BTFSS  0C.4
09A3:  GOTO   1A2
09A4:  MOVWF  19
09A5:  BSF    03.5
09A6:  BSF    03.6
09A7:  BCF    03.1
09A8:  MOVF   21,W
09A9:  MOVWF  25
09AA:  MOVF   20,W
09AB:  MOVWF  24
09AC:  MOVF   1F,W
09AD:  MOVWF  23
09AE:  MOVF   1E,W
09AF:  MOVWF  22
09B0:  CLRF   29
09B1:  CLRF   28
09B2:  CLRF   27
09B3:  MOVLW  0A
09B4:  MOVWF  26
09B5:  BCF    0A.3
09B6:  BCF    03.5
09B7:  BCF    03.6
09B8:  CALL   5C9
09B9:  BSF    0A.3
09BA:  MOVF   7A,W
09BB:  BSF    03.5
09BC:  BSF    03.6
09BD:  MOVWF  21
09BE:  MOVF   79,W
09BF:  MOVWF  20
09C0:  MOVF   78,W
09C1:  MOVWF  1F
09C2:  MOVF   77,W
09C3:  MOVWF  1E
09C4:  DECFSZ 1C,F
09C5:  GOTO   128
09C6:  BCF    03.6
09C7:  BCF    03.5
09C8:  BCF    0A.3
09C9:  BSF    0A.4
09CA:  GOTO   278 (RETURN)
09CB:  MOVLW  80
09CC:  BTFSS  03.1
09CD:  GOTO   1D3
09CE:  BSF    03.5
09CF:  BSF    03.6
09D0:  XORWF  24,F
09D1:  BCF    03.5
09D2:  BCF    03.6
09D3:  BSF    03.5
09D4:  BSF    03.6
09D5:  CLRF   29
09D6:  CLRF   2A
09D7:  MOVF   20,W
09D8:  MOVWF  28
09D9:  MOVF   24,W
09DA:  XORWF  28,F
09DB:  MOVF   1F,W
09DC:  BTFSC  03.2
09DD:  GOTO   2C2
09DE:  MOVWF  27
09DF:  MOVWF  77
09E0:  MOVF   23,W
09E1:  BTFSC  03.2
09E2:  GOTO   2CB
09E3:  SUBWF  27,F
09E4:  BTFSC  03.2
09E5:  GOTO   267
09E6:  BTFSS  03.0
09E7:  GOTO   225
09E8:  MOVF   24,W
09E9:  MOVWF  2D
09EA:  BSF    2D.7
09EB:  MOVF   25,W
09EC:  MOVWF  2C
09ED:  MOVF   26,W
09EE:  MOVWF  2B
09EF:  CLRF   2A
09F0:  BCF    03.0
09F1:  RRF    2D,F
09F2:  RRF    2C,F
09F3:  RRF    2B,F
09F4:  RRF    2A,F
09F5:  DECFSZ 27,F
09F6:  GOTO   1EF
09F7:  BTFSS  28.7
09F8:  GOTO   1FC
09F9:  BSF    29.0
09FA:  GOTO   2DF
09FB:  BCF    29.0
09FC:  BCF    27.0
09FD:  BSF    29.4
09FE:  MOVLW  A2
09FF:  MOVWF  04
0A00:  BSF    03.7
0A01:  GOTO   2F4
0A02:  BCF    29.4
0A03:  BTFSC  28.7
0A04:  GOTO   20F
0A05:  BTFSS  27.0
0A06:  GOTO   21A
0A07:  RRF    2D,F
0A08:  RRF    2C,F
0A09:  RRF    2B,F
0A0A:  RRF    2A,F
0A0B:  INCF   77,F
0A0C:  BTFSC  03.2
0A0D:  GOTO   2DA
0A0E:  GOTO   21A
0A0F:  BTFSC  2D.7
0A10:  GOTO   21D
0A11:  BCF    03.0
0A12:  RLF    2A,F
0A13:  RLF    2B,F
0A14:  RLF    2C,F
0A15:  RLF    2D,F
0A16:  DECF   77,F
0A17:  BTFSC  03.2
0A18:  GOTO   2DA
0A19:  GOTO   20F
0A1A:  BSF    29.6
0A1B:  GOTO   287
0A1C:  BCF    29.6
0A1D:  MOVF   20,W
0A1E:  MOVWF  28
0A1F:  BTFSS  28.7
0A20:  GOTO   223
0A21:  BSF    2D.7
0A22:  GOTO   2D3
0A23:  BCF    2D.7
0A24:  GOTO   2D3
0A25:  MOVF   23,W
0A26:  MOVWF  27
0A27:  MOVWF  77
0A28:  MOVF   1F,W
0A29:  SUBWF  27,F
0A2A:  MOVF   20,W
0A2B:  MOVWF  2D
0A2C:  BSF    2D.7
0A2D:  MOVF   21,W
0A2E:  MOVWF  2C
0A2F:  MOVF   22,W
0A30:  MOVWF  2B
0A31:  CLRF   2A
0A32:  BCF    03.0
0A33:  RRF    2D,F
0A34:  RRF    2C,F
0A35:  RRF    2B,F
0A36:  RRF    2A,F
0A37:  DECFSZ 27,F
0A38:  GOTO   231
0A39:  BTFSS  28.7
0A3A:  GOTO   23E
0A3B:  BSF    29.1
0A3C:  GOTO   2DF
0A3D:  BCF    29.1
0A3E:  BCF    27.0
0A3F:  BSF    29.5
0A40:  MOVLW  A6
0A41:  MOVWF  04
0A42:  BSF    03.7
0A43:  GOTO   2F4
0A44:  BCF    29.5
0A45:  BTFSC  28.7
0A46:  GOTO   251
0A47:  BTFSS  27.0
0A48:  GOTO   25C
0A49:  RRF    2D,F
0A4A:  RRF    2C,F
0A4B:  RRF    2B,F
0A4C:  RRF    2A,F
0A4D:  INCF   77,F
0A4E:  BTFSC  03.2
0A4F:  GOTO   2DA
0A50:  GOTO   25C
0A51:  BTFSC  2D.7
0A52:  GOTO   25F
0A53:  BCF    03.0
0A54:  RLF    2A,F
0A55:  RLF    2B,F
0A56:  RLF    2C,F
0A57:  RLF    2D,F
0A58:  DECF   77,F
0A59:  BTFSC  03.2
0A5A:  GOTO   2DA
0A5B:  GOTO   251
0A5C:  BSF    29.7
0A5D:  GOTO   287
0A5E:  BCF    29.7
0A5F:  MOVF   24,W
0A60:  MOVWF  28
0A61:  BTFSS  28.7
0A62:  GOTO   265
0A63:  BSF    2D.7
0A64:  GOTO   2D3
0A65:  BCF    2D.7
0A66:  GOTO   2D3
0A67:  MOVF   24,W
0A68:  MOVWF  2D
0A69:  BSF    2D.7
0A6A:  MOVF   25,W
0A6B:  MOVWF  2C
0A6C:  MOVF   26,W
0A6D:  MOVWF  2B
0A6E:  BTFSS  28.7
0A6F:  GOTO   274
0A70:  BCF    2D.7
0A71:  BSF    29.2
0A72:  GOTO   2DF
0A73:  BCF    29.2
0A74:  CLRF   2A
0A75:  BCF    27.0
0A76:  MOVLW  A2
0A77:  MOVWF  04
0A78:  BSF    03.7
0A79:  GOTO   2F4
0A7A:  BTFSC  28.7
0A7B:  GOTO   29D
0A7C:  MOVF   20,W
0A7D:  MOVWF  28
0A7E:  BTFSS  27.0
0A7F:  GOTO   287
0A80:  RRF    2D,F
0A81:  RRF    2C,F
0A82:  RRF    2B,F
0A83:  RRF    2A,F
0A84:  INCF   77,F
0A85:  BTFSC  03.2
0A86:  GOTO   2DA
0A87:  BTFSS  2A.7
0A88:  GOTO   298
0A89:  INCF   2B,F
0A8A:  BTFSS  03.2
0A8B:  GOTO   298
0A8C:  INCF   2C,F
0A8D:  BTFSS  03.2
0A8E:  GOTO   298
0A8F:  INCF   2D,F
0A90:  BTFSS  03.2
0A91:  GOTO   298
0A92:  RRF    2D,F
0A93:  RRF    2C,F
0A94:  RRF    2B,F
0A95:  INCF   77,F
0A96:  BTFSC  03.2
0A97:  GOTO   2DA
0A98:  BTFSC  29.6
0A99:  GOTO   21C
0A9A:  BTFSC  29.7
0A9B:  GOTO   25E
0A9C:  GOTO   2BC
0A9D:  MOVLW  80
0A9E:  XORWF  2D,F
0A9F:  BTFSS  2D.7
0AA0:  GOTO   2A5
0AA1:  GOTO   2DF
0AA2:  MOVF   24,W
0AA3:  MOVWF  28
0AA4:  GOTO   2B2
0AA5:  MOVF   20,W
0AA6:  MOVWF  28
0AA7:  MOVF   2D,F
0AA8:  BTFSS  03.2
0AA9:  GOTO   2B2
0AAA:  MOVF   2C,F
0AAB:  BTFSS  03.2
0AAC:  GOTO   2B2
0AAD:  MOVF   2B,F
0AAE:  BTFSS  03.2
0AAF:  GOTO   2B2
0AB0:  CLRF   77
0AB1:  GOTO   2D3
0AB2:  BTFSC  2D.7
0AB3:  GOTO   2BC
0AB4:  BCF    03.0
0AB5:  RLF    2A,F
0AB6:  RLF    2B,F
0AB7:  RLF    2C,F
0AB8:  RLF    2D,F
0AB9:  DECFSZ 77,F
0ABA:  GOTO   2B2
0ABB:  GOTO   2DA
0ABC:  BTFSS  28.7
0ABD:  GOTO   2C0
0ABE:  BSF    2D.7
0ABF:  GOTO   2D3
0AC0:  BCF    2D.7
0AC1:  GOTO   2D3
0AC2:  MOVF   23,W
0AC3:  MOVWF  77
0AC4:  MOVF   24,W
0AC5:  MOVWF  2D
0AC6:  MOVF   25,W
0AC7:  MOVWF  2C
0AC8:  MOVF   26,W
0AC9:  MOVWF  2B
0ACA:  GOTO   2D3
0ACB:  MOVF   1F,W
0ACC:  MOVWF  77
0ACD:  MOVF   20,W
0ACE:  MOVWF  2D
0ACF:  MOVF   21,W
0AD0:  MOVWF  2C
0AD1:  MOVF   22,W
0AD2:  MOVWF  2B
0AD3:  MOVF   2D,W
0AD4:  MOVWF  78
0AD5:  MOVF   2C,W
0AD6:  MOVWF  79
0AD7:  MOVF   2B,W
0AD8:  MOVWF  7A
0AD9:  GOTO   312
0ADA:  CLRF   77
0ADB:  CLRF   78
0ADC:  CLRF   79
0ADD:  CLRF   7A
0ADE:  GOTO   312
0ADF:  CLRF   2A
0AE0:  COMF   2B,F
0AE1:  COMF   2C,F
0AE2:  COMF   2D,F
0AE3:  COMF   2A,F
0AE4:  INCF   2A,F
0AE5:  BTFSS  03.2
0AE6:  GOTO   2ED
0AE7:  INCF   2B,F
0AE8:  BTFSS  03.2
0AE9:  GOTO   2ED
0AEA:  INCF   2C,F
0AEB:  BTFSC  03.2
0AEC:  INCF   2D,F
0AED:  BTFSC  29.0
0AEE:  GOTO   1FB
0AEF:  BTFSC  29.1
0AF0:  GOTO   23D
0AF1:  BTFSC  29.2
0AF2:  GOTO   273
0AF3:  GOTO   2A2
0AF4:  MOVF   00,W
0AF5:  ADDWF  2B,F
0AF6:  BTFSS  03.0
0AF7:  GOTO   2FE
0AF8:  INCF   2C,F
0AF9:  BTFSS  03.2
0AFA:  GOTO   2FE
0AFB:  INCF   2D,F
0AFC:  BTFSC  03.2
0AFD:  BSF    27.0
0AFE:  DECF   04,F
0AFF:  MOVF   00,W
0B00:  ADDWF  2C,F
0B01:  BTFSS  03.0
0B02:  GOTO   306
0B03:  INCF   2D,F
0B04:  BTFSC  03.2
0B05:  BSF    27.0
0B06:  DECF   04,F
0B07:  MOVF   00,W
0B08:  BTFSS  00.7
0B09:  XORLW  80
0B0A:  ADDWF  2D,F
0B0B:  BTFSC  03.0
0B0C:  BSF    27.0
0B0D:  BTFSC  29.4
0B0E:  GOTO   202
0B0F:  BTFSC  29.5
0B10:  GOTO   244
0B11:  GOTO   27A
0B12:  BCF    03.5
0B13:  BCF    03.6
0B14:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=4000000) 
*
026D:  MOVLW  45
026E:  MOVWF  04
026F:  BSF    03.7
0270:  MOVF   00,W
0271:  BTFSC  03.2
0272:  GOTO   281
0273:  MOVLW  01
0274:  MOVWF  78
0275:  CLRF   77
0276:  DECFSZ 77,F
0277:  GOTO   276
0278:  DECFSZ 78,F
0279:  GOTO   275
027A:  MOVLW  4A
027B:  MOVWF  77
027C:  DECFSZ 77,F
027D:  GOTO   27C
027E:  GOTO   27F
027F:  DECFSZ 00,F
0280:  GOTO   273
0281:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6,rcv=PIN_C7, bits=8, parity=N) 
....................  
.................... #fuses XT, NOWDT,NOPROTECT,NOLVP 
.................... #include <HDM64GS12.c> //Manejo del display gráfico 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B0   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B1   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B2   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B4   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B5   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C0   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    unsigned int8 left[512]; 
....................    unsigned int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
0CCC:  BCF    28.0
0CCD:  MOVF   28,W
0CCE:  BSF    03.5
0CCF:  MOVWF  07
0CD0:  BCF    03.5
0CD1:  BSF    07.0
....................    output_low(GLCD_E); 
0CD2:  BSF    03.5
0CD3:  BCF    06.5
0CD4:  BCF    03.5
0CD5:  BCF    06.5
....................    output_low(GLCD_CS1); 
0CD6:  BSF    03.5
0CD7:  BCF    06.0
0CD8:  BCF    03.5
0CD9:  BCF    06.0
....................    output_low(GLCD_CS2); 
0CDA:  BSF    03.5
0CDB:  BCF    06.1
0CDC:  BCF    03.5
0CDD:  BCF    06.1
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
0CDE:  BSF    03.5
0CDF:  BCF    06.2
0CE0:  BCF    03.5
0CE1:  BCF    06.2
0CE2:  CLRF   27
0CE3:  BTFSC  0B.7
0CE4:  BSF    27.7
0CE5:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
0CE6:  BSF    03.5
0CE7:  BSF    03.6
0CE8:  CLRF   33
0CE9:  MOVLW  C0
0CEA:  MOVWF  34
0CEB:  BCF    0A.3
0CEC:  BCF    03.5
0CED:  BCF    03.6
0CEE:  CALL   2F4
0CEF:  BSF    0A.3
0CF0:  BTFSC  27.7
0CF1:  BSF    0B.7
0CF2:  CLRF   27
0CF3:  BTFSC  0B.7
0CF4:  BSF    27.7
0CF5:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
0CF6:  MOVLW  01
0CF7:  BSF    03.5
0CF8:  BSF    03.6
0CF9:  MOVWF  33
0CFA:  MOVLW  C0
0CFB:  MOVWF  34
0CFC:  BCF    0A.3
0CFD:  BCF    03.5
0CFE:  BCF    03.6
0CFF:  CALL   2F4
0D00:  BSF    0A.3
0D01:  BTFSC  27.7
0D02:  BSF    0B.7
0D03:  CLRF   27
0D04:  BTFSC  0B.7
0D05:  BSF    27.7
0D06:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
0D07:  BSF    03.5
0D08:  BSF    03.6
0D09:  CLRF   33
0D0A:  MOVLW  40
0D0B:  MOVWF  34
0D0C:  BCF    0A.3
0D0D:  BCF    03.5
0D0E:  BCF    03.6
0D0F:  CALL   2F4
0D10:  BSF    0A.3
0D11:  BTFSC  27.7
0D12:  BSF    0B.7
0D13:  CLRF   27
0D14:  BTFSC  0B.7
0D15:  BSF    27.7
0D16:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
0D17:  MOVLW  01
0D18:  BSF    03.5
0D19:  BSF    03.6
0D1A:  MOVWF  33
0D1B:  MOVLW  40
0D1C:  MOVWF  34
0D1D:  BCF    0A.3
0D1E:  BCF    03.5
0D1F:  BCF    03.6
0D20:  CALL   2F4
0D21:  BSF    0A.3
0D22:  BTFSC  27.7
0D23:  BSF    0B.7
0D24:  CLRF   27
0D25:  BTFSC  0B.7
0D26:  BSF    27.7
0D27:  BCF    0B.7
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
0D28:  BSF    03.5
0D29:  BSF    03.6
0D2A:  CLRF   33
0D2B:  MOVLW  B8
0D2C:  MOVWF  34
0D2D:  BCF    0A.3
0D2E:  BCF    03.5
0D2F:  BCF    03.6
0D30:  CALL   2F4
0D31:  BSF    0A.3
0D32:  BTFSC  27.7
0D33:  BSF    0B.7
0D34:  CLRF   27
0D35:  BTFSC  0B.7
0D36:  BSF    27.7
0D37:  BCF    0B.7
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
0D38:  MOVLW  01
0D39:  BSF    03.5
0D3A:  BSF    03.6
0D3B:  MOVWF  33
0D3C:  MOVLW  B8
0D3D:  MOVWF  34
0D3E:  BCF    0A.3
0D3F:  BCF    03.5
0D40:  BCF    03.6
0D41:  CALL   2F4
0D42:  BSF    0A.3
0D43:  BTFSC  27.7
0D44:  BSF    0B.7
....................  
....................    if(mode == ON) 
0D45:  BSF    03.6
0D46:  DECFSZ 25,W
0D47:  GOTO   56C
0D48:  BCF    03.6
0D49:  CLRF   27
0D4A:  BTFSC  0B.7
0D4B:  BSF    27.7
0D4C:  BCF    0B.7
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
0D4D:  BSF    03.5
0D4E:  BSF    03.6
0D4F:  CLRF   33
0D50:  MOVLW  3F
0D51:  MOVWF  34
0D52:  BCF    0A.3
0D53:  BCF    03.5
0D54:  BCF    03.6
0D55:  CALL   2F4
0D56:  BSF    0A.3
0D57:  BTFSC  27.7
0D58:  BSF    0B.7
0D59:  CLRF   27
0D5A:  BTFSC  0B.7
0D5B:  BSF    27.7
0D5C:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
0D5D:  MOVLW  01
0D5E:  BSF    03.5
0D5F:  BSF    03.6
0D60:  MOVWF  33
0D61:  MOVLW  3F
0D62:  MOVWF  34
0D63:  BCF    0A.3
0D64:  BCF    03.5
0D65:  BCF    03.6
0D66:  CALL   2F4
0D67:  BSF    0A.3
0D68:  BTFSC  27.7
0D69:  BSF    0B.7
....................    } 
0D6A:  GOTO   58E
0D6B:  BSF    03.6
0D6C:  BCF    03.6
0D6D:  CLRF   27
0D6E:  BTFSC  0B.7
0D6F:  BSF    27.7
0D70:  BCF    0B.7
....................    else 
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
0D71:  BSF    03.5
0D72:  BSF    03.6
0D73:  CLRF   33
0D74:  MOVLW  3E
0D75:  MOVWF  34
0D76:  BCF    0A.3
0D77:  BCF    03.5
0D78:  BCF    03.6
0D79:  CALL   2F4
0D7A:  BSF    0A.3
0D7B:  BTFSC  27.7
0D7C:  BSF    0B.7
0D7D:  CLRF   27
0D7E:  BTFSC  0B.7
0D7F:  BSF    27.7
0D80:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
0D81:  MOVLW  01
0D82:  BSF    03.5
0D83:  BSF    03.6
0D84:  MOVWF  33
0D85:  MOVLW  3E
0D86:  MOVWF  34
0D87:  BCF    0A.3
0D88:  BCF    03.5
0D89:  BCF    03.6
0D8A:  CALL   2F4
0D8B:  BSF    0A.3
0D8C:  BTFSC  27.7
0D8D:  BSF    0B.7
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
0D8E:  BSF    03.6
0D8F:  CLRF   26
....................  
....................    #ifdef FAST_GLCD 
*
0E4D:  BCF    03.6
0E4E:  BSF    0A.3
0E4F:  BSF    0A.4
0E50:  GOTO   03E (RETURN)
....................    glcd_update(); 
....................    #endif 
.................... } 
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    unsigned int8 i, j; 
....................    unsigned int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
*
0325:  BSF    03.5
0326:  BSF    03.6
0327:  BCF    30.0
.................... { 
....................    unsigned int8* p; 
....................    unsigned int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
0328:  MOVF   2C,W
0329:  SUBLW  3F
032A:  BTFSC  03.0
032B:  GOTO   32F
....................    { 
....................       x -= 64; 
032C:  MOVLW  40
032D:  SUBWF  2C,F
....................       side = GLCD_RIGHT; 
032E:  BSF    30.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
032F:  BCF    03.6
0330:  BCF    06.2
0331:  BCF    03.5
0332:  BCF    06.2
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
0333:  BSF    03.5
0334:  BSF    03.6
0335:  BCF    2C.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
0336:  BSF    2C.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
0337:  MOVLW  00
0338:  BTFSC  30.0
0339:  MOVLW  01
033A:  MOVWF  31
033B:  MOVWF  33
033C:  MOVF   2C,W
033D:  MOVWF  34
033E:  BCF    03.5
033F:  BCF    03.6
0340:  CALL   2F4
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
0341:  MOVLW  00
0342:  BSF    03.5
0343:  BSF    03.6
0344:  BTFSC  30.0
0345:  MOVLW  01
0346:  MOVWF  31
0347:  RRF    2D,W
0348:  MOVWF  77
0349:  RRF    77,F
034A:  RRF    77,F
034B:  MOVLW  1F
034C:  ANDWF  77,F
034D:  MOVF   77,W
034E:  ANDLW  BF
034F:  IORLW  B8
0350:  MOVWF  32
0351:  MOVF   31,W
0352:  MOVWF  33
0353:  MOVF   32,W
0354:  MOVWF  34
0355:  BCF    03.5
0356:  BCF    03.6
0357:  CALL   2F4
....................    output_high(GLCD_DI);                        // Set for data 
0358:  BSF    03.5
0359:  BCF    06.2
035A:  BCF    03.5
035B:  BSF    06.2
....................    glcd_readByte(side);                         // Need two reads to get data 
035C:  MOVLW  00
035D:  BSF    03.5
035E:  BSF    03.6
035F:  BTFSC  30.0
0360:  MOVLW  01
0361:  MOVWF  31
0362:  MOVF   31,W
0363:  MOVWF  32
....................    data = glcd_readByte(side);                  //  at new address 
*
0398:  MOVLW  00
0399:  BTFSC  30.0
039A:  MOVLW  01
039B:  MOVWF  31
039C:  MOVF   31,W
039D:  MOVWF  32
*
03D2:  MOVF   78,W
03D3:  MOVWF  2F
....................  
....................    if(color == ON) 
03D4:  DECFSZ 2E,W
03D5:  GOTO   3E6
....................       bit_set(data, y%8);        // Turn the pixel on 
03D6:  MOVF   2D,W
03D7:  ANDLW  07
03D8:  MOVWF  31
03D9:  MOVLW  01
03DA:  MOVWF  77
03DB:  MOVF   31,W
03DC:  MOVWF  78
03DD:  BTFSC  03.2
03DE:  GOTO   3E3
03DF:  BCF    03.0
03E0:  RLF    77,F
03E1:  DECFSZ 78,F
03E2:  GOTO   3DF
03E3:  MOVF   77,W
03E4:  IORWF  2F,F
03E5:  GOTO   3F6
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
03E6:  MOVF   2D,W
03E7:  ANDLW  07
03E8:  MOVWF  31
03E9:  MOVLW  01
03EA:  MOVWF  77
03EB:  MOVF   31,W
03EC:  MOVWF  78
03ED:  BTFSC  03.2
03EE:  GOTO   3F3
03EF:  BCF    03.0
03F0:  RLF    77,F
03F1:  DECFSZ 78,F
03F2:  GOTO   3EF
03F3:  MOVF   77,W
03F4:  XORLW  FF
03F5:  ANDWF  2F,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
03F6:  BCF    03.6
03F7:  BCF    06.2
03F8:  BCF    03.5
03F9:  BCF    06.2
....................    glcd_writeByte(side, x);      // Set the horizontal address 
03FA:  MOVLW  00
03FB:  BSF    03.5
03FC:  BSF    03.6
03FD:  BTFSC  30.0
03FE:  MOVLW  01
03FF:  MOVWF  31
0400:  MOVWF  33
0401:  MOVF   2C,W
0402:  MOVWF  34
0403:  BCF    03.5
0404:  BCF    03.6
0405:  CALL   2F4
....................    output_high(GLCD_DI);         // Set for data 
0406:  BSF    03.5
0407:  BCF    06.2
0408:  BCF    03.5
0409:  BSF    06.2
....................    glcd_writeByte(side, data);   // Write the pixel data 
040A:  MOVLW  00
040B:  BSF    03.5
040C:  BSF    03.6
040D:  BTFSC  30.0
040E:  MOVLW  01
040F:  MOVWF  31
0410:  MOVWF  33
0411:  MOVF   2F,W
0412:  MOVWF  34
0413:  BCF    03.5
0414:  BCF    03.6
0415:  CALL   2F4
0416:  RETURN
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    unsigned int8  data; 
....................    unsigned int8  *p1, *p2; 
....................    unsigned int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................    	*p1++ = data; 
....................    	*p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    unsigned int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
0D90:  CLRF   27
0D91:  MOVF   27,W
0D92:  SUBLW  07
0D93:  BTFSS  03.0
0D94:  GOTO   64D
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
0D95:  BSF    03.5
0D96:  BCF    03.6
0D97:  BCF    06.2
0D98:  BCF    03.5
0D99:  BCF    06.2
0D9A:  CLRF   27
0D9B:  BTFSC  0B.7
0D9C:  BSF    27.7
0D9D:  BCF    0B.7
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
0D9E:  BSF    03.5
0D9F:  BSF    03.6
0DA0:  CLRF   33
0DA1:  MOVLW  40
0DA2:  MOVWF  34
0DA3:  BCF    0A.3
0DA4:  BCF    03.5
0DA5:  BCF    03.6
0DA6:  CALL   2F4
0DA7:  BSF    0A.3
0DA8:  BTFSC  27.7
0DA9:  BSF    0B.7
0DAA:  CLRF   27
0DAB:  BTFSC  0B.7
0DAC:  BSF    27.7
0DAD:  BCF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
0DAE:  MOVLW  01
0DAF:  BSF    03.5
0DB0:  BSF    03.6
0DB1:  MOVWF  33
0DB2:  MOVLW  40
0DB3:  MOVWF  34
0DB4:  BCF    0A.3
0DB5:  BCF    03.5
0DB6:  BCF    03.6
0DB7:  CALL   2F4
0DB8:  BSF    0A.3
0DB9:  BTFSC  27.7
0DBA:  BSF    0B.7
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
0DBB:  BSF    03.6
0DBC:  MOVF   27,W
0DBD:  IORLW  B8
0DBE:  MOVWF  29
0DBF:  BCF    03.6
0DC0:  CLRF   27
0DC1:  BTFSC  0B.7
0DC2:  BSF    27.7
0DC3:  BCF    0B.7
0DC4:  BSF    03.5
0DC5:  BSF    03.6
0DC6:  CLRF   33
0DC7:  BCF    03.5
0DC8:  MOVF   29,W
0DC9:  BSF    03.5
0DCA:  MOVWF  34
0DCB:  BCF    0A.3
0DCC:  BCF    03.5
0DCD:  BCF    03.6
0DCE:  CALL   2F4
0DCF:  BSF    0A.3
0DD0:  BTFSC  27.7
0DD1:  BSF    0B.7
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
0DD2:  BSF    03.6
0DD3:  MOVF   27,W
0DD4:  IORLW  B8
0DD5:  MOVWF  29
0DD6:  BCF    03.6
0DD7:  CLRF   27
0DD8:  BTFSC  0B.7
0DD9:  BSF    27.7
0DDA:  BCF    0B.7
0DDB:  MOVLW  01
0DDC:  BSF    03.5
0DDD:  BSF    03.6
0DDE:  MOVWF  33
0DDF:  BCF    03.5
0DE0:  MOVF   29,W
0DE1:  BSF    03.5
0DE2:  MOVWF  34
0DE3:  BCF    0A.3
0DE4:  BCF    03.5
0DE5:  BCF    03.6
0DE6:  CALL   2F4
0DE7:  BSF    0A.3
0DE8:  BTFSC  27.7
0DE9:  BSF    0B.7
....................       output_high(GLCD_DI);                     // Set for data 
0DEA:  BSF    03.5
0DEB:  BCF    06.2
0DEC:  BCF    03.5
0DED:  BSF    06.2
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
0DEE:  BSF    03.6
0DEF:  CLRF   28
0DF0:  MOVF   28,W
0DF1:  SUBLW  3F
0DF2:  BTFSS  03.0
0DF3:  GOTO   64B
0DF4:  BCF    03.6
0DF5:  CLRF   27
0DF6:  BTFSC  0B.7
0DF7:  BSF    27.7
0DF8:  BCF    0B.7
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
0DF9:  MOVLW  FF
0DFA:  BSF    03.5
0DFB:  BSF    03.6
0DFC:  MOVWF  28
0DFD:  BCF    03.5
0DFE:  MOVF   26,W
0DFF:  BSF    03.5
0E00:  MOVWF  29
0E01:  BCF    0A.3
0E02:  BCF    03.5
0E03:  BCF    03.6
0E04:  CALL   2CB
0E05:  BSF    0A.3
0E06:  BTFSC  27.7
0E07:  BSF    0B.7
0E08:  MOVF   78,W
0E09:  BSF    03.6
0E0A:  MOVWF  29
0E0B:  BCF    03.6
0E0C:  CLRF   27
0E0D:  BTFSC  0B.7
0E0E:  BSF    27.7
0E0F:  BCF    0B.7
0E10:  BSF    03.5
0E11:  BSF    03.6
0E12:  CLRF   33
0E13:  BCF    03.5
0E14:  MOVF   29,W
0E15:  BSF    03.5
0E16:  MOVWF  34
0E17:  BCF    0A.3
0E18:  BCF    03.5
0E19:  BCF    03.6
0E1A:  CALL   2F4
0E1B:  BSF    0A.3
0E1C:  BTFSC  27.7
0E1D:  BSF    0B.7
0E1E:  CLRF   27
0E1F:  BTFSC  0B.7
0E20:  BSF    27.7
0E21:  BCF    0B.7
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
0E22:  MOVLW  FF
0E23:  BSF    03.5
0E24:  BSF    03.6
0E25:  MOVWF  28
0E26:  BCF    03.5
0E27:  MOVF   26,W
0E28:  BSF    03.5
0E29:  MOVWF  29
0E2A:  BCF    0A.3
0E2B:  BCF    03.5
0E2C:  BCF    03.6
0E2D:  CALL   2CB
0E2E:  BSF    0A.3
0E2F:  BTFSC  27.7
0E30:  BSF    0B.7
0E31:  MOVF   78,W
0E32:  BSF    03.6
0E33:  MOVWF  29
0E34:  BCF    03.6
0E35:  CLRF   27
0E36:  BTFSC  0B.7
0E37:  BSF    27.7
0E38:  BCF    0B.7
0E39:  MOVLW  01
0E3A:  BSF    03.5
0E3B:  BSF    03.6
0E3C:  MOVWF  33
0E3D:  BCF    03.5
0E3E:  MOVF   29,W
0E3F:  BSF    03.5
0E40:  MOVWF  34
0E41:  BCF    0A.3
0E42:  BCF    03.5
0E43:  BCF    03.6
0E44:  CALL   2F4
0E45:  BSF    0A.3
0E46:  BTFSC  27.7
0E47:  BSF    0B.7
0E48:  BSF    03.6
0E49:  INCF   28,F
0E4A:  GOTO   5F0
....................       } 
0E4B:  INCF   27,F
0E4C:  GOTO   591
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    set_tris_d(0x00); 
*
02F4:  MOVLW  00
02F5:  BSF    03.5
02F6:  MOVWF  08
....................     
....................    output_low(GLCD_RW);       // Set for writing 
02F7:  BCF    06.4
02F8:  BCF    03.5
02F9:  BCF    06.4
....................  
.................... 	 if(side)                   // Choose which side to write to 
02FA:  BSF    03.5
02FB:  BSF    03.6
02FC:  MOVF   33,F
02FD:  BTFSC  03.2
02FE:  GOTO   306
....................       output_high(GLCD_CS2); 
02FF:  BCF    03.6
0300:  BCF    06.1
0301:  BCF    03.5
0302:  BSF    06.1
0303:  GOTO   30A
0304:  BSF    03.5
0305:  BSF    03.6
....................    else 
....................       output_high(GLCD_CS1); 
0306:  BCF    03.6
0307:  BCF    06.0
0308:  BCF    03.5
0309:  BSF    06.0
....................  
.................... 	 delay_us(1); 
030A:  NOP
....................  
....................    output_d(data);            // Put the data on the port 
030B:  BSF    03.5
030C:  CLRF   08
030D:  BSF    03.6
030E:  MOVF   34,W
030F:  BCF    03.5
0310:  BCF    03.6
0311:  MOVWF  08
....................    delay_us(1); 
0312:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
0313:  BSF    03.5
0314:  BCF    06.5
0315:  BCF    03.5
0316:  BSF    06.5
....................    delay_us(1); 
0317:  NOP
....................    output_low(GLCD_E); 
0318:  BSF    03.5
0319:  BCF    06.5
031A:  BCF    03.5
031B:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
031C:  BSF    03.5
031D:  BCF    06.0
031E:  BCF    03.5
031F:  BCF    06.0
....................    output_low(GLCD_CS2); 
0320:  BSF    03.5
0321:  BCF    06.1
0322:  BCF    03.5
0323:  BCF    06.1
0324:  RETURN
.................... } 
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
*
0364:  MOVLW  FF
0365:  BCF    03.6
0366:  MOVWF  08
*
039E:  MOVLW  FF
039F:  BCF    03.6
03A0:  MOVWF  08
....................    output_high(GLCD_RW);      // Set for reading 
*
0367:  BCF    06.4
0368:  BCF    03.5
0369:  BSF    06.4
*
03A1:  BCF    06.4
03A2:  BCF    03.5
03A3:  BSF    06.4
....................  
....................    if(side)                   // Choose which side to write to 
*
036A:  BSF    03.5
036B:  BSF    03.6
036C:  MOVF   32,F
036D:  BTFSC  03.2
036E:  GOTO   376
*
03A4:  BSF    03.5
03A5:  BSF    03.6
03A6:  MOVF   32,F
03A7:  BTFSC  03.2
03A8:  GOTO   3B0
....................       output_high(GLCD_CS2); 
*
036F:  BCF    03.6
0370:  BCF    06.1
0371:  BCF    03.5
0372:  BSF    06.1
0373:  GOTO   37A
0374:  BSF    03.5
0375:  BSF    03.6
*
03A9:  BCF    03.6
03AA:  BCF    06.1
03AB:  BCF    03.5
03AC:  BSF    06.1
03AD:  GOTO   3B4
03AE:  BSF    03.5
03AF:  BSF    03.6
....................    else 
....................       output_high(GLCD_CS1); 
*
0376:  BCF    03.6
0377:  BCF    06.0
0378:  BCF    03.5
0379:  BSF    06.0
*
03B0:  BCF    03.6
03B1:  BCF    06.0
03B2:  BCF    03.5
03B3:  BSF    06.0
....................  
....................    delay_us(1); 
*
037A:  NOP
*
03B4:  NOP
....................    output_high(GLCD_E);       // Pulse the enable pin 
*
037B:  BSF    03.5
037C:  BCF    06.5
037D:  BCF    03.5
037E:  BSF    06.5
*
03B5:  BSF    03.5
03B6:  BCF    06.5
03B7:  BCF    03.5
03B8:  BSF    06.5
....................    delay_us(1); 
*
037F:  NOP
*
03B9:  NOP
....................    data = input_d();          // Get the data from the display's output register 
*
0380:  MOVLW  FF
0381:  BSF    03.5
0382:  MOVWF  08
0383:  BCF    03.5
0384:  MOVF   08,W
0385:  BSF    03.5
0386:  BSF    03.6
0387:  MOVWF  33
*
03BA:  MOVLW  FF
03BB:  BSF    03.5
03BC:  MOVWF  08
03BD:  BCF    03.5
03BE:  MOVF   08,W
03BF:  BSF    03.5
03C0:  BSF    03.6
03C1:  MOVWF  33
....................    output_low(GLCD_E); 
*
0388:  BCF    03.6
0389:  BCF    06.5
038A:  BCF    03.5
038B:  BCF    06.5
*
03C2:  BCF    03.6
03C3:  BCF    06.5
03C4:  BCF    03.5
03C5:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
*
038C:  BSF    03.5
038D:  BCF    06.0
038E:  BCF    03.5
038F:  BCF    06.0
*
03C6:  BSF    03.5
03C7:  BCF    06.0
03C8:  BCF    03.5
03C9:  BCF    06.0
....................    output_low(GLCD_CS2); 
*
0390:  BSF    03.5
0391:  BCF    06.1
0392:  BCF    03.5
0393:  BCF    06.1
*
03CA:  BSF    03.5
03CB:  BCF    06.1
03CC:  BCF    03.5
03CD:  BCF    06.1
....................    return data;               // Return the read data 
*
0394:  BSF    03.5
0395:  BSF    03.6
0396:  MOVF   33,W
0397:  MOVWF  78
*
03CE:  BSF    03.5
03CF:  BSF    03.6
03D0:  MOVF   33,W
03D1:  MOVWF  78
.................... } 
....................  
.................... #endif 
....................  
.................... #include <graphics.c> //Funciones para dibujar y escribir en el display 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
0B15:  MOVLW  01
0B16:  BSF    03.5
0B17:  BSF    03.6
0B18:  MOVWF  25
0B19:  MOVWF  26
0B1A:  CLRF   2B
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0B1B:  MOVF   1C,W
0B1C:  SUBWF  1E,W
0B1D:  MOVWF  2C
0B1E:  MOVF   2C,W
0B1F:  BTFSS  2C.7
0B20:  GOTO   323
0B21:  MOVF   2C,W
0B22:  SUBLW  00
0B23:  CLRF   7A
0B24:  MOVWF  23
0B25:  MOVF   7A,W
0B26:  MOVWF  24
....................    dy = abs((signed int8)(y2 - y1)); 
0B27:  MOVF   1D,W
0B28:  SUBWF  1F,W
0B29:  MOVWF  2C
0B2A:  MOVF   2C,W
0B2B:  BTFSS  2C.7
0B2C:  GOTO   32F
0B2D:  MOVF   2C,W
0B2E:  SUBLW  00
0B2F:  CLRF   7A
0B30:  MOVWF  21
0B31:  MOVF   7A,W
0B32:  MOVWF  22
....................    #endif 
....................  
....................    if(x1 > x2) 
0B33:  MOVF   1C,W
0B34:  SUBWF  1E,W
0B35:  BTFSC  03.0
0B36:  GOTO   339
....................       addx = -1; 
0B37:  MOVLW  FF
0B38:  MOVWF  25
....................    if(y1 > y2) 
0B39:  MOVF   1D,W
0B3A:  SUBWF  1F,W
0B3B:  BTFSC  03.0
0B3C:  GOTO   33F
....................       addy = -1; 
0B3D:  MOVLW  FF
0B3E:  MOVWF  26
....................  
....................    if(dx >= dy) 
0B3F:  MOVF   22,W
0B40:  SUBWF  24,W
0B41:  BTFSS  03.0
0B42:  GOTO   38E
0B43:  BTFSS  03.2
0B44:  GOTO   349
0B45:  MOVF   21,W
0B46:  SUBWF  23,W
0B47:  BTFSS  03.0
0B48:  GOTO   38E
....................    { 
....................       dy *= 2; 
0B49:  BCF    03.0
0B4A:  RLF    21,F
0B4B:  RLF    22,F
....................       P = dy - dx; 
0B4C:  MOVF   23,W
0B4D:  SUBWF  21,W
0B4E:  MOVWF  77
0B4F:  MOVF   22,W
0B50:  MOVWF  7A
0B51:  MOVF   24,W
0B52:  BTFSS  03.0
0B53:  INCFSZ 24,W
0B54:  SUBWF  7A,F
0B55:  MOVF   77,W
0B56:  MOVWF  27
0B57:  MOVF   7A,W
0B58:  MOVWF  28
....................       diff = P - dx; 
0B59:  MOVF   23,W
0B5A:  SUBWF  27,W
0B5B:  MOVWF  29
0B5C:  MOVF   28,W
0B5D:  MOVWF  2A
0B5E:  MOVF   24,W
0B5F:  BTFSS  03.0
0B60:  INCFSZ 24,W
0B61:  SUBWF  2A,F
....................  
....................       for(; i<=dx; ++i) 
0B62:  MOVF   24,F
0B63:  BTFSS  03.2
0B64:  GOTO   369
0B65:  MOVF   2B,W
0B66:  SUBWF  23,W
0B67:  BTFSS  03.0
0B68:  GOTO   38D
....................       { 
....................          glcd_pixel(x1, y1, color); 
0B69:  MOVF   1C,W
0B6A:  MOVWF  2C
0B6B:  MOVF   1D,W
0B6C:  MOVWF  2D
0B6D:  MOVF   20,W
0B6E:  MOVWF  2E
0B6F:  BCF    0A.3
0B70:  BCF    03.5
0B71:  BCF    03.6
0B72:  CALL   325
0B73:  BSF    0A.3
....................  
....................          if(P < 0) 
0B74:  BSF    03.5
0B75:  BSF    03.6
0B76:  BTFSS  28.7
0B77:  GOTO   381
....................          { 
....................             P  += dy; 
0B78:  MOVF   21,W
0B79:  ADDWF  27,F
0B7A:  MOVF   22,W
0B7B:  BTFSC  03.0
0B7C:  INCFSZ 22,W
0B7D:  ADDWF  28,F
....................             x1 += addx; 
0B7E:  MOVF   25,W
0B7F:  ADDWF  1C,F
....................          } 
0B80:  GOTO   38B
....................          else 
....................          { 
....................             P  += diff; 
0B81:  MOVF   29,W
0B82:  ADDWF  27,F
0B83:  MOVF   2A,W
0B84:  BTFSC  03.0
0B85:  INCFSZ 2A,W
0B86:  ADDWF  28,F
....................             x1 += addx; 
0B87:  MOVF   25,W
0B88:  ADDWF  1C,F
....................             y1 += addy; 
0B89:  MOVF   26,W
0B8A:  ADDWF  1D,F
....................          } 
0B8B:  INCF   2B,F
0B8C:  GOTO   362
....................       } 
....................    } 
0B8D:  GOTO   3D2
....................    else 
....................    { 
....................       dx *= 2; 
0B8E:  BCF    03.0
0B8F:  RLF    23,F
0B90:  RLF    24,F
....................       P = dx - dy; 
0B91:  MOVF   21,W
0B92:  SUBWF  23,W
0B93:  MOVWF  77
0B94:  MOVF   24,W
0B95:  MOVWF  7A
0B96:  MOVF   22,W
0B97:  BTFSS  03.0
0B98:  INCFSZ 22,W
0B99:  SUBWF  7A,F
0B9A:  MOVF   77,W
0B9B:  MOVWF  27
0B9C:  MOVF   7A,W
0B9D:  MOVWF  28
....................       diff = P - dy; 
0B9E:  MOVF   21,W
0B9F:  SUBWF  27,W
0BA0:  MOVWF  29
0BA1:  MOVF   28,W
0BA2:  MOVWF  2A
0BA3:  MOVF   22,W
0BA4:  BTFSS  03.0
0BA5:  INCFSZ 22,W
0BA6:  SUBWF  2A,F
....................  
....................       for(; i<=dy; ++i) 
0BA7:  MOVF   22,F
0BA8:  BTFSS  03.2
0BA9:  GOTO   3AE
0BAA:  MOVF   2B,W
0BAB:  SUBWF  21,W
0BAC:  BTFSS  03.0
0BAD:  GOTO   3D2
....................       { 
....................          glcd_pixel(x1, y1, color); 
0BAE:  MOVF   1C,W
0BAF:  MOVWF  2C
0BB0:  MOVF   1D,W
0BB1:  MOVWF  2D
0BB2:  MOVF   20,W
0BB3:  MOVWF  2E
0BB4:  BCF    0A.3
0BB5:  BCF    03.5
0BB6:  BCF    03.6
0BB7:  CALL   325
0BB8:  BSF    0A.3
....................  
....................          if(P < 0) 
0BB9:  BSF    03.5
0BBA:  BSF    03.6
0BBB:  BTFSS  28.7
0BBC:  GOTO   3C6
....................          { 
....................             P  += dx; 
0BBD:  MOVF   23,W
0BBE:  ADDWF  27,F
0BBF:  MOVF   24,W
0BC0:  BTFSC  03.0
0BC1:  INCFSZ 24,W
0BC2:  ADDWF  28,F
....................             y1 += addy; 
0BC3:  MOVF   26,W
0BC4:  ADDWF  1D,F
....................          } 
0BC5:  GOTO   3D0
....................          else 
....................          { 
....................             P  += diff; 
0BC6:  MOVF   29,W
0BC7:  ADDWF  27,F
0BC8:  MOVF   2A,W
0BC9:  BTFSC  03.0
0BCA:  INCFSZ 2A,W
0BCB:  ADDWF  28,F
....................             x1 += addx; 
0BCC:  MOVF   25,W
0BCD:  ADDWF  1C,F
....................             y1 += addy; 
0BCE:  MOVF   26,W
0BCF:  ADDWF  1D,F
....................          } 
0BD0:  INCF   2B,F
0BD1:  GOTO   3A7
....................       } 
....................    } 
0BD2:  BCF    03.5
0BD3:  BCF    03.6
0BD4:  RETURN
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
0417:  BSF    03.5
0418:  BSF    03.6
0419:  MOVF   1A,W
041A:  MOVWF  7A
041B:  MOVF   19,W
041C:  MOVWF  04
041D:  BCF    03.7
041E:  BTFSC  7A.0
041F:  BSF    03.7
0420:  MOVF   00,F
0421:  BTFSC  03.2
0422:  GOTO   52A
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0423:  MOVF   1A,W
0424:  MOVWF  7A
0425:  MOVF   19,W
0426:  MOVWF  04
0427:  BCF    03.7
0428:  BTFSC  7A.0
0429:  BSF    03.7
042A:  MOVF   00,W
042B:  SUBLW  52
042C:  BTFSS  03.0
042D:  GOTO   458
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
042E:  MOVF   1A,W
042F:  MOVWF  7A
0430:  MOVF   19,W
0431:  MOVWF  04
0432:  BCF    03.7
0433:  BTFSC  7A.0
0434:  BSF    03.7
0435:  MOVLW  20
0436:  SUBWF  00,W
0437:  MOVWF  27
0438:  MOVWF  28
0439:  MOVLW  05
043A:  MOVWF  29
043B:  BCF    03.5
043C:  BCF    03.6
043D:  CALL   2CB
043E:  MOVF   78,W
043F:  BSF    03.5
0440:  BSF    03.6
0441:  MOVWF  26
0442:  MOVWF  78
0443:  MOVLW  05
0444:  MOVWF  77
0445:  MOVLW  A1
0446:  MOVWF  04
0447:  BSF    03.7
0448:  MOVF   78,W
0449:  BCF    03.5
044A:  BCF    03.6
044B:  CALL   048
044C:  MOVWF  00
044D:  INCF   78,F
044E:  INCF   04,F
044F:  DECFSZ 77,F
0450:  GOTO   452
0451:  GOTO   455
0452:  BSF    03.5
0453:  BSF    03.6
0454:  GOTO   448
0455:  GOTO   494
0456:  BSF    03.5
0457:  BSF    03.6
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
0458:  MOVF   1A,W
0459:  MOVWF  7A
045A:  MOVF   19,W
045B:  MOVWF  04
045C:  BCF    03.7
045D:  BTFSC  7A.0
045E:  BSF    03.7
045F:  MOVF   00,W
0460:  SUBLW  7E
0461:  BTFSS  03.0
0462:  GOTO   48D
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
0463:  MOVF   1A,W
0464:  MOVWF  7A
0465:  MOVF   19,W
0466:  MOVWF  04
0467:  BCF    03.7
0468:  BTFSC  7A.0
0469:  BSF    03.7
046A:  MOVLW  53
046B:  SUBWF  00,W
046C:  MOVWF  27
046D:  MOVWF  28
046E:  MOVLW  05
046F:  MOVWF  29
0470:  BCF    03.5
0471:  BCF    03.6
0472:  CALL   2CB
0473:  MOVF   78,W
0474:  BSF    03.5
0475:  BSF    03.6
0476:  MOVWF  26
0477:  MOVWF  78
0478:  MOVLW  05
0479:  MOVWF  77
047A:  MOVLW  A1
047B:  MOVWF  04
047C:  BSF    03.7
047D:  MOVF   78,W
047E:  BCF    03.5
047F:  BCF    03.6
0480:  CALL   14E
0481:  MOVWF  00
0482:  INCF   78,F
0483:  INCF   04,F
0484:  DECFSZ 77,F
0485:  GOTO   487
0486:  GOTO   48A
0487:  BSF    03.5
0488:  BSF    03.6
0489:  GOTO   47D
048A:  GOTO   494
048B:  BSF    03.5
048C:  BSF    03.6
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
048D:  CLRF   21
048E:  CLRF   22
048F:  CLRF   23
0490:  CLRF   24
0491:  CLRF   25
0492:  BCF    03.5
0493:  BCF    03.6
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
0494:  BSF    03.5
0495:  BSF    03.6
0496:  MOVF   1A,W
0497:  MOVWF  7A
0498:  MOVF   19,W
0499:  MOVWF  04
049A:  BCF    03.7
049B:  BTFSC  7A.0
049C:  BSF    03.7
049D:  MOVF   00,W
049E:  XORLW  0A
049F:  BCF    03.5
04A0:  BCF    03.6
04A1:  BTFSC  03.2
04A2:  GOTO   4A7
04A3:  XORLW  07
04A4:  BTFSC  03.2
04A5:  GOTO   4B8
04A6:  GOTO   4BE
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
04A7:  MOVLW  07
04A8:  BSF    03.5
04A9:  BSF    03.6
04AA:  MOVWF  28
04AB:  MOVF   1B,W
04AC:  MOVWF  29
04AD:  BCF    03.5
04AE:  BCF    03.6
04AF:  CALL   2CB
04B0:  MOVLW  01
04B1:  ADDWF  78,W
04B2:  BSF    03.5
04B3:  BSF    03.6
04B4:  ADDWF  18,F
....................             continue; 
04B5:  GOTO   525
04B6:  BCF    03.5
04B7:  BCF    03.6
....................          case '\r': 
....................             x = 0; 
04B8:  BSF    03.5
04B9:  BSF    03.6
04BA:  CLRF   17
....................             continue; 
04BB:  GOTO   525
04BC:  BCF    03.5
04BD:  BCF    03.6
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
04BE:  MOVLW  05
04BF:  BSF    03.5
04C0:  BSF    03.6
04C1:  MOVWF  28
04C2:  MOVF   1B,W
04C3:  MOVWF  29
04C4:  BCF    03.5
04C5:  BCF    03.6
04C6:  CALL   2CB
04C7:  MOVF   78,W
04C8:  BSF    03.5
04C9:  BSF    03.6
04CA:  ADDWF  17,W
04CB:  SUBLW  7F
04CC:  BTFSC  03.0
04CD:  GOTO   4DB
....................       { 
....................          x = 0;                           // Set x at far left position 
04CE:  CLRF   17
....................          y += 7*size + 1;                 // Set y at next position down 
04CF:  MOVLW  07
04D0:  MOVWF  28
04D1:  MOVF   1B,W
04D2:  MOVWF  29
04D3:  BCF    03.5
04D4:  BCF    03.6
04D5:  CALL   2CB
04D6:  MOVLW  01
04D7:  ADDWF  78,W
04D8:  BSF    03.5
04D9:  BSF    03.6
04DA:  ADDWF  18,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
04DB:  CLRF   1D
04DC:  MOVF   1D,W
04DD:  SUBLW  04
04DE:  BTFSS  03.0
04DF:  GOTO   525
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
04E0:  CLRF   1E
04E1:  MOVF   1E,W
04E2:  SUBLW  06
04E3:  BTFSS  03.0
04E4:  GOTO   521
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
04E5:  MOVLW  A1
04E6:  ADDWF  1D,W
04E7:  MOVWF  04
04E8:  BSF    03.7
04E9:  MOVF   00,W
04EA:  MOVWF  26
04EB:  MOVWF  77
04EC:  MOVF   1E,W
04ED:  MOVWF  78
04EE:  BTFSC  03.2
04EF:  GOTO   4F4
04F0:  BCF    03.0
04F1:  RRF    77,F
04F2:  DECFSZ 78,F
04F3:  GOTO   4F0
04F4:  BTFSS  77.0
04F5:  GOTO   51F
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
04F6:  CLRF   1F
04F7:  MOVF   1B,W
04F8:  SUBWF  1F,W
04F9:  BTFSC  03.0
04FA:  GOTO   51F
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
04FB:  CLRF   20
04FC:  MOVF   1B,W
04FD:  SUBWF  20,W
04FE:  BTFSC  03.0
04FF:  GOTO   51D
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
0500:  MOVF   20,W
0501:  ADDWF  17,W
0502:  MOVWF  26
0503:  MOVF   1E,W
0504:  MOVWF  28
0505:  MOVF   1B,W
0506:  MOVWF  29
0507:  BCF    03.5
0508:  BCF    03.6
0509:  CALL   2CB
050A:  MOVF   78,W
050B:  BSF    03.5
050C:  BSF    03.6
050D:  ADDWF  18,W
050E:  ADDWF  1F,W
050F:  MOVWF  27
0510:  MOVF   26,W
0511:  MOVWF  2C
0512:  MOVF   27,W
0513:  MOVWF  2D
0514:  MOVF   1C,W
0515:  MOVWF  2E
0516:  BCF    03.5
0517:  BCF    03.6
0518:  CALL   325
0519:  BSF    03.5
051A:  BSF    03.6
051B:  INCF   20,F
051C:  GOTO   4FC
....................                   } 
051D:  INCF   1F,F
051E:  GOTO   4F7
....................                } 
....................             } 
051F:  INCF   1E,F
0520:  GOTO   4E1
....................          } 
0521:  INCF   1D,F
0522:  MOVF   1B,W
0523:  ADDWF  17,F
0524:  GOTO   4DC
....................       } 
0525:  INCF   19,F
0526:  BTFSC  03.2
0527:  INCF   1A,F
0528:  INCF   17,F
0529:  GOTO   419
....................    } 
052A:  BCF    03.5
052B:  BCF    03.6
052C:  RETURN
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #byte trisb=0x86 
....................  
.................... ///Defines 
....................  
.................... #define escala -2 //Escala negativa para que crezca hacia arriba. 
.................... #define limpiarGrafico limpiarPorcion(0,20,128,44) //Limpia el area del grafico 
.................... #define offset 120 //es el offset para la altura de la grafica 
.................... #define TMR1 0x0BDC //Este es el valor para 500ms en el timer1 (0,5s=(4/4000000)8(65536-TMR1))=>TMR1=3036 
.................... #define TMR0 0x40 //Este es el valor para 50ms en el timer0 
.................... #define nMediciones 80 //Numero de mediciones 
....................  
.................... ///Fin Defines 
....................  
.................... ///Variables Globales 
....................  
.................... int x=0; //Posicion inicial de x para graficar la temperatura 
.................... float y; //Temperatura anterior 
.................... float t; //Temperatura actual 
.................... int16 iAn; //Lectura del sensor de temperatura 
.................... int registro[nMediciones]; //registro de las ultimas nMediciones mediciones 
.................... int1 habilitarLectura=0; //Variable para habilitar o deshabilitar la captura de datos del sensor 
.................... char received = '\0'; 
.................... int ciclos=10; //Variable que cuenta los ciclos que debe hacer el timer0 antes de ejecutar su codigo 
.................... int ciclosT1=6; //Variable que cuenta los ciclos que debe hacer el timer1 antes de ejecutar su codigo 
....................  
.................... ///Fin Variables Globales 
....................  
.................... ///Funciones 
....................  
.................... void limpiarPorcion(int x1, int y1, int x2, int y2){ //(x1, y1) = posición del primer pixel. (x2, y2) = cantididad de pixeles hacia la derecha y hacia abajo 
....................    for(int i=x1;i<x1+x2;i++) 
*
0BE5:  MOVF   1A,W
0BE6:  MOVWF  1E
0BE7:  MOVF   1C,W
0BE8:  ADDWF  1A,W
0BE9:  SUBWF  1E,W
0BEA:  BTFSC  03.0
0BEB:  GOTO   403
*
10C3:  MOVF   1A,W
10C4:  MOVWF  1E
10C5:  MOVF   1C,W
10C6:  ADDWF  1A,W
10C7:  SUBWF  1E,W
10C8:  BTFSC  03.0
10C9:  GOTO   0E1
....................       for(int j=y1;j<y1+y2;j++) 
*
0BEC:  MOVF   1B,W
0BED:  MOVWF  1F
0BEE:  MOVF   1D,W
0BEF:  ADDWF  1B,W
0BF0:  SUBWF  1F,W
0BF1:  BTFSC  03.0
0BF2:  GOTO   401
*
10CA:  MOVF   1B,W
10CB:  MOVWF  1F
10CC:  MOVF   1D,W
10CD:  ADDWF  1B,W
10CE:  SUBWF  1F,W
10CF:  BTFSC  03.0
10D0:  GOTO   0DF
....................          glcd_pixel(i, j, OFF); //Apagamos el pixel. 
*
0BF3:  MOVF   1E,W
0BF4:  MOVWF  2C
0BF5:  MOVF   1F,W
0BF6:  MOVWF  2D
0BF7:  CLRF   2E
0BF8:  BCF    0A.3
0BF9:  BCF    03.5
0BFA:  BCF    03.6
0BFB:  CALL   325
0BFC:  BSF    0A.3
0BFD:  BSF    03.5
0BFE:  BSF    03.6
0BFF:  INCF   1F,F
0C00:  GOTO   3EE
0C01:  INCF   1E,F
0C02:  GOTO   3E7
*
10D1:  MOVF   1E,W
10D2:  MOVWF  2C
10D3:  MOVF   1F,W
10D4:  MOVWF  2D
10D5:  CLRF   2E
10D6:  BCF    0A.4
10D7:  BCF    03.5
10D8:  BCF    03.6
10D9:  CALL   325
10DA:  BSF    0A.4
10DB:  BSF    03.5
10DC:  BSF    03.6
10DD:  INCF   1F,F
10DE:  GOTO   0CC
10DF:  INCF   1E,F
10E0:  GOTO   0C5
.................... } 
....................  
.................... void nuevaLinea(float temp){ //Funcion para graficar las nuevas lineas de temperatura 
*
0BD5:  MOVLW  01
0BD6:  ADDWF  29,W
0BD7:  BSF    03.5
0BD8:  BSF    03.6
0BD9:  MOVWF  19
....................    int x1=x+1; 
....................    if(x1>=128){ //Revisamos si sobrepasamos el tamaño de la pantalla 
0BDA:  MOVF   19,W
0BDB:  SUBLW  7F
0BDC:  BTFSC  03.0
0BDD:  GOTO   40A
....................       limpiarGrafico; //Limpiamos el area del grafico 
0BDE:  CLRF   1A
0BDF:  MOVLW  14
0BE0:  MOVWF  1B
0BE1:  MOVLW  80
0BE2:  MOVWF  1C
0BE3:  MOVLW  2C
0BE4:  MOVWF  1D
....................       x=0; 
*
0C03:  BCF    03.5
0C04:  BCF    03.6
0C05:  CLRF   29
....................       x1=1; 
0C06:  MOVLW  01
0C07:  BSF    03.5
0C08:  BSF    03.6
0C09:  MOVWF  19
....................    } 
.................... 	glcd_line(x, (y*escala)+offset, x1, (temp*escala)+offset, ON);	//multiplicamos por la escala para que la grafica entre en el area del grafico. El offset esta explicado arriba 
0C0A:  BCF    03.5
0C0B:  BCF    03.6
0C0C:  MOVF   2D,W
0C0D:  BSF    03.5
0C0E:  BSF    03.6
0C0F:  MOVWF  25
0C10:  BCF    03.5
0C11:  BCF    03.6
0C12:  MOVF   2C,W
0C13:  BSF    03.5
0C14:  BSF    03.6
0C15:  MOVWF  24
0C16:  BCF    03.5
0C17:  BCF    03.6
0C18:  MOVF   2B,W
0C19:  BSF    03.5
0C1A:  BSF    03.6
0C1B:  MOVWF  23
0C1C:  BCF    03.5
0C1D:  BCF    03.6
0C1E:  MOVF   2A,W
0C1F:  BSF    03.5
0C20:  BSF    03.6
0C21:  MOVWF  22
0C22:  CLRF   29
0C23:  CLRF   28
0C24:  MOVLW  80
0C25:  MOVWF  27
0C26:  MOVWF  26
0C27:  BCF    0A.3
0C28:  BCF    03.5
0C29:  BCF    03.6
0C2A:  CALL   52D
0C2B:  BSF    0A.3
0C2C:  MOVF   7A,W
0C2D:  BSF    03.5
0C2E:  BSF    03.6
0C2F:  MOVWF  1D
0C30:  MOVF   79,W
0C31:  MOVWF  1C
0C32:  MOVF   78,W
0C33:  MOVWF  1B
0C34:  MOVF   77,W
0C35:  MOVWF  1A
0C36:  BCF    03.1
0C37:  MOVF   1D,W
0C38:  MOVWF  22
0C39:  MOVF   1C,W
0C3A:  MOVWF  21
0C3B:  MOVF   1B,W
0C3C:  MOVWF  20
0C3D:  MOVF   1A,W
0C3E:  MOVWF  1F
0C3F:  CLRF   26
0C40:  CLRF   25
0C41:  MOVLW  70
0C42:  MOVWF  24
0C43:  MOVLW  85
0C44:  MOVWF  23
0C45:  BCF    03.5
0C46:  BCF    03.6
0C47:  CALL   1CB
0C48:  MOVF   7A,W
0C49:  BSF    03.5
0C4A:  BSF    03.6
0C4B:  MOVWF  1E
0C4C:  MOVF   79,W
0C4D:  MOVWF  1D
0C4E:  MOVF   78,W
0C4F:  MOVWF  1C
0C50:  MOVF   77,W
0C51:  MOVWF  1B
0C52:  BCF    0A.3
0C53:  BCF    03.5
0C54:  BCF    03.6
0C55:  CALL   77F
0C56:  BSF    0A.3
0C57:  MOVF   78,W
0C58:  BSF    03.5
0C59:  BSF    03.6
0C5A:  MOVWF  1A
0C5B:  MOVF   18,W
0C5C:  MOVWF  25
0C5D:  MOVF   17,W
0C5E:  MOVWF  24
0C5F:  MOVF   16,W
0C60:  MOVWF  23
0C61:  MOVF   15,W
0C62:  MOVWF  22
0C63:  CLRF   29
0C64:  CLRF   28
0C65:  MOVLW  80
0C66:  MOVWF  27
0C67:  MOVWF  26
0C68:  BCF    0A.3
0C69:  BCF    03.5
0C6A:  BCF    03.6
0C6B:  CALL   52D
0C6C:  BSF    0A.3
0C6D:  MOVF   7A,W
0C6E:  BSF    03.5
0C6F:  BSF    03.6
0C70:  MOVWF  1E
0C71:  MOVF   79,W
0C72:  MOVWF  1D
0C73:  MOVF   78,W
0C74:  MOVWF  1C
0C75:  MOVF   77,W
0C76:  MOVWF  1B
0C77:  BCF    03.1
0C78:  MOVF   1E,W
0C79:  MOVWF  22
0C7A:  MOVF   1D,W
0C7B:  MOVWF  21
0C7C:  MOVF   1C,W
0C7D:  MOVWF  20
0C7E:  MOVF   1B,W
0C7F:  MOVWF  1F
0C80:  CLRF   26
0C81:  CLRF   25
0C82:  MOVLW  70
0C83:  MOVWF  24
0C84:  MOVLW  85
0C85:  MOVWF  23
0C86:  BCF    03.5
0C87:  BCF    03.6
0C88:  CALL   1CB
0C89:  MOVF   7A,W
0C8A:  BSF    03.5
0C8B:  BSF    03.6
0C8C:  MOVWF  1E
0C8D:  MOVF   79,W
0C8E:  MOVWF  1D
0C8F:  MOVF   78,W
0C90:  MOVWF  1C
0C91:  MOVF   77,W
0C92:  MOVWF  1B
0C93:  BCF    0A.3
0C94:  BCF    03.5
0C95:  BCF    03.6
0C96:  CALL   77F
0C97:  BSF    0A.3
0C98:  MOVF   78,W
0C99:  BSF    03.5
0C9A:  BSF    03.6
0C9B:  MOVWF  1B
0C9C:  BCF    03.5
0C9D:  BCF    03.6
0C9E:  MOVF   29,W
0C9F:  BSF    03.5
0CA0:  BSF    03.6
0CA1:  MOVWF  1C
0CA2:  MOVF   1A,W
0CA3:  MOVWF  1D
0CA4:  MOVF   19,W
0CA5:  MOVWF  1E
0CA6:  MOVF   1B,W
0CA7:  MOVWF  1F
0CA8:  MOVLW  01
0CA9:  MOVWF  20
0CAA:  BCF    03.5
0CAB:  BCF    03.6
0CAC:  CALL   315
.................... 	y=temp; 
0CAD:  BSF    03.5
0CAE:  BSF    03.6
0CAF:  MOVF   18,W
0CB0:  BCF    03.5
0CB1:  BCF    03.6
0CB2:  MOVWF  2D
0CB3:  BSF    03.5
0CB4:  BSF    03.6
0CB5:  MOVF   17,W
0CB6:  BCF    03.5
0CB7:  BCF    03.6
0CB8:  MOVWF  2C
0CB9:  BSF    03.5
0CBA:  BSF    03.6
0CBB:  MOVF   16,W
0CBC:  BCF    03.5
0CBD:  BCF    03.6
0CBE:  MOVWF  2B
0CBF:  BSF    03.5
0CC0:  BSF    03.6
0CC1:  MOVF   15,W
0CC2:  BCF    03.5
0CC3:  BCF    03.6
0CC4:  MOVWF  2A
....................    x=x1; 
0CC5:  BSF    03.5
0CC6:  BSF    03.6
0CC7:  MOVF   19,W
0CC8:  BCF    03.5
0CC9:  BCF    03.6
0CCA:  MOVWF  29
0CCB:  RETURN
.................... } 
....................  
.................... ///Fin Funciones 
....................  
.................... ///Interrupciones 
....................  
.................... #INT_TIMER0 
.................... void TIMER0_isr(){ //Timer para hacer sonar el buzzer cada 500ms 
....................    ciclos--; 
*
0282:  DECFSZ 36,F
....................    if(ciclos==0){ 
0283:  GOTO   293
....................       ciclos=10; 
0284:  MOVLW  0A
0285:  MOVWF  36
....................       output_low(PIN_B3); 
0286:  BSF    03.5
0287:  BCF    06.3
0288:  BCF    03.5
0289:  BCF    06.3
....................       delay_ms(50); 
028A:  MOVLW  32
028B:  BSF    03.6
028C:  MOVWF  45
028D:  BCF    03.6
028E:  CALL   26D
....................       output_high(PIN_B3); 
028F:  BSF    03.5
0290:  BCF    06.3
0291:  BCF    03.5
0292:  BSF    06.3
....................    } 
....................    set_timer0(TMR0); 
0293:  MOVLW  40
0294:  MOVWF  01
.................... } 
....................  
0295:  BCF    0B.2
0296:  BCF    0A.3
0297:  BCF    0A.4
0298:  GOTO   02B
.................... #INT_TIMER1 
.................... void TIMER1_isr(){ //Timer para almacenar, en un array, la temepratura actual cada 3 segundos 
.................... 	ciclosT1--; 
0299:  DECFSZ 37,F
.................... 	if(ciclosT1==0){ 
029A:  GOTO   2C2
....................       ciclosT1=6; 
029B:  MOVLW  06
029C:  MOVWF  37
....................       //Aca hay que hacer el guardado en sd 
....................       //Con este bloque de codigo guardamos en un array las ultimas N mediciones 
....................       //Las cuales podemos guardar despues donde querramos 
.................... 	   for(int i=0; i<nMediciones-1;i++) 
029D:  BSF    03.6
029E:  CLRF   45
029F:  MOVF   45,W
02A0:  SUBLW  4E
02A1:  BTFSS  03.0
02A2:  GOTO   2BD
.................... 	   	registro[i]=registro[i+1]; 
02A3:  MOVLW  A0
02A4:  ADDWF  45,W
02A5:  MOVWF  78
02A6:  CLRF   7A
02A7:  BTFSC  03.0
02A8:  INCF   7A,F
02A9:  MOVF   78,W
02AA:  MOVWF  46
02AB:  MOVF   7A,W
02AC:  MOVWF  47
02AD:  MOVLW  01
02AE:  ADDWF  45,W
02AF:  ADDLW  A0
02B0:  MOVWF  04
02B1:  BCF    03.7
02B2:  MOVF   00,W
02B3:  MOVWF  48
02B4:  MOVF   46,W
02B5:  MOVWF  04
02B6:  BCF    03.7
02B7:  BTFSC  47.0
02B8:  BSF    03.7
02B9:  MOVF   48,W
02BA:  MOVWF  00
02BB:  INCF   45,F
02BC:  GOTO   29F
.................... 	   registro[nMediciones-1]=iAn; 
02BD:  BCF    03.6
02BE:  MOVF   32,W
02BF:  BSF    03.5
02C0:  MOVWF  6F
02C1:  BCF    03.5
....................    } 
....................    set_timer1(TMR1); 
02C2:  CLRF   0E
02C3:  MOVLW  0B
02C4:  MOVWF  0F
02C5:  MOVLW  DC
02C6:  MOVWF  0E
.................... } 
....................  
02C7:  BCF    0C.0
02C8:  BCF    0A.3
02C9:  BCF    0A.4
02CA:  GOTO   02B
.................... #INT_RB 
.................... void RB_isr(){ //Prueba de interrupciones 
....................    if(input(PIN_B6)){ //Habilita o deshabilita la captura de datos 
*
1000:  BSF    03.5
1001:  BSF    06.6
1002:  BCF    03.5
1003:  BTFSS  06.6
1004:  GOTO   1C4
....................       char str[8]; 
....................       habilitarLectura=~habilitarLectura; 
1005:  MOVLW  01
1006:  XORWF  34,F
....................       disable_interrupts(INT_TIMER0); 
1007:  BCF    0B.5
....................       if(habilitarLectura){ 
1008:  BTFSS  34.0
1009:  GOTO   07A
....................          glcd_text57(128/2-30, 0, (char*)"Capturando", 1, ON); 
100A:  CLRF   78
100B:  MOVLW  0B
100C:  MOVWF  77
100D:  MOVLW  4D
100E:  MOVWF  04
100F:  BSF    03.7
1010:  MOVF   78,W
1011:  BCF    0A.4
1012:  CALL   231
1013:  BSF    0A.4
1014:  MOVWF  00
1015:  INCF   78,F
1016:  INCF   04,F
1017:  DECFSZ 77,F
1018:  GOTO   010
1019:  MOVLW  22
101A:  BSF    03.5
101B:  BSF    03.6
101C:  MOVWF  17
101D:  CLRF   18
101E:  MOVLW  01
101F:  MOVWF  1A
1020:  MOVLW  4D
1021:  MOVWF  19
1022:  MOVLW  01
1023:  MOVWF  1B
1024:  MOVWF  1C
1025:  BCF    0A.4
1026:  BCF    03.5
1027:  BCF    03.6
1028:  CALL   417
1029:  BSF    0A.4
....................       	sprintf(str, "%4.2f°C", y); 
102A:  MOVLW  01
102B:  MOVWF  39
102C:  MOVLW  45
102D:  MOVWF  38
102E:  MOVLW  03
102F:  MOVWF  04
1030:  MOVF   2D,W
1031:  BSF    03.5
1032:  BSF    03.6
1033:  MOVWF  18
1034:  BCF    03.5
1035:  BCF    03.6
1036:  MOVF   2C,W
1037:  BSF    03.5
1038:  BSF    03.6
1039:  MOVWF  17
103A:  BCF    03.5
103B:  BCF    03.6
103C:  MOVF   2B,W
103D:  BSF    03.5
103E:  BSF    03.6
103F:  MOVWF  16
1040:  BCF    03.5
1041:  BCF    03.6
1042:  MOVF   2A,W
1043:  BSF    03.5
1044:  BSF    03.6
1045:  MOVWF  15
1046:  MOVLW  02
1047:  MOVWF  19
1048:  BCF    0A.4
1049:  BCF    03.5
104A:  BCF    03.6
104B:  CALL   62D
104C:  BSF    0A.4
104D:  MOVLW  B0
104E:  BSF    03.5
104F:  BSF    03.6
1050:  MOVWF  22
1051:  BCF    0A.4
1052:  BCF    03.5
1053:  BCF    03.6
1054:  CALL   61C
1055:  BSF    0A.4
1056:  MOVLW  43
1057:  BSF    03.5
1058:  BSF    03.6
1059:  MOVWF  22
105A:  BCF    0A.4
105B:  BCF    03.5
105C:  BCF    03.6
105D:  CALL   61C
105E:  BSF    0A.4
....................          glcd_text57(12*6, 10, str, 1, ON); //Escribimos la temperatura. 
105F:  MOVLW  48
1060:  BSF    03.5
1061:  BSF    03.6
1062:  MOVWF  17
1063:  MOVLW  0A
1064:  MOVWF  18
1065:  MOVLW  01
1066:  MOVWF  1A
1067:  MOVLW  45
1068:  MOVWF  19
1069:  MOVLW  01
106A:  MOVWF  1B
106B:  MOVWF  1C
106C:  BCF    0A.4
106D:  BCF    03.5
106E:  BCF    03.6
106F:  CALL   417
1070:  BSF    0A.4
....................          enable_interrupts(INT_TIMER1); 
1071:  BSF    03.5
1072:  BSF    0C.0
....................          set_timer1(TMR1); 
1073:  BCF    03.5
1074:  CLRF   0E
1075:  MOVLW  0B
1076:  MOVWF  0F
1077:  MOVLW  DC
1078:  MOVWF  0E
....................       } 
1079:  GOTO   1C4
....................       else { 
....................          glcd_text57(128/2-30, 0, (char*)"Capturando", 1, OFF); 
107A:  CLRF   78
107B:  MOVLW  0B
107C:  MOVWF  77
107D:  MOVLW  58
107E:  MOVWF  04
107F:  BSF    03.7
1080:  MOVF   78,W
1081:  BCF    0A.4
1082:  CALL   231
1083:  BSF    0A.4
1084:  MOVWF  00
1085:  INCF   78,F
1086:  INCF   04,F
1087:  DECFSZ 77,F
1088:  GOTO   080
1089:  MOVLW  22
108A:  BSF    03.5
108B:  BSF    03.6
108C:  MOVWF  17
108D:  CLRF   18
108E:  MOVLW  01
108F:  MOVWF  1A
1090:  MOVLW  58
1091:  MOVWF  19
1092:  MOVLW  01
1093:  MOVWF  1B
1094:  CLRF   1C
1095:  BCF    0A.4
1096:  BCF    03.5
1097:  BCF    03.6
1098:  CALL   417
1099:  BSF    0A.4
....................          glcd_text57(128/2-30, 0, (char*)"Limpiando", 1, ON); 
109A:  CLRF   78
109B:  MOVLW  0A
109C:  MOVWF  77
109D:  MOVLW  58
109E:  MOVWF  04
109F:  BSF    03.7
10A0:  MOVF   78,W
10A1:  BCF    0A.4
10A2:  CALL   240
10A3:  BSF    0A.4
10A4:  MOVWF  00
10A5:  INCF   78,F
10A6:  INCF   04,F
10A7:  DECFSZ 77,F
10A8:  GOTO   0A0
10A9:  MOVLW  22
10AA:  BSF    03.5
10AB:  BSF    03.6
10AC:  MOVWF  17
10AD:  CLRF   18
10AE:  MOVLW  01
10AF:  MOVWF  1A
10B0:  MOVLW  58
10B1:  MOVWF  19
10B2:  MOVLW  01
10B3:  MOVWF  1B
10B4:  MOVWF  1C
10B5:  BCF    0A.4
10B6:  BCF    03.5
10B7:  BCF    03.6
10B8:  CALL   417
10B9:  BSF    0A.4
....................          limpiarGrafico; 
10BA:  BSF    03.5
10BB:  BSF    03.6
10BC:  CLRF   1A
10BD:  MOVLW  14
10BE:  MOVWF  1B
10BF:  MOVLW  80
10C0:  MOVWF  1C
10C1:  MOVLW  2C
10C2:  MOVWF  1D
....................          glcd_text57(128/2-30, 0, (char*)"Limpiando", 1, OFF); 
*
10E1:  CLRF   78
10E2:  MOVLW  0A
10E3:  MOVWF  77
10E4:  MOVLW  58
10E5:  MOVWF  04
10E6:  BSF    03.7
10E7:  MOVF   78,W
10E8:  BCF    0A.4
10E9:  BCF    03.5
10EA:  BCF    03.6
10EB:  CALL   240
10EC:  BSF    0A.4
10ED:  MOVWF  00
10EE:  INCF   78,F
10EF:  INCF   04,F
10F0:  DECFSZ 77,F
10F1:  GOTO   0F3
10F2:  GOTO   0F6
10F3:  BSF    03.5
10F4:  BSF    03.6
10F5:  GOTO   0E7
10F6:  MOVLW  22
10F7:  BSF    03.5
10F8:  BSF    03.6
10F9:  MOVWF  17
10FA:  CLRF   18
10FB:  MOVLW  01
10FC:  MOVWF  1A
10FD:  MOVLW  58
10FE:  MOVWF  19
10FF:  MOVLW  01
1100:  MOVWF  1B
1101:  CLRF   1C
1102:  BCF    0A.4
1103:  BCF    03.5
1104:  BCF    03.6
1105:  CALL   417
1106:  BSF    0A.4
....................       	sprintf(str, "%4.2f°C", t); 
1107:  MOVLW  01
1108:  MOVWF  39
1109:  MOVLW  45
110A:  MOVWF  38
110B:  MOVLW  03
110C:  MOVWF  04
110D:  MOVF   31,W
110E:  BSF    03.5
110F:  BSF    03.6
1110:  MOVWF  18
1111:  BCF    03.5
1112:  BCF    03.6
1113:  MOVF   30,W
1114:  BSF    03.5
1115:  BSF    03.6
1116:  MOVWF  17
1117:  BCF    03.5
1118:  BCF    03.6
1119:  MOVF   2F,W
111A:  BSF    03.5
111B:  BSF    03.6
111C:  MOVWF  16
111D:  BCF    03.5
111E:  BCF    03.6
111F:  MOVF   2E,W
1120:  BSF    03.5
1121:  BSF    03.6
1122:  MOVWF  15
1123:  MOVLW  02
1124:  MOVWF  19
1125:  BCF    0A.4
1126:  BCF    03.5
1127:  BCF    03.6
1128:  CALL   62D
1129:  BSF    0A.4
112A:  MOVLW  B0
112B:  BSF    03.5
112C:  BSF    03.6
112D:  MOVWF  22
112E:  BCF    0A.4
112F:  BCF    03.5
1130:  BCF    03.6
1131:  CALL   61C
1132:  BSF    0A.4
1133:  MOVLW  43
1134:  BSF    03.5
1135:  BSF    03.6
1136:  MOVWF  22
1137:  BCF    0A.4
1138:  BCF    03.5
1139:  BCF    03.6
113A:  CALL   61C
113B:  BSF    0A.4
....................          glcd_text57(12*6, 10, str, 1, OFF); 
113C:  MOVLW  48
113D:  BSF    03.5
113E:  BSF    03.6
113F:  MOVWF  17
1140:  MOVLW  0A
1141:  MOVWF  18
1142:  MOVLW  01
1143:  MOVWF  1A
1144:  MOVLW  45
1145:  MOVWF  19
1146:  MOVLW  01
1147:  MOVWF  1B
1148:  CLRF   1C
1149:  BCF    0A.4
114A:  BCF    03.5
114B:  BCF    03.6
114C:  CALL   417
114D:  BSF    0A.4
....................          x=0; 
114E:  CLRF   29
....................          disable_interrupts(INT_TIMER1); 
114F:  BSF    03.5
1150:  BCF    0C.0
....................          glcd_text57(128/2-30, 0, (char*)"Guardando", 1, ON); 
1151:  CLRF   78
1152:  MOVLW  0A
1153:  MOVWF  77
1154:  MOVLW  58
1155:  MOVWF  04
1156:  BSF    03.7
1157:  MOVF   78,W
1158:  BCF    0A.4
1159:  BCF    03.5
115A:  CALL   24E
115B:  BSF    0A.4
115C:  MOVWF  00
115D:  INCF   78,F
115E:  INCF   04,F
115F:  DECFSZ 77,F
1160:  GOTO   162
1161:  GOTO   164
1162:  BSF    03.5
1163:  GOTO   157
1164:  MOVLW  22
1165:  BSF    03.5
1166:  BSF    03.6
1167:  MOVWF  17
1168:  CLRF   18
1169:  MOVLW  01
116A:  MOVWF  1A
116B:  MOVLW  58
116C:  MOVWF  19
116D:  MOVLW  01
116E:  MOVWF  1B
116F:  MOVWF  1C
1170:  BCF    0A.4
1171:  BCF    03.5
1172:  BCF    03.6
1173:  CALL   417
1174:  BSF    0A.4
....................          for(int pos=0; pos<nMediciones; pos++){ 
1175:  BSF    03.6
1176:  CLRF   63
1177:  MOVF   63,W
1178:  SUBLW  4F
1179:  BTFSS  03.0
117A:  GOTO   1A0
....................          	write_eeprom(pos, registro[pos]); 
117B:  MOVLW  A0
117C:  ADDWF  63,W
117D:  MOVWF  04
117E:  BCF    03.7
117F:  MOVF   00,W
1180:  BSF    03.5
1181:  MOVWF  15
1182:  BCF    03.5
1183:  BCF    03.6
1184:  MOVF   0B,W
1185:  MOVWF  77
1186:  BCF    0B.7
1187:  BSF    03.6
1188:  MOVF   63,W
1189:  MOVWF  0D
118A:  BSF    03.5
118B:  MOVF   15,W
118C:  BCF    03.5
118D:  MOVWF  0C
118E:  BSF    03.5
118F:  BCF    0C.7
1190:  BSF    0C.2
1191:  MOVLW  55
1192:  MOVWF  0D
1193:  MOVLW  AA
1194:  MOVWF  0D
1195:  BSF    0C.1
1196:  BTFSC  0C.1
1197:  GOTO   196
1198:  BCF    0C.2
1199:  MOVF   77,W
119A:  BCF    03.5
119B:  BCF    03.6
119C:  IORWF  0B,F
119D:  BSF    03.6
119E:  INCF   63,F
119F:  GOTO   177
....................          } 
....................          glcd_text57(128/2-30, 0, (char*)"Guardando", 1, OFF); 
11A0:  CLRF   78
11A1:  MOVLW  0A
11A2:  MOVWF  77
11A3:  MOVLW  58
11A4:  MOVWF  04
11A5:  BSF    03.7
11A6:  MOVF   78,W
11A7:  BCF    0A.4
11A8:  BCF    03.6
11A9:  CALL   24E
11AA:  BSF    0A.4
11AB:  MOVWF  00
11AC:  INCF   78,F
11AD:  INCF   04,F
11AE:  DECFSZ 77,F
11AF:  GOTO   1B1
11B0:  GOTO   1B3
11B1:  BSF    03.6
11B2:  GOTO   1A6
11B3:  MOVLW  22
11B4:  BSF    03.5
11B5:  BSF    03.6
11B6:  MOVWF  17
11B7:  CLRF   18
11B8:  MOVLW  01
11B9:  MOVWF  1A
11BA:  MOVLW  58
11BB:  MOVWF  19
11BC:  MOVLW  01
11BD:  MOVWF  1B
11BE:  CLRF   1C
11BF:  BCF    0A.4
11C0:  BCF    03.5
11C1:  BCF    03.6
11C2:  CALL   417
11C3:  BSF    0A.4
....................       } 
....................    } 
....................    if(input(PIN_B7)){ 
11C4:  BSF    03.5
11C5:  BSF    06.7
11C6:  BCF    03.5
11C7:  BTFSS  06.7
11C8:  GOTO   38D
....................    	habilitarLectura=0; 
11C9:  BCF    34.0
....................       glcd_text57(128/2-30, 0, (char*)"Capturando", 1, OFF); 
11CA:  CLRF   78
11CB:  MOVLW  0B
11CC:  MOVWF  77
11CD:  MOVLW  64
11CE:  MOVWF  04
11CF:  BSF    03.7
11D0:  MOVF   78,W
11D1:  BCF    0A.4
11D2:  CALL   231
11D3:  BSF    0A.4
11D4:  MOVWF  00
11D5:  INCF   78,F
11D6:  INCF   04,F
11D7:  DECFSZ 77,F
11D8:  GOTO   1D0
11D9:  MOVLW  22
11DA:  BSF    03.5
11DB:  BSF    03.6
11DC:  MOVWF  17
11DD:  CLRF   18
11DE:  MOVLW  01
11DF:  MOVWF  1A
11E0:  MOVLW  64
11E1:  MOVWF  19
11E2:  MOVLW  01
11E3:  MOVWF  1B
11E4:  CLRF   1C
11E5:  BCF    0A.4
11E6:  BCF    03.5
11E7:  BCF    03.6
11E8:  CALL   417
11E9:  BSF    0A.4
....................       disable_interrupts(INT_TIMER1); 
11EA:  BSF    03.5
11EB:  BCF    0C.0
....................       disable_interrupts(INT_TIMER0); 
11EC:  BCF    03.5
11ED:  BCF    0B.5
....................    	for(int pos=0; pos<nMediciones; pos++){ 
11EE:  BSF    03.6
11EF:  CLRF   6F
11F0:  MOVF   6F,W
11F1:  SUBLW  4F
11F2:  BTFSS  03.0
11F3:  GOTO   315
....................    		registro[pos]=read_eeprom(pos); 
11F4:  MOVLW  A0
11F5:  ADDWF  6F,W
11F6:  MOVWF  04
11F7:  BCF    03.7
11F8:  MOVF   6F,W
11F9:  MOVWF  0D
11FA:  BSF    03.5
11FB:  BCF    0C.7
11FC:  BSF    0C.0
11FD:  BCF    03.5
11FE:  MOVF   0C,W
11FF:  MOVWF  00
....................    		float dato=(5.0*registro[pos]*100.0)/1024.0; 
1200:  MOVLW  A0
1201:  ADDWF  6F,W
1202:  MOVWF  04
1203:  BCF    03.7
1204:  MOVF   00,W
1205:  BSF    03.5
1206:  CLRF   16
1207:  MOVWF  15
1208:  BCF    0A.4
1209:  BCF    03.5
120A:  BCF    03.6
120B:  CALL   71B
120C:  BSF    0A.4
120D:  BSF    03.5
120E:  BSF    03.6
120F:  CLRF   25
1210:  CLRF   24
1211:  MOVLW  20
1212:  MOVWF  23
1213:  MOVLW  81
1214:  MOVWF  22
1215:  MOVF   7A,W
1216:  MOVWF  29
1217:  MOVF   79,W
1218:  MOVWF  28
1219:  MOVF   78,W
121A:  MOVWF  27
121B:  MOVF   77,W
121C:  MOVWF  26
121D:  BCF    0A.4
121E:  BCF    03.5
121F:  BCF    03.6
1220:  CALL   52D
1221:  BSF    0A.4
1222:  MOVF   7A,W
1223:  BSF    03.5
1224:  BSF    03.6
1225:  MOVWF  18
1226:  MOVF   79,W
1227:  MOVWF  17
1228:  MOVF   78,W
1229:  MOVWF  16
122A:  MOVF   77,W
122B:  MOVWF  15
122C:  MOVF   18,W
122D:  MOVWF  25
122E:  MOVF   17,W
122F:  MOVWF  24
1230:  MOVF   16,W
1231:  MOVWF  23
1232:  MOVF   15,W
1233:  MOVWF  22
1234:  CLRF   29
1235:  CLRF   28
1236:  MOVLW  48
1237:  MOVWF  27
1238:  MOVLW  85
1239:  MOVWF  26
123A:  BCF    0A.4
123B:  BCF    03.5
123C:  BCF    03.6
123D:  CALL   52D
123E:  BSF    0A.4
123F:  MOVF   7A,W
1240:  BSF    03.5
1241:  BSF    03.6
1242:  MOVWF  18
1243:  MOVF   79,W
1244:  MOVWF  17
1245:  MOVF   78,W
1246:  MOVWF  16
1247:  MOVF   77,W
1248:  MOVWF  15
1249:  MOVF   18,W
124A:  MOVWF  1C
124B:  MOVF   17,W
124C:  MOVWF  1B
124D:  MOVF   16,W
124E:  MOVWF  1A
124F:  MOVF   15,W
1250:  MOVWF  19
1251:  CLRF   20
1252:  CLRF   1F
1253:  CLRF   1E
1254:  MOVLW  89
1255:  MOVWF  1D
1256:  BCF    0A.4
1257:  BSF    0A.3
1258:  BCF    03.5
1259:  BCF    03.6
125A:  CALL   000
125B:  BSF    0A.4
125C:  BCF    0A.3
125D:  MOVF   7A,W
125E:  BSF    03.5
125F:  BSF    03.6
1260:  MOVWF  13
1261:  MOVF   79,W
1262:  MOVWF  12
1263:  MOVF   78,W
1264:  MOVWF  11
1265:  MOVF   77,W
1266:  MOVWF  10
....................    		printf("%4.2f ",dato); 
1267:  MOVLW  03
1268:  MOVWF  04
1269:  MOVF   13,W
126A:  MOVWF  18
126B:  MOVF   12,W
126C:  MOVWF  17
126D:  MOVF   11,W
126E:  MOVWF  16
126F:  MOVF   10,W
1270:  MOVWF  15
1271:  MOVLW  02
1272:  MOVWF  19
1273:  BCF    0A.4
1274:  BSF    0A.3
1275:  BCF    03.5
1276:  BCF    03.6
1277:  GOTO   0CF
1278:  BSF    0A.4
1279:  BCF    0A.3
127A:  MOVLW  20
127B:  BTFSS  0C.4
127C:  GOTO   27B
127D:  MOVWF  19
....................    		if(dato>=28 && dato<=50) 
127E:  BSF    03.5
127F:  BSF    03.6
1280:  CLRF   18
1281:  CLRF   17
1282:  MOVLW  60
1283:  MOVWF  16
1284:  MOVLW  83
1285:  MOVWF  15
1286:  MOVF   13,W
1287:  MOVWF  1C
1288:  MOVF   12,W
1289:  MOVWF  1B
128A:  MOVF   11,W
128B:  MOVWF  1A
128C:  MOVF   10,W
128D:  MOVWF  19
128E:  BCF    0A.4
128F:  BCF    03.5
1290:  BCF    03.6
1291:  CALL   73C
1292:  BSF    0A.4
1293:  BTFSC  03.0
1294:  GOTO   297
1295:  BTFSS  03.2
1296:  GOTO   2C1
1297:  BSF    03.5
1298:  BSF    03.6
1299:  MOVF   13,W
129A:  MOVWF  18
129B:  MOVF   12,W
129C:  MOVWF  17
129D:  MOVF   11,W
129E:  MOVWF  16
129F:  MOVF   10,W
12A0:  MOVWF  15
12A1:  CLRF   1C
12A2:  CLRF   1B
12A3:  MOVLW  48
12A4:  MOVWF  1A
12A5:  MOVLW  84
12A6:  MOVWF  19
12A7:  BCF    0A.4
12A8:  BCF    03.5
12A9:  BCF    03.6
12AA:  CALL   73C
12AB:  BSF    0A.4
12AC:  BTFSC  03.0
12AD:  GOTO   2B0
12AE:  BTFSS  03.2
12AF:  GOTO   2C1
....................    			nuevaLinea(dato); 
12B0:  BSF    03.5
12B1:  BSF    03.6
12B2:  MOVF   13,W
12B3:  MOVWF  18
12B4:  MOVF   12,W
12B5:  MOVWF  17
12B6:  MOVF   11,W
12B7:  MOVWF  16
12B8:  MOVF   10,W
12B9:  MOVWF  15
12BA:  BCF    0A.4
12BB:  BSF    0A.3
12BC:  BCF    03.5
12BD:  BCF    03.6
12BE:  CALL   3D5
12BF:  BSF    0A.4
12C0:  BCF    0A.3
....................    		if(dato<28) 
12C1:  BSF    03.5
12C2:  BSF    03.6
12C3:  MOVF   13,W
12C4:  MOVWF  18
12C5:  MOVF   12,W
12C6:  MOVWF  17
12C7:  MOVF   11,W
12C8:  MOVWF  16
12C9:  MOVF   10,W
12CA:  MOVWF  15
12CB:  CLRF   1C
12CC:  CLRF   1B
12CD:  MOVLW  60
12CE:  MOVWF  1A
12CF:  MOVLW  83
12D0:  MOVWF  19
12D1:  BCF    0A.4
12D2:  BCF    03.5
12D3:  BCF    03.6
12D4:  CALL   73C
12D5:  BSF    0A.4
12D6:  BTFSS  03.0
12D7:  GOTO   2E7
....................    			nuevaLinea(29); 
12D8:  BSF    03.5
12D9:  BSF    03.6
12DA:  CLRF   18
12DB:  CLRF   17
12DC:  MOVLW  68
12DD:  MOVWF  16
12DE:  MOVLW  83
12DF:  MOVWF  15
12E0:  BCF    0A.4
12E1:  BSF    0A.3
12E2:  BCF    03.5
12E3:  BCF    03.6
12E4:  CALL   3D5
12E5:  BSF    0A.4
12E6:  BCF    0A.3
....................    		if(dato>50) 
12E7:  BSF    03.5
12E8:  BSF    03.6
12E9:  CLRF   18
12EA:  CLRF   17
12EB:  MOVLW  48
12EC:  MOVWF  16
12ED:  MOVLW  84
12EE:  MOVWF  15
12EF:  MOVF   13,W
12F0:  MOVWF  1C
12F1:  MOVF   12,W
12F2:  MOVWF  1B
12F3:  MOVF   11,W
12F4:  MOVWF  1A
12F5:  MOVF   10,W
12F6:  MOVWF  19
12F7:  BCF    0A.4
12F8:  BCF    03.5
12F9:  BCF    03.6
12FA:  CALL   73C
12FB:  BSF    0A.4
12FC:  BTFSS  03.0
12FD:  GOTO   30D
....................    			nuevaLinea(50); 
12FE:  BSF    03.5
12FF:  BSF    03.6
1300:  CLRF   18
1301:  CLRF   17
1302:  MOVLW  48
1303:  MOVWF  16
1304:  MOVLW  84
1305:  MOVWF  15
1306:  BCF    0A.4
1307:  BSF    0A.3
1308:  BCF    03.5
1309:  BCF    03.6
130A:  CALL   3D5
130B:  BSF    0A.4
130C:  BCF    0A.3
....................    		registro[pos]=0; 
130D:  MOVLW  A0
130E:  BSF    03.6
130F:  ADDWF  6F,W
1310:  MOVWF  04
1311:  BCF    03.7
1312:  CLRF   00
1313:  INCF   6F,F
1314:  GOTO   1F0
....................    	} 
....................       glcd_text57(128/2-30, 0, (char*)"Guardando", 1, ON); 
1315:  CLRF   78
1316:  MOVLW  0A
1317:  MOVWF  77
1318:  MOVLW  64
1319:  MOVWF  04
131A:  BSF    03.7
131B:  MOVF   78,W
131C:  BCF    0A.4
131D:  BCF    03.6
131E:  CALL   24E
131F:  BSF    0A.4
1320:  MOVWF  00
1321:  INCF   78,F
1322:  INCF   04,F
1323:  DECFSZ 77,F
1324:  GOTO   326
1325:  GOTO   328
1326:  BSF    03.6
1327:  GOTO   31B
1328:  MOVLW  22
1329:  BSF    03.5
132A:  BSF    03.6
132B:  MOVWF  17
132C:  CLRF   18
132D:  MOVLW  01
132E:  MOVWF  1A
132F:  MOVLW  64
1330:  MOVWF  19
1331:  MOVLW  01
1332:  MOVWF  1B
1333:  MOVWF  1C
1334:  BCF    0A.4
1335:  BCF    03.5
1336:  BCF    03.6
1337:  CALL   417
1338:  BSF    0A.4
....................       for(int pos=0; pos<nMediciones; pos++){ 
1339:  BSF    03.5
133A:  BSF    03.6
133B:  CLRF   14
133C:  MOVF   14,W
133D:  SUBLW  4F
133E:  BTFSS  03.0
133F:  GOTO   367
....................       	write_eeprom(pos, registro[pos]); 
1340:  MOVLW  A0
1341:  ADDWF  14,W
1342:  MOVWF  04
1343:  BCF    03.7
1344:  MOVF   00,W
1345:  MOVWF  15
1346:  BCF    03.5
1347:  BCF    03.6
1348:  MOVF   0B,W
1349:  MOVWF  77
134A:  BCF    0B.7
134B:  BSF    03.5
134C:  BSF    03.6
134D:  MOVF   14,W
134E:  BCF    03.5
134F:  MOVWF  0D
1350:  BSF    03.5
1351:  MOVF   15,W
1352:  BCF    03.5
1353:  MOVWF  0C
1354:  BSF    03.5
1355:  BCF    0C.7
1356:  BSF    0C.2
1357:  MOVLW  55
1358:  MOVWF  0D
1359:  MOVLW  AA
135A:  MOVWF  0D
135B:  BSF    0C.1
135C:  BTFSC  0C.1
135D:  GOTO   35C
135E:  BCF    0C.2
135F:  MOVF   77,W
1360:  BCF    03.5
1361:  BCF    03.6
1362:  IORWF  0B,F
1363:  BSF    03.5
1364:  BSF    03.6
1365:  INCF   14,F
1366:  GOTO   33C
....................       } 
....................       glcd_text57(128/2-30, 0, (char*)"Guardando", 1, OFF); 
1367:  CLRF   78
1368:  MOVLW  0A
1369:  MOVWF  77
136A:  MOVLW  64
136B:  MOVWF  04
136C:  BSF    03.7
136D:  MOVF   78,W
136E:  BCF    0A.4
136F:  BCF    03.5
1370:  BCF    03.6
1371:  CALL   24E
1372:  BSF    0A.4
1373:  MOVWF  00
1374:  INCF   78,F
1375:  INCF   04,F
1376:  DECFSZ 77,F
1377:  GOTO   379
1378:  GOTO   37C
1379:  BSF    03.5
137A:  BSF    03.6
137B:  GOTO   36D
137C:  MOVLW  22
137D:  BSF    03.5
137E:  BSF    03.6
137F:  MOVWF  17
1380:  CLRF   18
1381:  MOVLW  01
1382:  MOVWF  1A
1383:  MOVLW  64
1384:  MOVWF  19
1385:  MOVLW  01
1386:  MOVWF  1B
1387:  CLRF   1C
1388:  BCF    0A.4
1389:  BCF    03.5
138A:  BCF    03.6
138B:  CALL   417
138C:  BSF    0A.4
....................    } 
.................... } 
....................  
138D:  BCF    0B.0
138E:  BCF    0A.3
138F:  BCF    0A.4
1390:  GOTO   02B
.................... #INT_RDA 
.................... void serial_interrupt() { 
....................    received = getc(); 
*
07A2:  BTFSS  0C.5
07A3:  GOTO   7A2
07A4:  MOVF   1A,W
07A5:  MOVWF  35
....................    if(received == 'a') 
07A6:  MOVF   35,W
07A7:  SUBLW  61
07A8:  BTFSS  03.2
07A9:  GOTO   7BF
....................       glcd_text57(110,0,(char*)"BT",1,ON); //Mostramos BT 
07AA:  MOVLW  42
07AB:  BSF    03.6
07AC:  MOVWF  45
07AD:  MOVLW  54
07AE:  MOVWF  46
07AF:  CLRF   47
07B0:  MOVLW  6E
07B1:  BSF    03.5
07B2:  MOVWF  17
07B3:  CLRF   18
07B4:  MOVLW  01
07B5:  MOVWF  1A
07B6:  MOVLW  45
07B7:  MOVWF  19
07B8:  MOVLW  01
07B9:  MOVWF  1B
07BA:  MOVWF  1C
07BB:  BCF    03.5
07BC:  BCF    03.6
07BD:  CALL   417
07BE:  GOTO   7D7
....................    else if(received == 'b') 
07BF:  MOVF   35,W
07C0:  SUBLW  62
07C1:  BTFSS  03.2
07C2:  GOTO   7D7
....................       glcd_text57(110,0,(char*)"BT",1,OFF); //Mostramos BT 
07C3:  MOVLW  42
07C4:  BSF    03.6
07C5:  MOVWF  45
07C6:  MOVLW  54
07C7:  MOVWF  46
07C8:  CLRF   47
07C9:  MOVLW  6E
07CA:  BSF    03.5
07CB:  MOVWF  17
07CC:  CLRF   18
07CD:  MOVLW  01
07CE:  MOVWF  1A
07CF:  MOVLW  45
07D0:  MOVWF  19
07D1:  MOVLW  01
07D2:  MOVWF  1B
07D3:  CLRF   1C
07D4:  BCF    03.5
07D5:  BCF    03.6
07D6:  CALL   417
07D7:  BCF    0C.5
07D8:  BCF    0A.3
07D9:  BCF    0A.4
07DA:  GOTO   02B
.................... } 
....................  
.................... ///Fin Interrupciones 
....................  
.................... void main() 
*
1800:  MOVF   03,W
1801:  ANDLW  1F
1802:  MOVWF  03
1803:  MOVLW  19
1804:  BSF    03.5
1805:  MOVWF  19
1806:  MOVLW  A6
1807:  MOVWF  18
1808:  MOVLW  90
1809:  BCF    03.5
180A:  MOVWF  18
180B:  MOVLW  FF
180C:  MOVWF  28
180D:  CLRF   29
180E:  BCF    34.0
180F:  CLRF   35
1810:  MOVLW  0A
1811:  MOVWF  36
1812:  MOVLW  06
1813:  MOVWF  37
1814:  CLRF   39
1815:  CLRF   38
1816:  BSF    03.5
1817:  BSF    1F.0
1818:  BSF    1F.1
1819:  BSF    1F.2
181A:  BCF    1F.3
181B:  BCF    03.7
.................... { 
....................    trisb=0b01000000; 
181C:  MOVLW  40
181D:  MOVWF  06
....................    char str[8]; 
....................     
....................    setup_adc_ports(AN0); //seteamos el pin A0 como analogico 
181E:  BCF    1F.0
181F:  BSF    1F.1
1820:  BSF    1F.2
1821:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); //Establecemos el reloj interno 
1822:  BCF    03.5
1823:  BSF    1F.6
1824:  BSF    1F.7
1825:  BSF    03.5
1826:  BSF    1F.7
1827:  BCF    03.5
1828:  BSF    1F.0
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); //setup del timer0 
1829:  BSF    03.5
182A:  MOVF   01,W
182B:  ANDLW  C0
182C:  IORLW  07
182D:  MOVWF  01
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); //setup del timer1 
182E:  MOVLW  B5
182F:  BCF    03.5
1830:  MOVWF  10
....................    set_timer0(TMR0); //seteamos el timer0 
1831:  MOVLW  40
1832:  MOVWF  01
....................    set_timer1(TMR1); //setemaos el timer1 
1833:  CLRF   0E
1834:  MOVLW  0B
1835:  MOVWF  0F
1836:  MOVLW  DC
1837:  MOVWF  0E
....................     
....................    glcd_init(ON); //Inicializamos el lcd 
1838:  MOVLW  01
1839:  BSF    03.6
183A:  MOVWF  25
183B:  BCF    0A.4
183C:  BCF    03.6
183D:  GOTO   4CC
183E:  BSF    0A.4
....................     
....................    enable_interrupts(INT_RB); //Habilitamos las interrupciones del RB4-7 
183F:  BSF    0B.3
....................    enable_interrupts(INT_RDA); 
1840:  BSF    03.5
1841:  BSF    0C.5
....................    enable_interrupts(GLOBAL); //Habilitamos las interrupciones globales 
1842:  MOVLW  C0
1843:  BCF    03.5
1844:  IORWF  0B,F
....................  
....................    glcd_text57(0,10,(char*)"Temperatura:",1,ON); //Escribimos el texto "Tempreatura:" en la posicion 0,10 
1845:  CLRF   78
1846:  MOVLW  0D
1847:  MOVWF  77
1848:  MOVLW  18
1849:  MOVWF  04
184A:  BSF    03.7
184B:  MOVF   78,W
184C:  BCF    0A.4
184D:  BCF    0A.3
184E:  CALL   25C
184F:  BSF    0A.4
1850:  BSF    0A.3
1851:  MOVWF  00
1852:  INCF   78,F
1853:  INCF   04,F
1854:  DECFSZ 77,F
1855:  GOTO   04B
1856:  CLRF   27
1857:  BTFSC  0B.7
1858:  BSF    27.7
1859:  BCF    0B.7
185A:  BSF    03.5
185B:  BSF    03.6
185C:  CLRF   17
185D:  MOVLW  0A
185E:  MOVWF  18
185F:  MOVLW  01
1860:  MOVWF  1A
1861:  MOVLW  18
1862:  MOVWF  19
1863:  MOVLW  01
1864:  MOVWF  1B
1865:  MOVWF  1C
1866:  BCF    0A.4
1867:  BCF    0A.3
1868:  BCF    03.5
1869:  BCF    03.6
186A:  CALL   417
186B:  BSF    0A.4
186C:  BSF    0A.3
186D:  BTFSC  27.7
186E:  BSF    0B.7
186F:  CLRF   27
1870:  BTFSC  0B.7
1871:  BSF    27.7
1872:  BCF    0B.7
....................    glcd_line(0, 8, 128, 8, ON); //Pintamos una linea por debajo del barra de notificaciones 
1873:  BSF    03.5
1874:  BSF    03.6
1875:  CLRF   1C
1876:  MOVLW  08
1877:  MOVWF  1D
1878:  MOVLW  80
1879:  MOVWF  1E
187A:  MOVLW  08
187B:  MOVWF  1F
187C:  MOVLW  01
187D:  MOVWF  20
187E:  BCF    0A.4
187F:  BCF    03.5
1880:  BCF    03.6
1881:  CALL   315
1882:  BSF    0A.4
1883:  BTFSC  27.7
1884:  BSF    0B.7
1885:  CLRF   27
1886:  BTFSC  0B.7
1887:  BSF    27.7
1888:  BCF    0B.7
....................    glcd_line(0, 19, 128, 19, ON); //Pintamos una linea por debajo de la temperatura 
1889:  BSF    03.5
188A:  BSF    03.6
188B:  CLRF   1C
188C:  MOVLW  13
188D:  MOVWF  1D
188E:  MOVLW  80
188F:  MOVWF  1E
1890:  MOVLW  13
1891:  MOVWF  1F
1892:  MOVLW  01
1893:  MOVWF  20
1894:  BCF    0A.4
1895:  BCF    03.5
1896:  BCF    03.6
1897:  CALL   315
1898:  BSF    0A.4
1899:  BTFSC  27.7
189A:  BSF    0B.7
....................     
....................    set_adc_channel(0); //Seteamos el canal que vamos a leer 
189B:  MOVLW  00
189C:  MOVWF  78
189D:  MOVF   1F,W
189E:  ANDLW  C7
189F:  IORWF  78,W
18A0:  MOVWF  1F
18A1:  CLRF   27
18A2:  BTFSC  0B.7
18A3:  BSF    27.7
18A4:  BCF    0B.7
....................    delay_ms(250); //Esperamos 250 ms para tener una captura mas real de la primera temperatura 
18A5:  MOVLW  FA
18A6:  BSF    03.6
18A7:  MOVWF  45
18A8:  BCF    0A.4
18A9:  BCF    0A.3
18AA:  BCF    03.6
18AB:  CALL   26D
18AC:  BSF    0A.4
18AD:  BSF    0A.3
18AE:  BTFSC  27.7
18AF:  BSF    0B.7
....................    iAn=read_adc(); //Levantamos el dato 
18B0:  BSF    1F.2
18B1:  BTFSC  1F.2
18B2:  GOTO   0B1
18B3:  BSF    03.5
18B4:  MOVF   1E,W
18B5:  BCF    03.5
18B6:  MOVWF  32
18B7:  MOVF   1E,W
18B8:  MOVWF  33
18B9:  CLRF   27
18BA:  BTFSC  0B.7
18BB:  BSF    27.7
18BC:  BCF    0B.7
....................    y=(5.0*iAn*100.0)/1024.0; //Lo convertemos a temperatura. Esta es la primera captura 
18BD:  MOVF   33,W
18BE:  BSF    03.5
18BF:  BSF    03.6
18C0:  MOVWF  16
18C1:  BCF    03.5
18C2:  BCF    03.6
18C3:  MOVF   32,W
18C4:  BSF    03.5
18C5:  BSF    03.6
18C6:  MOVWF  15
18C7:  BCF    0A.4
18C8:  BCF    0A.3
18C9:  BCF    03.5
18CA:  BCF    03.6
18CB:  CALL   71B
18CC:  BSF    0A.4
18CD:  BSF    0A.3
18CE:  BTFSC  27.7
18CF:  BSF    0B.7
18D0:  CLRF   27
18D1:  BTFSC  0B.7
18D2:  BSF    27.7
18D3:  BCF    0B.7
18D4:  BSF    03.5
18D5:  BSF    03.6
18D6:  CLRF   25
18D7:  CLRF   24
18D8:  MOVLW  20
18D9:  MOVWF  23
18DA:  MOVLW  81
18DB:  MOVWF  22
18DC:  MOVF   7A,W
18DD:  MOVWF  29
18DE:  MOVF   79,W
18DF:  MOVWF  28
18E0:  MOVF   78,W
18E1:  MOVWF  27
18E2:  MOVF   77,W
18E3:  MOVWF  26
18E4:  BCF    0A.4
18E5:  BCF    0A.3
18E6:  BCF    03.5
18E7:  BCF    03.6
18E8:  CALL   52D
18E9:  BSF    0A.4
18EA:  BSF    0A.3
18EB:  BTFSC  27.7
18EC:  BSF    0B.7
18ED:  MOVF   7A,W
18EE:  BSF    03.6
18EF:  MOVWF  28
18F0:  MOVF   79,W
18F1:  MOVWF  27
18F2:  MOVF   78,W
18F3:  MOVWF  26
18F4:  MOVF   77,W
18F5:  MOVWF  25
18F6:  BCF    03.6
18F7:  CLRF   27
18F8:  BTFSC  0B.7
18F9:  BSF    27.7
18FA:  BCF    0B.7
18FB:  BSF    03.6
18FC:  MOVF   28,W
18FD:  BSF    03.5
18FE:  MOVWF  25
18FF:  BCF    03.5
1900:  MOVF   27,W
1901:  BSF    03.5
1902:  MOVWF  24
1903:  BCF    03.5
1904:  MOVF   26,W
1905:  BSF    03.5
1906:  MOVWF  23
1907:  BCF    03.5
1908:  MOVF   25,W
1909:  BSF    03.5
190A:  MOVWF  22
190B:  CLRF   29
190C:  CLRF   28
190D:  MOVLW  48
190E:  MOVWF  27
190F:  MOVLW  85
1910:  MOVWF  26
1911:  BCF    0A.4
1912:  BCF    0A.3
1913:  BCF    03.5
1914:  BCF    03.6
1915:  CALL   52D
1916:  BSF    0A.4
1917:  BSF    0A.3
1918:  BTFSC  27.7
1919:  BSF    0B.7
191A:  MOVF   7A,W
191B:  BSF    03.6
191C:  MOVWF  28
191D:  MOVF   79,W
191E:  MOVWF  27
191F:  MOVF   78,W
1920:  MOVWF  26
1921:  MOVF   77,W
1922:  MOVWF  25
1923:  BCF    03.6
1924:  CLRF   27
1925:  BTFSC  0B.7
1926:  BSF    27.7
1927:  BCF    0B.7
1928:  BSF    03.6
1929:  MOVF   28,W
192A:  BSF    03.5
192B:  MOVWF  1C
192C:  BCF    03.5
192D:  MOVF   27,W
192E:  BSF    03.5
192F:  MOVWF  1B
1930:  BCF    03.5
1931:  MOVF   26,W
1932:  BSF    03.5
1933:  MOVWF  1A
1934:  BCF    03.5
1935:  MOVF   25,W
1936:  BSF    03.5
1937:  MOVWF  19
1938:  CLRF   20
1939:  CLRF   1F
193A:  CLRF   1E
193B:  MOVLW  89
193C:  MOVWF  1D
193D:  BCF    0A.4
193E:  BCF    03.5
193F:  BCF    03.6
1940:  CALL   000
1941:  BSF    0A.4
1942:  BTFSC  27.7
1943:  BSF    0B.7
1944:  MOVF   7A,W
1945:  MOVWF  2D
1946:  MOVF   79,W
1947:  MOVWF  2C
1948:  MOVF   78,W
1949:  MOVWF  2B
194A:  MOVF   77,W
194B:  MOVWF  2A
194C:  CLRF   27
194D:  BTFSC  0B.7
194E:  BSF    27.7
194F:  BCF    0B.7
....................    delay_ms(250); 
1950:  MOVLW  FA
1951:  BSF    03.6
1952:  MOVWF  45
1953:  BCF    0A.4
1954:  BCF    0A.3
1955:  BCF    03.6
1956:  CALL   26D
1957:  BSF    0A.4
1958:  BSF    0A.3
1959:  BTFSC  27.7
195A:  BSF    0B.7
....................     
....................    while(TRUE) { 
....................       if(habilitarLectura){ 
195B:  BTFSS  34.0
195C:  GOTO   58B
....................          set_adc_channel(0); //Seteamos el canal que vamos a leer 
195D:  MOVLW  00
195E:  MOVWF  78
195F:  MOVF   1F,W
1960:  ANDLW  C7
1961:  IORWF  78,W
1962:  MOVWF  1F
....................          delay_us(10); //Esperamos 10 us 
1963:  MOVLW  03
1964:  MOVWF  77
1965:  DECFSZ 77,F
1966:  GOTO   165
....................          iAn=read_adc(); //Levantamos el dato 
1967:  BSF    1F.2
1968:  BTFSC  1F.2
1969:  GOTO   168
196A:  BSF    03.5
196B:  MOVF   1E,W
196C:  BCF    03.5
196D:  MOVWF  32
196E:  MOVF   1E,W
196F:  MOVWF  33
1970:  CLRF   27
1971:  BTFSC  0B.7
1972:  BSF    27.7
1973:  BCF    0B.7
....................          t=(5.0*iAn*100.0)/1024.0; //Lo convertemos a temperatura 
1974:  MOVF   33,W
1975:  BSF    03.5
1976:  BSF    03.6
1977:  MOVWF  16
1978:  BCF    03.5
1979:  BCF    03.6
197A:  MOVF   32,W
197B:  BSF    03.5
197C:  BSF    03.6
197D:  MOVWF  15
197E:  BCF    0A.4
197F:  BCF    0A.3
1980:  BCF    03.5
1981:  BCF    03.6
1982:  CALL   71B
1983:  BSF    0A.4
1984:  BSF    0A.3
1985:  BTFSC  27.7
1986:  BSF    0B.7
1987:  CLRF   27
1988:  BTFSC  0B.7
1989:  BSF    27.7
198A:  BCF    0B.7
198B:  BSF    03.5
198C:  BSF    03.6
198D:  CLRF   25
198E:  CLRF   24
198F:  MOVLW  20
1990:  MOVWF  23
1991:  MOVLW  81
1992:  MOVWF  22
1993:  MOVF   7A,W
1994:  MOVWF  29
1995:  MOVF   79,W
1996:  MOVWF  28
1997:  MOVF   78,W
1998:  MOVWF  27
1999:  MOVF   77,W
199A:  MOVWF  26
199B:  BCF    0A.4
199C:  BCF    0A.3
199D:  BCF    03.5
199E:  BCF    03.6
199F:  CALL   52D
19A0:  BSF    0A.4
19A1:  BSF    0A.3
19A2:  BTFSC  27.7
19A3:  BSF    0B.7
19A4:  MOVF   7A,W
19A5:  BSF    03.6
19A6:  MOVWF  28
19A7:  MOVF   79,W
19A8:  MOVWF  27
19A9:  MOVF   78,W
19AA:  MOVWF  26
19AB:  MOVF   77,W
19AC:  MOVWF  25
19AD:  BCF    03.6
19AE:  CLRF   27
19AF:  BTFSC  0B.7
19B0:  BSF    27.7
19B1:  BCF    0B.7
19B2:  BSF    03.6
19B3:  MOVF   28,W
19B4:  BSF    03.5
19B5:  MOVWF  25
19B6:  BCF    03.5
19B7:  MOVF   27,W
19B8:  BSF    03.5
19B9:  MOVWF  24
19BA:  BCF    03.5
19BB:  MOVF   26,W
19BC:  BSF    03.5
19BD:  MOVWF  23
19BE:  BCF    03.5
19BF:  MOVF   25,W
19C0:  BSF    03.5
19C1:  MOVWF  22
19C2:  CLRF   29
19C3:  CLRF   28
19C4:  MOVLW  48
19C5:  MOVWF  27
19C6:  MOVLW  85
19C7:  MOVWF  26
19C8:  BCF    0A.4
19C9:  BCF    0A.3
19CA:  BCF    03.5
19CB:  BCF    03.6
19CC:  CALL   52D
19CD:  BSF    0A.4
19CE:  BSF    0A.3
19CF:  BTFSC  27.7
19D0:  BSF    0B.7
19D1:  MOVF   7A,W
19D2:  BSF    03.6
19D3:  MOVWF  28
19D4:  MOVF   79,W
19D5:  MOVWF  27
19D6:  MOVF   78,W
19D7:  MOVWF  26
19D8:  MOVF   77,W
19D9:  MOVWF  25
19DA:  BCF    03.6
19DB:  CLRF   27
19DC:  BTFSC  0B.7
19DD:  BSF    27.7
19DE:  BCF    0B.7
19DF:  BSF    03.6
19E0:  MOVF   28,W
19E1:  BSF    03.5
19E2:  MOVWF  1C
19E3:  BCF    03.5
19E4:  MOVF   27,W
19E5:  BSF    03.5
19E6:  MOVWF  1B
19E7:  BCF    03.5
19E8:  MOVF   26,W
19E9:  BSF    03.5
19EA:  MOVWF  1A
19EB:  BCF    03.5
19EC:  MOVF   25,W
19ED:  BSF    03.5
19EE:  MOVWF  19
19EF:  CLRF   20
19F0:  CLRF   1F
19F1:  CLRF   1E
19F2:  MOVLW  89
19F3:  MOVWF  1D
19F4:  BCF    0A.4
19F5:  BCF    03.5
19F6:  BCF    03.6
19F7:  CALL   000
19F8:  BSF    0A.4
19F9:  BTFSC  27.7
19FA:  BSF    0B.7
19FB:  MOVF   7A,W
19FC:  MOVWF  31
19FD:  MOVF   79,W
19FE:  MOVWF  30
19FF:  MOVF   78,W
1A00:  MOVWF  2F
1A01:  MOVF   77,W
1A02:  MOVWF  2E
1A03:  CLRF   27
1A04:  BTFSC  0B.7
1A05:  BSF    27.7
1A06:  BCF    0B.7
....................           
....................          if(t!=y){ //Si t es != al dato anterior refrescamos la temperatura y la enviamos al bluetooth 
1A07:  MOVF   31,W
1A08:  BSF    03.5
1A09:  BSF    03.6
1A0A:  MOVWF  18
1A0B:  BCF    03.5
1A0C:  BCF    03.6
1A0D:  MOVF   30,W
1A0E:  BSF    03.5
1A0F:  BSF    03.6
1A10:  MOVWF  17
1A11:  BCF    03.5
1A12:  BCF    03.6
1A13:  MOVF   2F,W
1A14:  BSF    03.5
1A15:  BSF    03.6
1A16:  MOVWF  16
1A17:  BCF    03.5
1A18:  BCF    03.6
1A19:  MOVF   2E,W
1A1A:  BSF    03.5
1A1B:  BSF    03.6
1A1C:  MOVWF  15
1A1D:  BCF    03.5
1A1E:  BCF    03.6
1A1F:  MOVF   2D,W
1A20:  BSF    03.5
1A21:  BSF    03.6
1A22:  MOVWF  1C
1A23:  BCF    03.5
1A24:  BCF    03.6
1A25:  MOVF   2C,W
1A26:  BSF    03.5
1A27:  BSF    03.6
1A28:  MOVWF  1B
1A29:  BCF    03.5
1A2A:  BCF    03.6
1A2B:  MOVF   2B,W
1A2C:  BSF    03.5
1A2D:  BSF    03.6
1A2E:  MOVWF  1A
1A2F:  BCF    03.5
1A30:  BCF    03.6
1A31:  MOVF   2A,W
1A32:  BSF    03.5
1A33:  BSF    03.6
1A34:  MOVWF  19
1A35:  BCF    0A.4
1A36:  BCF    0A.3
1A37:  BCF    03.5
1A38:  BCF    03.6
1A39:  CALL   73C
1A3A:  BSF    0A.4
1A3B:  BSF    0A.3
1A3C:  BTFSC  27.7
1A3D:  BSF    0B.7
1A3E:  BTFSC  03.2
1A3F:  GOTO   30E
....................             //str[0] = '\0'; 
....................             sprintf(str, "%4.2f°C", y); //Convertimos la temperatura float en un char* 
1A40:  MOVLW  01
1A41:  MOVWF  39
1A42:  MOVLW  10
1A43:  MOVWF  38
1A44:  MOVLW  03
1A45:  MOVWF  04
1A46:  CLRF   27
1A47:  BTFSC  0B.7
1A48:  BSF    27.7
1A49:  BCF    0B.7
1A4A:  MOVF   2D,W
1A4B:  BSF    03.5
1A4C:  BSF    03.6
1A4D:  MOVWF  18
1A4E:  BCF    03.5
1A4F:  BCF    03.6
1A50:  MOVF   2C,W
1A51:  BSF    03.5
1A52:  BSF    03.6
1A53:  MOVWF  17
1A54:  BCF    03.5
1A55:  BCF    03.6
1A56:  MOVF   2B,W
1A57:  BSF    03.5
1A58:  BSF    03.6
1A59:  MOVWF  16
1A5A:  BCF    03.5
1A5B:  BCF    03.6
1A5C:  MOVF   2A,W
1A5D:  BSF    03.5
1A5E:  BSF    03.6
1A5F:  MOVWF  15
1A60:  MOVLW  02
1A61:  MOVWF  19
1A62:  BCF    0A.4
1A63:  BCF    0A.3
1A64:  BCF    03.5
1A65:  BCF    03.6
1A66:  CALL   62D
1A67:  BSF    0A.4
1A68:  BSF    0A.3
1A69:  BTFSC  27.7
1A6A:  BSF    0B.7
1A6B:  CLRF   27
1A6C:  BTFSC  0B.7
1A6D:  BSF    27.7
1A6E:  BCF    0B.7
1A6F:  MOVLW  B0
1A70:  BSF    03.5
1A71:  BSF    03.6
1A72:  MOVWF  22
1A73:  BCF    0A.4
1A74:  BCF    0A.3
1A75:  BCF    03.5
1A76:  BCF    03.6
1A77:  CALL   61C
1A78:  BSF    0A.4
1A79:  BSF    0A.3
1A7A:  BTFSC  27.7
1A7B:  BSF    0B.7
1A7C:  CLRF   27
1A7D:  BTFSC  0B.7
1A7E:  BSF    27.7
1A7F:  BCF    0B.7
1A80:  MOVLW  43
1A81:  BSF    03.5
1A82:  BSF    03.6
1A83:  MOVWF  22
1A84:  BCF    0A.4
1A85:  BCF    0A.3
1A86:  BCF    03.5
1A87:  BCF    03.6
1A88:  CALL   61C
1A89:  BSF    0A.4
1A8A:  BSF    0A.3
1A8B:  BTFSC  27.7
1A8C:  BSF    0B.7
1A8D:  CLRF   27
1A8E:  BTFSC  0B.7
1A8F:  BSF    27.7
1A90:  BCF    0B.7
....................             glcd_text57(12*6, 10, str, 1, OFF); //borramos del lcd la temperatura anterior 
1A91:  MOVLW  48
1A92:  BSF    03.5
1A93:  BSF    03.6
1A94:  MOVWF  17
1A95:  MOVLW  0A
1A96:  MOVWF  18
1A97:  MOVLW  01
1A98:  MOVWF  1A
1A99:  MOVLW  10
1A9A:  MOVWF  19
1A9B:  MOVLW  01
1A9C:  MOVWF  1B
1A9D:  CLRF   1C
1A9E:  BCF    0A.4
1A9F:  BCF    0A.3
1AA0:  BCF    03.5
1AA1:  BCF    03.6
1AA2:  CALL   417
1AA3:  BSF    0A.4
1AA4:  BSF    0A.3
1AA5:  BTFSC  27.7
1AA6:  BSF    0B.7
....................             sprintf(str, "%4.2f°C", t); //Convertimos la temperatura float en un char* 
1AA7:  MOVLW  01
1AA8:  MOVWF  39
1AA9:  MOVLW  10
1AAA:  MOVWF  38
1AAB:  MOVLW  03
1AAC:  MOVWF  04
1AAD:  CLRF   27
1AAE:  BTFSC  0B.7
1AAF:  BSF    27.7
1AB0:  BCF    0B.7
1AB1:  MOVF   31,W
1AB2:  BSF    03.5
1AB3:  BSF    03.6
1AB4:  MOVWF  18
1AB5:  BCF    03.5
1AB6:  BCF    03.6
1AB7:  MOVF   30,W
1AB8:  BSF    03.5
1AB9:  BSF    03.6
1ABA:  MOVWF  17
1ABB:  BCF    03.5
1ABC:  BCF    03.6
1ABD:  MOVF   2F,W
1ABE:  BSF    03.5
1ABF:  BSF    03.6
1AC0:  MOVWF  16
1AC1:  BCF    03.5
1AC2:  BCF    03.6
1AC3:  MOVF   2E,W
1AC4:  BSF    03.5
1AC5:  BSF    03.6
1AC6:  MOVWF  15
1AC7:  MOVLW  02
1AC8:  MOVWF  19
1AC9:  BCF    0A.4
1ACA:  BCF    0A.3
1ACB:  BCF    03.5
1ACC:  BCF    03.6
1ACD:  CALL   62D
1ACE:  BSF    0A.4
1ACF:  BSF    0A.3
1AD0:  BTFSC  27.7
1AD1:  BSF    0B.7
1AD2:  CLRF   27
1AD3:  BTFSC  0B.7
1AD4:  BSF    27.7
1AD5:  BCF    0B.7
1AD6:  MOVLW  B0
1AD7:  BSF    03.5
1AD8:  BSF    03.6
1AD9:  MOVWF  22
1ADA:  BCF    0A.4
1ADB:  BCF    0A.3
1ADC:  BCF    03.5
1ADD:  BCF    03.6
1ADE:  CALL   61C
1ADF:  BSF    0A.4
1AE0:  BSF    0A.3
1AE1:  BTFSC  27.7
1AE2:  BSF    0B.7
1AE3:  CLRF   27
1AE4:  BTFSC  0B.7
1AE5:  BSF    27.7
1AE6:  BCF    0B.7
1AE7:  MOVLW  43
1AE8:  BSF    03.5
1AE9:  BSF    03.6
1AEA:  MOVWF  22
1AEB:  BCF    0A.4
1AEC:  BCF    0A.3
1AED:  BCF    03.5
1AEE:  BCF    03.6
1AEF:  CALL   61C
1AF0:  BSF    0A.4
1AF1:  BSF    0A.3
1AF2:  BTFSC  27.7
1AF3:  BSF    0B.7
1AF4:  CLRF   27
1AF5:  BTFSC  0B.7
1AF6:  BSF    27.7
1AF7:  BCF    0B.7
....................             glcd_text57(12*6, 10, str, 1, ON); //Escribimos la temperatura. 
1AF8:  MOVLW  48
1AF9:  BSF    03.5
1AFA:  BSF    03.6
1AFB:  MOVWF  17
1AFC:  MOVLW  0A
1AFD:  MOVWF  18
1AFE:  MOVLW  01
1AFF:  MOVWF  1A
1B00:  MOVLW  10
1B01:  MOVWF  19
1B02:  MOVLW  01
1B03:  MOVWF  1B
1B04:  MOVWF  1C
1B05:  BCF    0A.4
1B06:  BCF    0A.3
1B07:  BCF    03.5
1B08:  BCF    03.6
1B09:  CALL   417
1B0A:  BSF    0A.4
1B0B:  BSF    0A.3
1B0C:  BTFSC  27.7
1B0D:  BSF    0B.7
1B0E:  CLRF   27
1B0F:  BTFSC  0B.7
1B10:  BSF    27.7
1B11:  BCF    0B.7
....................          } 
....................          if(t<=40 && t>=35) 
1B12:  MOVF   31,W
1B13:  BSF    03.5
1B14:  BSF    03.6
1B15:  MOVWF  18
1B16:  BCF    03.5
1B17:  BCF    03.6
1B18:  MOVF   30,W
1B19:  BSF    03.5
1B1A:  BSF    03.6
1B1B:  MOVWF  17
1B1C:  BCF    03.5
1B1D:  BCF    03.6
1B1E:  MOVF   2F,W
1B1F:  BSF    03.5
1B20:  BSF    03.6
1B21:  MOVWF  16
1B22:  BCF    03.5
1B23:  BCF    03.6
1B24:  MOVF   2E,W
1B25:  BSF    03.5
1B26:  BSF    03.6
1B27:  MOVWF  15
1B28:  CLRF   1C
1B29:  CLRF   1B
1B2A:  MOVLW  20
1B2B:  MOVWF  1A
1B2C:  MOVLW  84
1B2D:  MOVWF  19
1B2E:  BCF    0A.4
1B2F:  BCF    0A.3
1B30:  BCF    03.5
1B31:  BCF    03.6
1B32:  CALL   73C
1B33:  BSF    0A.4
1B34:  BSF    0A.3
1B35:  BTFSC  27.7
1B36:  BSF    0B.7
1B37:  BTFSC  03.0
1B38:  GOTO   33B
1B39:  BTFSS  03.2
1B3A:  GOTO   36D
1B3B:  CLRF   27
1B3C:  BTFSC  0B.7
1B3D:  BSF    27.7
1B3E:  BCF    0B.7
1B3F:  BSF    03.5
1B40:  BSF    03.6
1B41:  CLRF   18
1B42:  CLRF   17
1B43:  MOVLW  0C
1B44:  MOVWF  16
1B45:  MOVLW  84
1B46:  MOVWF  15
1B47:  BCF    03.5
1B48:  BCF    03.6
1B49:  MOVF   31,W
1B4A:  BSF    03.5
1B4B:  BSF    03.6
1B4C:  MOVWF  1C
1B4D:  BCF    03.5
1B4E:  BCF    03.6
1B4F:  MOVF   30,W
1B50:  BSF    03.5
1B51:  BSF    03.6
1B52:  MOVWF  1B
1B53:  BCF    03.5
1B54:  BCF    03.6
1B55:  MOVF   2F,W
1B56:  BSF    03.5
1B57:  BSF    03.6
1B58:  MOVWF  1A
1B59:  BCF    03.5
1B5A:  BCF    03.6
1B5B:  MOVF   2E,W
1B5C:  BSF    03.5
1B5D:  BSF    03.6
1B5E:  MOVWF  19
1B5F:  BCF    0A.4
1B60:  BCF    0A.3
1B61:  BCF    03.5
1B62:  BCF    03.6
1B63:  CALL   73C
1B64:  BSF    0A.4
1B65:  BSF    0A.3
1B66:  BTFSC  27.7
1B67:  BSF    0B.7
1B68:  BTFSC  03.0
1B69:  GOTO   36C
1B6A:  BTFSS  03.2
1B6B:  GOTO   36D
....................             disable_interrupts(INT_TIMER0); 
1B6C:  BCF    0B.5
1B6D:  CLRF   27
1B6E:  BTFSC  0B.7
1B6F:  BSF    27.7
1B70:  BCF    0B.7
....................          if(t>40 || t<35) 
1B71:  BSF    03.5
1B72:  BSF    03.6
1B73:  CLRF   18
1B74:  CLRF   17
1B75:  MOVLW  20
1B76:  MOVWF  16
1B77:  MOVLW  84
1B78:  MOVWF  15
1B79:  BCF    03.5
1B7A:  BCF    03.6
1B7B:  MOVF   31,W
1B7C:  BSF    03.5
1B7D:  BSF    03.6
1B7E:  MOVWF  1C
1B7F:  BCF    03.5
1B80:  BCF    03.6
1B81:  MOVF   30,W
1B82:  BSF    03.5
1B83:  BSF    03.6
1B84:  MOVWF  1B
1B85:  BCF    03.5
1B86:  BCF    03.6
1B87:  MOVF   2F,W
1B88:  BSF    03.5
1B89:  BSF    03.6
1B8A:  MOVWF  1A
1B8B:  BCF    03.5
1B8C:  BCF    03.6
1B8D:  MOVF   2E,W
1B8E:  BSF    03.5
1B8F:  BSF    03.6
1B90:  MOVWF  19
1B91:  BCF    0A.4
1B92:  BCF    0A.3
1B93:  BCF    03.5
1B94:  BCF    03.6
1B95:  CALL   73C
1B96:  BSF    0A.4
1B97:  BSF    0A.3
1B98:  BTFSC  27.7
1B99:  BSF    0B.7
1B9A:  BTFSC  03.0
1B9B:  GOTO   3C7
1B9C:  CLRF   27
1B9D:  BTFSC  0B.7
1B9E:  BSF    27.7
1B9F:  BCF    0B.7
1BA0:  MOVF   31,W
1BA1:  BSF    03.5
1BA2:  BSF    03.6
1BA3:  MOVWF  18
1BA4:  BCF    03.5
1BA5:  BCF    03.6
1BA6:  MOVF   30,W
1BA7:  BSF    03.5
1BA8:  BSF    03.6
1BA9:  MOVWF  17
1BAA:  BCF    03.5
1BAB:  BCF    03.6
1BAC:  MOVF   2F,W
1BAD:  BSF    03.5
1BAE:  BSF    03.6
1BAF:  MOVWF  16
1BB0:  BCF    03.5
1BB1:  BCF    03.6
1BB2:  MOVF   2E,W
1BB3:  BSF    03.5
1BB4:  BSF    03.6
1BB5:  MOVWF  15
1BB6:  CLRF   1C
1BB7:  CLRF   1B
1BB8:  MOVLW  0C
1BB9:  MOVWF  1A
1BBA:  MOVLW  84
1BBB:  MOVWF  19
1BBC:  BCF    0A.4
1BBD:  BCF    0A.3
1BBE:  BCF    03.5
1BBF:  BCF    03.6
1BC0:  CALL   73C
1BC1:  BSF    0A.4
1BC2:  BSF    0A.3
1BC3:  BTFSC  27.7
1BC4:  BSF    0B.7
1BC5:  BTFSS  03.0
1BC6:  GOTO   3C8
....................             enable_interrupts(INT_TIMER0); 
1BC7:  BSF    0B.5
1BC8:  CLRF   27
1BC9:  BTFSC  0B.7
1BCA:  BSF    27.7
1BCB:  BCF    0B.7
....................          if(t<=50 && t>=28){ //Si t es menor o igual a 50 la agregamos al grafico 
1BCC:  MOVF   31,W
1BCD:  BSF    03.5
1BCE:  BSF    03.6
1BCF:  MOVWF  18
1BD0:  BCF    03.5
1BD1:  BCF    03.6
1BD2:  MOVF   30,W
1BD3:  BSF    03.5
1BD4:  BSF    03.6
1BD5:  MOVWF  17
1BD6:  BCF    03.5
1BD7:  BCF    03.6
1BD8:  MOVF   2F,W
1BD9:  BSF    03.5
1BDA:  BSF    03.6
1BDB:  MOVWF  16
1BDC:  BCF    03.5
1BDD:  BCF    03.6
1BDE:  MOVF   2E,W
1BDF:  BSF    03.5
1BE0:  BSF    03.6
1BE1:  MOVWF  15
1BE2:  CLRF   1C
1BE3:  CLRF   1B
1BE4:  MOVLW  48
1BE5:  MOVWF  1A
1BE6:  MOVLW  84
1BE7:  MOVWF  19
1BE8:  BCF    0A.4
1BE9:  BCF    0A.3
1BEA:  BCF    03.5
1BEB:  BCF    03.6
1BEC:  CALL   73C
1BED:  BSF    0A.4
1BEE:  BSF    0A.3
1BEF:  BTFSC  27.7
1BF0:  BSF    0B.7
1BF1:  BTFSC  03.0
1BF2:  GOTO   3F5
1BF3:  BTFSS  03.2
1BF4:  GOTO   48F
1BF5:  CLRF   27
1BF6:  BTFSC  0B.7
1BF7:  BSF    27.7
1BF8:  BCF    0B.7
1BF9:  BSF    03.5
1BFA:  BSF    03.6
1BFB:  CLRF   18
1BFC:  CLRF   17
1BFD:  MOVLW  60
1BFE:  MOVWF  16
1BFF:  MOVLW  83
1C00:  MOVWF  15
1C01:  BCF    03.5
1C02:  BCF    03.6
1C03:  MOVF   31,W
1C04:  BSF    03.5
1C05:  BSF    03.6
1C06:  MOVWF  1C
1C07:  BCF    03.5
1C08:  BCF    03.6
1C09:  MOVF   30,W
1C0A:  BSF    03.5
1C0B:  BSF    03.6
1C0C:  MOVWF  1B
1C0D:  BCF    03.5
1C0E:  BCF    03.6
1C0F:  MOVF   2F,W
1C10:  BSF    03.5
1C11:  BSF    03.6
1C12:  MOVWF  1A
1C13:  BCF    03.5
1C14:  BCF    03.6
1C15:  MOVF   2E,W
1C16:  BSF    03.5
1C17:  BSF    03.6
1C18:  MOVWF  19
1C19:  BCF    0A.4
1C1A:  BCF    0A.3
1C1B:  BCF    03.5
1C1C:  BCF    03.6
1C1D:  CALL   73C
1C1E:  BSF    0A.4
1C1F:  BSF    0A.3
1C20:  BTFSC  27.7
1C21:  BSF    0B.7
1C22:  BTFSC  03.0
1C23:  GOTO   426
1C24:  BTFSS  03.2
1C25:  GOTO   48F
1C26:  CLRF   27
1C27:  BTFSC  0B.7
1C28:  BSF    27.7
1C29:  BCF    0B.7
....................          	nuevaLinea(t); //Dibujamos la nueva linea en el grafico. 
1C2A:  MOVF   31,W
1C2B:  BSF    03.5
1C2C:  BSF    03.6
1C2D:  MOVWF  18
1C2E:  BCF    03.5
1C2F:  BCF    03.6
1C30:  MOVF   30,W
1C31:  BSF    03.5
1C32:  BSF    03.6
1C33:  MOVWF  17
1C34:  BCF    03.5
1C35:  BCF    03.6
1C36:  MOVF   2F,W
1C37:  BSF    03.5
1C38:  BSF    03.6
1C39:  MOVWF  16
1C3A:  BCF    03.5
1C3B:  BCF    03.6
1C3C:  MOVF   2E,W
1C3D:  BSF    03.5
1C3E:  BSF    03.6
1C3F:  MOVWF  15
1C40:  BCF    0A.4
1C41:  BCF    03.5
1C42:  BCF    03.6
1C43:  CALL   3D5
1C44:  BSF    0A.4
1C45:  BTFSC  27.7
1C46:  BSF    0B.7
....................             glcd_text57(3, 0, (char*)"T>50", 1, OFF); //ocultamos la notificacion de t>50 
1C47:  MOVLW  54
1C48:  BSF    03.6
1C49:  MOVWF  18
1C4A:  MOVLW  3E
1C4B:  MOVWF  19
1C4C:  MOVLW  35
1C4D:  MOVWF  1A
1C4E:  MOVLW  30
1C4F:  MOVWF  1B
1C50:  CLRF   1C
1C51:  BCF    03.6
1C52:  CLRF   27
1C53:  BTFSC  0B.7
1C54:  BSF    27.7
1C55:  BCF    0B.7
1C56:  MOVLW  03
1C57:  BSF    03.5
1C58:  BSF    03.6
1C59:  MOVWF  17
1C5A:  CLRF   18
1C5B:  MOVLW  01
1C5C:  MOVWF  1A
1C5D:  MOVLW  18
1C5E:  MOVWF  19
1C5F:  MOVLW  01
1C60:  MOVWF  1B
1C61:  CLRF   1C
1C62:  BCF    0A.4
1C63:  BCF    0A.3
1C64:  BCF    03.5
1C65:  BCF    03.6
1C66:  CALL   417
1C67:  BSF    0A.4
1C68:  BSF    0A.3
1C69:  BTFSC  27.7
1C6A:  BSF    0B.7
....................             glcd_text57(3, 0, (char*)"T<28", 1, OFF); //ocultamos la notificacion de t>50 
1C6B:  MOVLW  54
1C6C:  BSF    03.6
1C6D:  MOVWF  18
1C6E:  MOVLW  3C
1C6F:  MOVWF  19
1C70:  MOVLW  32
1C71:  MOVWF  1A
1C72:  MOVLW  38
1C73:  MOVWF  1B
1C74:  CLRF   1C
1C75:  BCF    03.6
1C76:  CLRF   27
1C77:  BTFSC  0B.7
1C78:  BSF    27.7
1C79:  BCF    0B.7
1C7A:  MOVLW  03
1C7B:  BSF    03.5
1C7C:  BSF    03.6
1C7D:  MOVWF  17
1C7E:  CLRF   18
1C7F:  MOVLW  01
1C80:  MOVWF  1A
1C81:  MOVLW  18
1C82:  MOVWF  19
1C83:  MOVLW  01
1C84:  MOVWF  1B
1C85:  CLRF   1C
1C86:  BCF    0A.4
1C87:  BCF    0A.3
1C88:  BCF    03.5
1C89:  BCF    03.6
1C8A:  CALL   417
1C8B:  BSF    0A.4
1C8C:  BSF    0A.3
1C8D:  BTFSC  27.7
1C8E:  BSF    0B.7
1C8F:  CLRF   27
1C90:  BTFSC  0B.7
1C91:  BSF    27.7
1C92:  BCF    0B.7
....................          } 
....................          if(t>50){ 
1C93:  BSF    03.5
1C94:  BSF    03.6
1C95:  CLRF   18
1C96:  CLRF   17
1C97:  MOVLW  48
1C98:  MOVWF  16
1C99:  MOVLW  84
1C9A:  MOVWF  15
1C9B:  BCF    03.5
1C9C:  BCF    03.6
1C9D:  MOVF   31,W
1C9E:  BSF    03.5
1C9F:  BSF    03.6
1CA0:  MOVWF  1C
1CA1:  BCF    03.5
1CA2:  BCF    03.6
1CA3:  MOVF   30,W
1CA4:  BSF    03.5
1CA5:  BSF    03.6
1CA6:  MOVWF  1B
1CA7:  BCF    03.5
1CA8:  BCF    03.6
1CA9:  MOVF   2F,W
1CAA:  BSF    03.5
1CAB:  BSF    03.6
1CAC:  MOVWF  1A
1CAD:  BCF    03.5
1CAE:  BCF    03.6
1CAF:  MOVF   2E,W
1CB0:  BSF    03.5
1CB1:  BSF    03.6
1CB2:  MOVWF  19
1CB3:  BCF    0A.4
1CB4:  BCF    0A.3
1CB5:  BCF    03.5
1CB6:  BCF    03.6
1CB7:  CALL   73C
1CB8:  BSF    0A.4
1CB9:  BSF    0A.3
1CBA:  BTFSC  27.7
1CBB:  BSF    0B.7
1CBC:  BTFSS  03.0
1CBD:  GOTO   4EA
....................             glcd_text57(3, 0, (char*)"T>50", 1, ON); //Esto significa que no graficamos temperaturas superiores a 50 
1CBE:  MOVLW  54
1CBF:  BSF    03.6
1CC0:  MOVWF  18
1CC1:  MOVLW  3E
1CC2:  MOVWF  19
1CC3:  MOVLW  35
1CC4:  MOVWF  1A
1CC5:  MOVLW  30
1CC6:  MOVWF  1B
1CC7:  CLRF   1C
1CC8:  BCF    03.6
1CC9:  CLRF   27
1CCA:  BTFSC  0B.7
1CCB:  BSF    27.7
1CCC:  BCF    0B.7
1CCD:  MOVLW  03
1CCE:  BSF    03.5
1CCF:  BSF    03.6
1CD0:  MOVWF  17
1CD1:  CLRF   18
1CD2:  MOVLW  01
1CD3:  MOVWF  1A
1CD4:  MOVLW  18
1CD5:  MOVWF  19
1CD6:  MOVLW  01
1CD7:  MOVWF  1B
1CD8:  MOVWF  1C
1CD9:  BCF    0A.4
1CDA:  BCF    0A.3
1CDB:  BCF    03.5
1CDC:  BCF    03.6
1CDD:  CALL   417
1CDE:  BSF    0A.4
1CDF:  BSF    0A.3
1CE0:  BTFSC  27.7
1CE1:  BSF    0B.7
....................             y=t; //igualamos el dato anterior al valor de temperatura para no refrescar otra vez el valor de la temperatura 
1CE2:  MOVF   31,W
1CE3:  MOVWF  2D
1CE4:  MOVF   30,W
1CE5:  MOVWF  2C
1CE6:  MOVF   2F,W
1CE7:  MOVWF  2B
1CE8:  MOVF   2E,W
1CE9:  MOVWF  2A
1CEA:  CLRF   27
1CEB:  BTFSC  0B.7
1CEC:  BSF    27.7
1CED:  BCF    0B.7
....................          } 
....................          if(t<28){ 
1CEE:  MOVF   31,W
1CEF:  BSF    03.5
1CF0:  BSF    03.6
1CF1:  MOVWF  18
1CF2:  BCF    03.5
1CF3:  BCF    03.6
1CF4:  MOVF   30,W
1CF5:  BSF    03.5
1CF6:  BSF    03.6
1CF7:  MOVWF  17
1CF8:  BCF    03.5
1CF9:  BCF    03.6
1CFA:  MOVF   2F,W
1CFB:  BSF    03.5
1CFC:  BSF    03.6
1CFD:  MOVWF  16
1CFE:  BCF    03.5
1CFF:  BCF    03.6
1D00:  MOVF   2E,W
1D01:  BSF    03.5
1D02:  BSF    03.6
1D03:  MOVWF  15
1D04:  CLRF   1C
1D05:  CLRF   1B
1D06:  MOVLW  60
1D07:  MOVWF  1A
1D08:  MOVLW  83
1D09:  MOVWF  19
1D0A:  BCF    0A.4
1D0B:  BCF    0A.3
1D0C:  BCF    03.5
1D0D:  BCF    03.6
1D0E:  CALL   73C
1D0F:  BSF    0A.4
1D10:  BSF    0A.3
1D11:  BTFSC  27.7
1D12:  BSF    0B.7
1D13:  BTFSS  03.0
1D14:  GOTO   541
....................             glcd_text57(3, 0, (char*)"T<28", 1, ON); //Esto significa que no graficamos temperaturas superiores a 50 
1D15:  MOVLW  54
1D16:  BSF    03.6
1D17:  MOVWF  18
1D18:  MOVLW  3C
1D19:  MOVWF  19
1D1A:  MOVLW  32
1D1B:  MOVWF  1A
1D1C:  MOVLW  38
1D1D:  MOVWF  1B
1D1E:  CLRF   1C
1D1F:  BCF    03.6
1D20:  CLRF   27
1D21:  BTFSC  0B.7
1D22:  BSF    27.7
1D23:  BCF    0B.7
1D24:  MOVLW  03
1D25:  BSF    03.5
1D26:  BSF    03.6
1D27:  MOVWF  17
1D28:  CLRF   18
1D29:  MOVLW  01
1D2A:  MOVWF  1A
1D2B:  MOVLW  18
1D2C:  MOVWF  19
1D2D:  MOVLW  01
1D2E:  MOVWF  1B
1D2F:  MOVWF  1C
1D30:  BCF    0A.4
1D31:  BCF    0A.3
1D32:  BCF    03.5
1D33:  BCF    03.6
1D34:  CALL   417
1D35:  BSF    0A.4
1D36:  BSF    0A.3
1D37:  BTFSC  27.7
1D38:  BSF    0B.7
....................             y=t; //igualamos el dato anterior al valor de temperatura para no refrescar otra vez el valor de la temperatura 
1D39:  MOVF   31,W
1D3A:  MOVWF  2D
1D3B:  MOVF   30,W
1D3C:  MOVWF  2C
1D3D:  MOVF   2F,W
1D3E:  MOVWF  2B
1D3F:  MOVF   2E,W
1D40:  MOVWF  2A
....................          } 
....................          sprintf(str, "%4.2f", t); //Convertimos la temperatura float en un char* 
1D41:  MOVLW  01
1D42:  MOVWF  39
1D43:  MOVLW  10
1D44:  MOVWF  38
1D45:  MOVLW  03
1D46:  MOVWF  04
1D47:  CLRF   27
1D48:  BTFSC  0B.7
1D49:  BSF    27.7
1D4A:  BCF    0B.7
1D4B:  MOVF   31,W
1D4C:  BSF    03.5
1D4D:  BSF    03.6
1D4E:  MOVWF  18
1D4F:  BCF    03.5
1D50:  BCF    03.6
1D51:  MOVF   30,W
1D52:  BSF    03.5
1D53:  BSF    03.6
1D54:  MOVWF  17
1D55:  BCF    03.5
1D56:  BCF    03.6
1D57:  MOVF   2F,W
1D58:  BSF    03.5
1D59:  BSF    03.6
1D5A:  MOVWF  16
1D5B:  BCF    03.5
1D5C:  BCF    03.6
1D5D:  MOVF   2E,W
1D5E:  BSF    03.5
1D5F:  BSF    03.6
1D60:  MOVWF  15
1D61:  MOVLW  02
1D62:  MOVWF  19
1D63:  BCF    0A.4
1D64:  BCF    0A.3
1D65:  BCF    03.5
1D66:  BCF    03.6
1D67:  CALL   62D
1D68:  BSF    0A.4
1D69:  BSF    0A.3
1D6A:  BTFSC  27.7
1D6B:  BSF    0B.7
....................          puts(str); //Enviamos la temperatura por bluetooth 
1D6C:  MOVLW  10
1D6D:  MOVWF  04
1D6E:  BSF    03.7
1D6F:  BCF    0A.4
1D70:  BCF    0A.3
1D71:  GOTO   7DB
1D72:  BSF    0A.4
1D73:  BSF    0A.3
1D74:  MOVLW  0D
1D75:  BTFSS  0C.4
1D76:  GOTO   575
1D77:  MOVWF  19
1D78:  MOVLW  0A
1D79:  BTFSS  0C.4
1D7A:  GOTO   579
1D7B:  MOVWF  19
1D7C:  CLRF   27
1D7D:  BTFSC  0B.7
1D7E:  BSF    27.7
1D7F:  BCF    0B.7
....................          delay_ms(250); 
1D80:  MOVLW  FA
1D81:  BSF    03.6
1D82:  MOVWF  45
1D83:  BCF    0A.4
1D84:  BCF    0A.3
1D85:  BCF    03.6
1D86:  CALL   26D
1D87:  BSF    0A.4
1D88:  BSF    0A.3
1D89:  BTFSC  27.7
1D8A:  BSF    0B.7
....................       } 
1D8B:  GOTO   15B
....................    } 
.................... } 
....................  
1D8C:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
